
build/Quadrotor.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c0 <Reset_Handler>:
 80001c0:	b672      	cpsid	i
 80001c2:	4834      	ldr	r0, [pc, #208]	; (8000294 <endfiniloop+0x6>)
 80001c4:	f380 8809 	msr	PSP, r0
 80001c8:	f240 0000 	movw	r0, #0
 80001cc:	f2cc 0000 	movt	r0, #49152	; 0xc000
 80001d0:	f64e 7134 	movw	r1, #61236	; 0xef34
 80001d4:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001d8:	6008      	str	r0, [r1, #0]
 80001da:	f3bf 8f4f 	dsb	sy
 80001de:	f3bf 8f6f 	isb	sy
 80001e2:	f240 0000 	movw	r0, #0
 80001e6:	f2c0 00f0 	movt	r0, #240	; 0xf0
 80001ea:	f64e 5188 	movw	r1, #60808	; 0xed88
 80001ee:	f2ce 0100 	movt	r1, #57344	; 0xe000
 80001f2:	6008      	str	r0, [r1, #0]
 80001f4:	f3bf 8f4f 	dsb	sy
 80001f8:	f3bf 8f6f 	isb	sy
 80001fc:	f04f 0000 	mov.w	r0, #0
 8000200:	eee1 0a10 	vmsr	fpscr, r0
 8000204:	f64e 713c 	movw	r1, #61244	; 0xef3c
 8000208:	f2ce 0100 	movt	r1, #57344	; 0xe000
 800020c:	6008      	str	r0, [r1, #0]
 800020e:	2006      	movs	r0, #6
 8000210:	f380 8814 	msr	CONTROL, r0
 8000214:	f3bf 8f6f 	isb	sy
 8000218:	f000 fe02 	bl	8000e20 <__core_init>
 800021c:	f004 fe60 	bl	8004ee0 <__early_init>
 8000220:	481d      	ldr	r0, [pc, #116]	; (8000298 <endfiniloop+0xa>)
 8000222:	491e      	ldr	r1, [pc, #120]	; (800029c <endfiniloop+0xe>)
 8000224:	4a1e      	ldr	r2, [pc, #120]	; (80002a0 <endfiniloop+0x12>)

08000226 <msloop>:
 8000226:	4291      	cmp	r1, r2
 8000228:	bf3c      	itt	cc
 800022a:	f841 0b04 	strcc.w	r0, [r1], #4
 800022e:	e7fa      	bcc.n	8000226 <msloop>
 8000230:	491c      	ldr	r1, [pc, #112]	; (80002a4 <endfiniloop+0x16>)
 8000232:	4a18      	ldr	r2, [pc, #96]	; (8000294 <endfiniloop+0x6>)

08000234 <psloop>:
 8000234:	4291      	cmp	r1, r2
 8000236:	bf3c      	itt	cc
 8000238:	f841 0b04 	strcc.w	r0, [r1], #4
 800023c:	e7fa      	bcc.n	8000234 <psloop>
 800023e:	491a      	ldr	r1, [pc, #104]	; (80002a8 <endfiniloop+0x1a>)
 8000240:	4a1a      	ldr	r2, [pc, #104]	; (80002ac <endfiniloop+0x1e>)
 8000242:	4b1b      	ldr	r3, [pc, #108]	; (80002b0 <endfiniloop+0x22>)

08000244 <dloop>:
 8000244:	429a      	cmp	r2, r3
 8000246:	bf3e      	ittt	cc
 8000248:	f851 0b04 	ldrcc.w	r0, [r1], #4
 800024c:	f842 0b04 	strcc.w	r0, [r2], #4
 8000250:	e7f8      	bcc.n	8000244 <dloop>
 8000252:	2000      	movs	r0, #0
 8000254:	4917      	ldr	r1, [pc, #92]	; (80002b4 <endfiniloop+0x26>)
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <endfiniloop+0x2a>)

08000258 <bloop>:
 8000258:	4291      	cmp	r1, r2
 800025a:	bf3c      	itt	cc
 800025c:	f841 0b04 	strcc.w	r0, [r1], #4
 8000260:	e7fa      	bcc.n	8000258 <bloop>
 8000262:	f000 fdf5 	bl	8000e50 <__init_ram_areas>
 8000266:	f000 fde3 	bl	8000e30 <__late_init>
 800026a:	4c14      	ldr	r4, [pc, #80]	; (80002bc <endfiniloop+0x2e>)
 800026c:	4d14      	ldr	r5, [pc, #80]	; (80002c0 <endfiniloop+0x32>)

0800026e <initloop>:
 800026e:	42ac      	cmp	r4, r5
 8000270:	da03      	bge.n	800027a <endinitloop>
 8000272:	f854 1b04 	ldr.w	r1, [r4], #4
 8000276:	4788      	blx	r1
 8000278:	e7f9      	b.n	800026e <initloop>

0800027a <endinitloop>:
 800027a:	f005 f881 	bl	8005380 <main>
 800027e:	4c11      	ldr	r4, [pc, #68]	; (80002c4 <endfiniloop+0x36>)
 8000280:	4d11      	ldr	r5, [pc, #68]	; (80002c8 <endfiniloop+0x3a>)

08000282 <finiloop>:
 8000282:	42ac      	cmp	r4, r5
 8000284:	da03      	bge.n	800028e <endfiniloop>
 8000286:	f854 1b04 	ldr.w	r1, [r4], #4
 800028a:	4788      	blx	r1
 800028c:	e7f9      	b.n	8000282 <finiloop>

0800028e <endfiniloop>:
 800028e:	f000 bdd7 	b.w	8000e40 <__default_exit>
 8000292:	0000      	.short	0x0000
 8000294:	20000800 	.word	0x20000800
 8000298:	55555555 	.word	0x55555555
 800029c:	20000000 	.word	0x20000000
 80002a0:	20000400 	.word	0x20000400
 80002a4:	20000400 	.word	0x20000400
 80002a8:	08007e08 	.word	0x08007e08
 80002ac:	20000800 	.word	0x20000800
 80002b0:	20000c6c 	.word	0x20000c6c
 80002b4:	20000c70 	.word	0x20000c70
 80002b8:	20001b84 	.word	0x20001b84
 80002bc:	080001c0 	.word	0x080001c0
 80002c0:	080001c0 	.word	0x080001c0
 80002c4:	080001c0 	.word	0x080001c0
 80002c8:	080001c0 	.word	0x080001c0
 80002cc:	00000000 	.word	0x00000000

080002d0 <_port_switch>:
 80002d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d4:	ed2d 8a10 	vpush	{s16-s31}
 80002d8:	f8c1 d00c 	str.w	sp, [r1, #12]
 80002dc:	68c3      	ldr	r3, [r0, #12]
 80002de:	469d      	mov	sp, r3
 80002e0:	ecbd 8a10 	vpop	{s16-s31}
 80002e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e8 <_port_thread_start>:
 80002e8:	2300      	movs	r3, #0
 80002ea:	f383 8811 	msr	BASEPRI, r3
 80002ee:	4628      	mov	r0, r5
 80002f0:	47a0      	blx	r4
 80002f2:	2000      	movs	r0, #0
 80002f4:	f001 f8e4 	bl	80014c0 <chThdExit>

080002f8 <_port_switch_from_isr>:
 80002f8:	f001 f802 	bl	8001300 <chSchDoReschedule>

080002fc <_port_exit_from_isr>:
 80002fc:	df00      	svc	0
 80002fe:	e7fe      	b.n	80002fe <_port_exit_from_isr+0x2>

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f092 0f00 	teq	r2, #0
 80005ea:	bf14      	ite	ne
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	4770      	bxeq	lr
 80005f2:	b530      	push	{r4, r5, lr}
 80005f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000600:	e720      	b.n	8000444 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_ul2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	e00a      	b.n	800062a <__aeabi_l2d+0x16>

08000614 <__aeabi_l2d>:
 8000614:	ea50 0201 	orrs.w	r2, r0, r1
 8000618:	bf08      	it	eq
 800061a:	4770      	bxeq	lr
 800061c:	b530      	push	{r4, r5, lr}
 800061e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000622:	d502      	bpl.n	800062a <__aeabi_l2d+0x16>
 8000624:	4240      	negs	r0, r0
 8000626:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800062e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000632:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000636:	f43f aedc 	beq.w	80003f2 <__adddf3+0xe6>
 800063a:	f04f 0203 	mov.w	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000652:	f1c2 0320 	rsb	r3, r2, #32
 8000656:	fa00 fc03 	lsl.w	ip, r0, r3
 800065a:	fa20 f002 	lsr.w	r0, r0, r2
 800065e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000662:	ea40 000e 	orr.w	r0, r0, lr
 8000666:	fa21 f102 	lsr.w	r1, r1, r2
 800066a:	4414      	add	r4, r2
 800066c:	e6c1      	b.n	80003f2 <__adddf3+0xe6>
 800066e:	bf00      	nop

08000670 <__aeabi_dmul>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000676:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800067e:	bf1d      	ittte	ne
 8000680:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000684:	ea94 0f0c 	teqne	r4, ip
 8000688:	ea95 0f0c 	teqne	r5, ip
 800068c:	f000 f8de 	bleq	800084c <__aeabi_dmul+0x1dc>
 8000690:	442c      	add	r4, r5
 8000692:	ea81 0603 	eor.w	r6, r1, r3
 8000696:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800069e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a2:	bf18      	it	ne
 80006a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b0:	d038      	beq.n	8000724 <__aeabi_dmul+0xb4>
 80006b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006c6:	f04f 0600 	mov.w	r6, #0
 80006ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ce:	f09c 0f00 	teq	ip, #0
 80006d2:	bf18      	it	ne
 80006d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e4:	d204      	bcs.n	80006f0 <__aeabi_dmul+0x80>
 80006e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ea:	416d      	adcs	r5, r5
 80006ec:	eb46 0606 	adc.w	r6, r6, r6
 80006f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000700:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000704:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000708:	bf88      	it	hi
 800070a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800070e:	d81e      	bhi.n	800074e <__aeabi_dmul+0xde>
 8000710:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000714:	bf08      	it	eq
 8000716:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071a:	f150 0000 	adcs.w	r0, r0, #0
 800071e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000728:	ea46 0101 	orr.w	r1, r6, r1
 800072c:	ea40 0002 	orr.w	r0, r0, r2
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000738:	bfc2      	ittt	gt
 800073a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800073e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000742:	bd70      	popgt	{r4, r5, r6, pc}
 8000744:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000748:	f04f 0e00 	mov.w	lr, #0
 800074c:	3c01      	subs	r4, #1
 800074e:	f300 80ab 	bgt.w	80008a8 <__aeabi_dmul+0x238>
 8000752:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000756:	bfde      	ittt	le
 8000758:	2000      	movle	r0, #0
 800075a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800075e:	bd70      	pople	{r4, r5, r6, pc}
 8000760:	f1c4 0400 	rsb	r4, r4, #0
 8000764:	3c20      	subs	r4, #32
 8000766:	da35      	bge.n	80007d4 <__aeabi_dmul+0x164>
 8000768:	340c      	adds	r4, #12
 800076a:	dc1b      	bgt.n	80007a4 <__aeabi_dmul+0x134>
 800076c:	f104 0414 	add.w	r4, r4, #20
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f305 	lsl.w	r3, r0, r5
 8000778:	fa20 f004 	lsr.w	r0, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	fa21 f604 	lsr.w	r6, r1, r4
 8000794:	eb42 0106 	adc.w	r1, r2, r6
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 040c 	rsb	r4, r4, #12
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f304 	lsl.w	r3, r0, r4
 80007b0:	fa20 f005 	lsr.w	r0, r0, r5
 80007b4:	fa01 f204 	lsl.w	r2, r1, r4
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c4:	f141 0100 	adc.w	r1, r1, #0
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f205 	lsl.w	r2, r0, r5
 80007dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e0:	fa20 f304 	lsr.w	r3, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea43 0302 	orr.w	r3, r3, r2
 80007ec:	fa21 f004 	lsr.w	r0, r1, r4
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	fa21 f204 	lsr.w	r2, r1, r4
 80007f8:	ea20 0002 	bic.w	r0, r0, r2
 80007fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f094 0f00 	teq	r4, #0
 8000810:	d10f      	bne.n	8000832 <__aeabi_dmul+0x1c2>
 8000812:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000816:	0040      	lsls	r0, r0, #1
 8000818:	eb41 0101 	adc.w	r1, r1, r1
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3c01      	subeq	r4, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1a6>
 8000826:	ea41 0106 	orr.w	r1, r1, r6
 800082a:	f095 0f00 	teq	r5, #0
 800082e:	bf18      	it	ne
 8000830:	4770      	bxne	lr
 8000832:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000836:	0052      	lsls	r2, r2, #1
 8000838:	eb43 0303 	adc.w	r3, r3, r3
 800083c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000840:	bf08      	it	eq
 8000842:	3d01      	subeq	r5, #1
 8000844:	d0f7      	beq.n	8000836 <__aeabi_dmul+0x1c6>
 8000846:	ea43 0306 	orr.w	r3, r3, r6
 800084a:	4770      	bx	lr
 800084c:	ea94 0f0c 	teq	r4, ip
 8000850:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000854:	bf18      	it	ne
 8000856:	ea95 0f0c 	teqne	r5, ip
 800085a:	d00c      	beq.n	8000876 <__aeabi_dmul+0x206>
 800085c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000860:	bf18      	it	ne
 8000862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000866:	d1d1      	bne.n	800080c <__aeabi_dmul+0x19c>
 8000868:	ea81 0103 	eor.w	r1, r1, r3
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087a:	bf06      	itte	eq
 800087c:	4610      	moveq	r0, r2
 800087e:	4619      	moveq	r1, r3
 8000880:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000884:	d019      	beq.n	80008ba <__aeabi_dmul+0x24a>
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	d102      	bne.n	8000892 <__aeabi_dmul+0x222>
 800088c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000890:	d113      	bne.n	80008ba <__aeabi_dmul+0x24a>
 8000892:	ea95 0f0c 	teq	r5, ip
 8000896:	d105      	bne.n	80008a4 <__aeabi_dmul+0x234>
 8000898:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800089c:	bf1c      	itt	ne
 800089e:	4610      	movne	r0, r2
 80008a0:	4619      	movne	r1, r3
 80008a2:	d10a      	bne.n	80008ba <__aeabi_dmul+0x24a>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	bd70      	pop	{r4, r5, r6, pc}
 80008ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c2:	bd70      	pop	{r4, r5, r6, pc}

080008c4 <__aeabi_ddiv>:
 80008c4:	b570      	push	{r4, r5, r6, lr}
 80008c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d2:	bf1d      	ittte	ne
 80008d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d8:	ea94 0f0c 	teqne	r4, ip
 80008dc:	ea95 0f0c 	teqne	r5, ip
 80008e0:	f000 f8a7 	bleq	8000a32 <__aeabi_ddiv+0x16e>
 80008e4:	eba4 0405 	sub.w	r4, r4, r5
 80008e8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f4:	f000 8088 	beq.w	8000a08 <__aeabi_ddiv+0x144>
 80008f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000900:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000904:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000908:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800090c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000910:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000914:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000918:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800091c:	429d      	cmp	r5, r3
 800091e:	bf08      	it	eq
 8000920:	4296      	cmpeq	r6, r2
 8000922:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000926:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092a:	d202      	bcs.n	8000932 <__aeabi_ddiv+0x6e>
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	1ab6      	subs	r6, r6, r2
 8000934:	eb65 0503 	sbc.w	r5, r5, r3
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000942:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 000c 	orrcs.w	r0, r0, ip
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a0:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a4:	d018      	beq.n	80009d8 <__aeabi_ddiv+0x114>
 80009a6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009aa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009b6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009ba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009be:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c2:	d1c0      	bne.n	8000946 <__aeabi_ddiv+0x82>
 80009c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c8:	d10b      	bne.n	80009e2 <__aeabi_ddiv+0x11e>
 80009ca:	ea41 0100 	orr.w	r1, r1, r0
 80009ce:	f04f 0000 	mov.w	r0, #0
 80009d2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009d6:	e7b6      	b.n	8000946 <__aeabi_ddiv+0x82>
 80009d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009dc:	bf04      	itt	eq
 80009de:	4301      	orreq	r1, r0
 80009e0:	2000      	moveq	r0, #0
 80009e2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009e6:	bf88      	it	hi
 80009e8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ec:	f63f aeaf 	bhi.w	800074e <__aeabi_dmul+0xde>
 80009f0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f4:	bf04      	itt	eq
 80009f6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009fe:	f150 0000 	adcs.w	r0, r0, #0
 8000a02:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a0c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a10:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a14:	bfc2      	ittt	gt
 8000a16:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	popgt	{r4, r5, r6, pc}
 8000a20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a24:	f04f 0e00 	mov.w	lr, #0
 8000a28:	3c01      	subs	r4, #1
 8000a2a:	e690      	b.n	800074e <__aeabi_dmul+0xde>
 8000a2c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a30:	e68d      	b.n	800074e <__aeabi_dmul+0xde>
 8000a32:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a36:	ea94 0f0c 	teq	r4, ip
 8000a3a:	bf08      	it	eq
 8000a3c:	ea95 0f0c 	teqeq	r5, ip
 8000a40:	f43f af3b 	beq.w	80008ba <__aeabi_dmul+0x24a>
 8000a44:	ea94 0f0c 	teq	r4, ip
 8000a48:	d10a      	bne.n	8000a60 <__aeabi_ddiv+0x19c>
 8000a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a4e:	f47f af34 	bne.w	80008ba <__aeabi_dmul+0x24a>
 8000a52:	ea95 0f0c 	teq	r5, ip
 8000a56:	f47f af25 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	e72c      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a60:	ea95 0f0c 	teq	r5, ip
 8000a64:	d106      	bne.n	8000a74 <__aeabi_ddiv+0x1b0>
 8000a66:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6a:	f43f aefd 	beq.w	8000868 <__aeabi_dmul+0x1f8>
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	e722      	b.n	80008ba <__aeabi_dmul+0x24a>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	f47f aec5 	bne.w	800080c <__aeabi_dmul+0x19c>
 8000a82:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a86:	f47f af0d 	bne.w	80008a4 <__aeabi_dmul+0x234>
 8000a8a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a8e:	f47f aeeb 	bne.w	8000868 <__aeabi_dmul+0x1f8>
 8000a92:	e712      	b.n	80008ba <__aeabi_dmul+0x24a>
	...

08000aa0 <__gedf2>:
 8000aa0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa4:	e006      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__ledf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	e002      	b.n	8000ab4 <__cmpdf2+0x4>
 8000aae:	bf00      	nop

08000ab0 <__cmpdf2>:
 8000ab0:	f04f 0c01 	mov.w	ip, #1
 8000ab4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	bf18      	it	ne
 8000ac6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aca:	d01b      	beq.n	8000b04 <__cmpdf2+0x54>
 8000acc:	b001      	add	sp, #4
 8000ace:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ad2:	bf0c      	ite	eq
 8000ad4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad8:	ea91 0f03 	teqne	r1, r3
 8000adc:	bf02      	ittt	eq
 8000ade:	ea90 0f02 	teqeq	r0, r2
 8000ae2:	2000      	moveq	r0, #0
 8000ae4:	4770      	bxeq	lr
 8000ae6:	f110 0f00 	cmn.w	r0, #0
 8000aea:	ea91 0f03 	teq	r1, r3
 8000aee:	bf58      	it	pl
 8000af0:	4299      	cmppl	r1, r3
 8000af2:	bf08      	it	eq
 8000af4:	4290      	cmpeq	r0, r2
 8000af6:	bf2c      	ite	cs
 8000af8:	17d8      	asrcs	r0, r3, #31
 8000afa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afe:	f040 0001 	orr.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__cmpdf2+0x64>
 8000b0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b12:	d107      	bne.n	8000b24 <__cmpdf2+0x74>
 8000b14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d1d6      	bne.n	8000acc <__cmpdf2+0x1c>
 8000b1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b22:	d0d3      	beq.n	8000acc <__cmpdf2+0x1c>
 8000b24:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_cdrcmple>:
 8000b2c:	4684      	mov	ip, r0
 8000b2e:	4610      	mov	r0, r2
 8000b30:	4662      	mov	r2, ip
 8000b32:	468c      	mov	ip, r1
 8000b34:	4619      	mov	r1, r3
 8000b36:	4663      	mov	r3, ip
 8000b38:	e000      	b.n	8000b3c <__aeabi_cdcmpeq>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_cdcmpeq>:
 8000b3c:	b501      	push	{r0, lr}
 8000b3e:	f7ff ffb7 	bl	8000ab0 <__cmpdf2>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	bf48      	it	mi
 8000b46:	f110 0f00 	cmnmi.w	r0, #0
 8000b4a:	bd01      	pop	{r0, pc}

08000b4c <__aeabi_dcmpeq>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff fff4 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b54:	bf0c      	ite	eq
 8000b56:	2001      	moveq	r0, #1
 8000b58:	2000      	movne	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmplt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffea 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmple>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffe0 	bl	8000b3c <__aeabi_cdcmpeq>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpge>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffce 	bl	8000b2c <__aeabi_cdrcmple>
 8000b90:	bf94      	ite	ls
 8000b92:	2001      	movls	r0, #1
 8000b94:	2000      	movhi	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpgt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffc4 	bl	8000b2c <__aeabi_cdrcmple>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2iz>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d215      	bcs.n	8000be6 <__aeabi_d2iz+0x36>
 8000bba:	d511      	bpl.n	8000be0 <__aeabi_d2iz+0x30>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d912      	bls.n	8000bec <__aeabi_d2iz+0x3c>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bd6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d105      	bne.n	8000bf8 <__aeabi_d2iz+0x48>
 8000bec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	bf08      	it	eq
 8000bf2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_d2uiz>:
 8000c00:	004a      	lsls	r2, r1, #1
 8000c02:	d211      	bcs.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c08:	d211      	bcs.n	8000c2e <__aeabi_d2uiz+0x2e>
 8000c0a:	d50d      	bpl.n	8000c28 <__aeabi_d2uiz+0x28>
 8000c0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c14:	d40e      	bmi.n	8000c34 <__aeabi_d2uiz+0x34>
 8000c16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c22:	fa23 f002 	lsr.w	r0, r3, r2
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d102      	bne.n	8000c3a <__aeabi_d2uiz+0x3a>
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c38:	4770      	bx	lr
 8000c3a:	f04f 0000 	mov.w	r0, #0
 8000c3e:	4770      	bx	lr

08000c40 <__aeabi_d2f>:
 8000c40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c48:	bf24      	itt	cs
 8000c4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c52:	d90d      	bls.n	8000c70 <__aeabi_d2f+0x30>
 8000c54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c68:	bf08      	it	eq
 8000c6a:	f020 0001 	biceq.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c74:	d121      	bne.n	8000cba <__aeabi_d2f+0x7a>
 8000c76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c7a:	bfbc      	itt	lt
 8000c7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c80:	4770      	bxlt	lr
 8000c82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c8a:	f1c2 0218 	rsb	r2, r2, #24
 8000c8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c96:	fa20 f002 	lsr.w	r0, r0, r2
 8000c9a:	bf18      	it	ne
 8000c9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ca0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ca4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cac:	ea40 000c 	orr.w	r0, r0, ip
 8000cb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb8:	e7cc      	b.n	8000c54 <__aeabi_d2f+0x14>
 8000cba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cbe:	d107      	bne.n	8000cd0 <__aeabi_d2f+0x90>
 8000cc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cc4:	bf1e      	ittt	ne
 8000cc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cce:	4770      	bxne	lr
 8000cd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop

08000ce0 <memcpy>:
 8000ce0:	4684      	mov	ip, r0
 8000ce2:	ea41 0300 	orr.w	r3, r1, r0
 8000ce6:	f013 0303 	ands.w	r3, r3, #3
 8000cea:	d16d      	bne.n	8000dc8 <memcpy+0xe8>
 8000cec:	3a40      	subs	r2, #64	; 0x40
 8000cee:	d341      	bcc.n	8000d74 <memcpy+0x94>
 8000cf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cf4:	f840 3b04 	str.w	r3, [r0], #4
 8000cf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cfc:	f840 3b04 	str.w	r3, [r0], #4
 8000d00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d04:	f840 3b04 	str.w	r3, [r0], #4
 8000d08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d0c:	f840 3b04 	str.w	r3, [r0], #4
 8000d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d14:	f840 3b04 	str.w	r3, [r0], #4
 8000d18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d1c:	f840 3b04 	str.w	r3, [r0], #4
 8000d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d24:	f840 3b04 	str.w	r3, [r0], #4
 8000d28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d2c:	f840 3b04 	str.w	r3, [r0], #4
 8000d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d34:	f840 3b04 	str.w	r3, [r0], #4
 8000d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d3c:	f840 3b04 	str.w	r3, [r0], #4
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d54:	f840 3b04 	str.w	r3, [r0], #4
 8000d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d5c:	f840 3b04 	str.w	r3, [r0], #4
 8000d60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d64:	f840 3b04 	str.w	r3, [r0], #4
 8000d68:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d6c:	f840 3b04 	str.w	r3, [r0], #4
 8000d70:	3a40      	subs	r2, #64	; 0x40
 8000d72:	d2bd      	bcs.n	8000cf0 <memcpy+0x10>
 8000d74:	3230      	adds	r2, #48	; 0x30
 8000d76:	d311      	bcc.n	8000d9c <memcpy+0xbc>
 8000d78:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d7c:	f840 3b04 	str.w	r3, [r0], #4
 8000d80:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d84:	f840 3b04 	str.w	r3, [r0], #4
 8000d88:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d8c:	f840 3b04 	str.w	r3, [r0], #4
 8000d90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d94:	f840 3b04 	str.w	r3, [r0], #4
 8000d98:	3a10      	subs	r2, #16
 8000d9a:	d2ed      	bcs.n	8000d78 <memcpy+0x98>
 8000d9c:	320c      	adds	r2, #12
 8000d9e:	d305      	bcc.n	8000dac <memcpy+0xcc>
 8000da0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000da4:	f840 3b04 	str.w	r3, [r0], #4
 8000da8:	3a04      	subs	r2, #4
 8000daa:	d2f9      	bcs.n	8000da0 <memcpy+0xc0>
 8000dac:	3204      	adds	r2, #4
 8000dae:	d008      	beq.n	8000dc2 <memcpy+0xe2>
 8000db0:	07d2      	lsls	r2, r2, #31
 8000db2:	bf1c      	itt	ne
 8000db4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000db8:	f800 3b01 	strbne.w	r3, [r0], #1
 8000dbc:	d301      	bcc.n	8000dc2 <memcpy+0xe2>
 8000dbe:	880b      	ldrh	r3, [r1, #0]
 8000dc0:	8003      	strh	r3, [r0, #0]
 8000dc2:	4660      	mov	r0, ip
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2a08      	cmp	r2, #8
 8000dca:	d313      	bcc.n	8000df4 <memcpy+0x114>
 8000dcc:	078b      	lsls	r3, r1, #30
 8000dce:	d08d      	beq.n	8000cec <memcpy+0xc>
 8000dd0:	f010 0303 	ands.w	r3, r0, #3
 8000dd4:	d08a      	beq.n	8000cec <memcpy+0xc>
 8000dd6:	f1c3 0304 	rsb	r3, r3, #4
 8000dda:	1ad2      	subs	r2, r2, r3
 8000ddc:	07db      	lsls	r3, r3, #31
 8000dde:	bf1c      	itt	ne
 8000de0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000de4:	f800 3b01 	strbne.w	r3, [r0], #1
 8000de8:	d380      	bcc.n	8000cec <memcpy+0xc>
 8000dea:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000dee:	f820 3b02 	strh.w	r3, [r0], #2
 8000df2:	e77b      	b.n	8000cec <memcpy+0xc>
 8000df4:	3a04      	subs	r2, #4
 8000df6:	d3d9      	bcc.n	8000dac <memcpy+0xcc>
 8000df8:	3a01      	subs	r2, #1
 8000dfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dfe:	f800 3b01 	strb.w	r3, [r0], #1
 8000e02:	d2f9      	bcs.n	8000df8 <memcpy+0x118>
 8000e04:	780b      	ldrb	r3, [r1, #0]
 8000e06:	7003      	strb	r3, [r0, #0]
 8000e08:	784b      	ldrb	r3, [r1, #1]
 8000e0a:	7043      	strb	r3, [r0, #1]
 8000e0c:	788b      	ldrb	r3, [r1, #2]
 8000e0e:	7083      	strb	r3, [r0, #2]
 8000e10:	4660      	mov	r0, ip
 8000e12:	4770      	bx	lr
	...

08000e20 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
	...

08000e30 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
	...

08000e40 <__default_exit>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  }
 8000e40:	e7fe      	b.n	8000e40 <__default_exit>
 8000e42:	bf00      	nop
	...

08000e50 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000e50:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8000e52:	4e11      	ldr	r6, [pc, #68]	; (8000e98 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8000e54:	2500      	movs	r5, #0
 8000e56:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8000e5a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e5e:	42a3      	cmp	r3, r4
 8000e60:	d20d      	bcs.n	8000e7e <__init_ram_areas+0x2e>
 8000e62:	3904      	subs	r1, #4
 8000e64:	461a      	mov	r2, r3
      *p = *tp;
 8000e66:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8000e6a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000e6e:	42a2      	cmp	r2, r4
 8000e70:	d3f9      	bcc.n	8000e66 <__init_ram_areas+0x16>
 8000e72:	43da      	mvns	r2, r3
 8000e74:	4414      	add	r4, r2
 8000e76:	f024 0403 	bic.w	r4, r4, #3
 8000e7a:	3404      	adds	r4, #4
 8000e7c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e7e:	68f2      	ldr	r2, [r6, #12]
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d203      	bcs.n	8000e8c <__init_ram_areas+0x3c>
      *p = 0;
 8000e84:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d3fb      	bcc.n	8000e84 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8000e8c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8000e8e:	42be      	cmp	r6, r7
 8000e90:	d3e3      	bcc.n	8000e5a <__init_ram_areas+0xa>
#endif
}
 8000e92:	bcf0      	pop	{r4, r5, r6, r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	08007780 	.word	0x08007780
 8000e9c:	00000000 	.word	0x00000000

08000ea0 <_unhandled_exception>:
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void _unhandled_exception(void) {
/*lint -restore*/

  while (true) {
  }
 8000ea0:	e7fe      	b.n	8000ea0 <_unhandled_exception>
 8000ea2:	bf00      	nop
	...

08000eb0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8000eb0:	e7fe      	b.n	8000eb0 <_idle_thread>
 8000eb2:	bf00      	nop
	...

08000ec0 <chSysInit>:
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ec0:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <chSysInit+0x84>)
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000ec2:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <chSysInit+0x88>)
  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ec4:	4821      	ldr	r0, [pc, #132]	; (8000f4c <chSysInit+0x8c>)
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 * @brief   Port-related initialization code.
 */
static inline void port_init(void) {

  /* Initialization of the vector table and priority related settings.*/
  SCB->VTOR = CORTEX_VTOR_INIT;
 8000ec8:	2400      	movs	r4, #0
 8000eca:	609c      	str	r4, [r3, #8]
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	68df      	ldr	r7, [r3, #12]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000ece:	4e20      	ldr	r6, [pc, #128]	; (8000f50 <chSysInit+0x90>)
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000ed0:	4d20      	ldr	r5, [pc, #128]	; (8000f54 <chSysInit+0x94>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk));             /* clear bits to change               */
 8000ed2:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000ed6:	4039      	ands	r1, r7
  reg_value  =  (reg_value                                   |
 8000ed8:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8)                       );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000eda:	60da      	str	r2, [r3, #12]
 8000edc:	68f2      	ldr	r2, [r6, #12]
 8000ede:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ee2:	60f2      	str	r2, [r6, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000ee4:	6802      	ldr	r2, [r0, #0]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if((int32_t)IRQn < 0) {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	f042 0201 	orr.w	r2, r2, #1
 8000eec:	2610      	movs	r6, #16
 8000eee:	6002      	str	r2, [r0, #0]
 * @post    The main thread is created with priority @p NORMALPRIO and
 *          interrupts are enabled.
 *
 * @special
 */
void chSysInit(void) {
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	77de      	strb	r6, [r3, #31]
 8000ef4:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  extern stkalign_t __main_thread_stack_base__;
#endif

  port_init();
  _scheduler_init();
 8000ef8:	f000 f902 	bl	8001100 <_scheduler_init>
  _vt_init();
 8000efc:	f000 f880 	bl	8001000 <_vt_init>
#if CH_CFG_USE_TM == TRUE
  _tm_init();
 8000f00:	f000 fb86 	bl	8001610 <_tm_init>
#endif
#if CH_CFG_USE_MEMCORE == TRUE
  _core_init();
 8000f04:	f000 fcf4 	bl	80018f0 <_core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  _heap_init();
 8000f08:	f000 fd2a 	bl	8001960 <_heap_init>
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	2140      	movs	r1, #64	; 0x40
 8000f10:	f000 fa06 	bl	8001320 <_thread_init>
 8000f14:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000f18:	2201      	movs	r2, #1
  _dbg_trace_init();
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
  setcurrp(_thread_init(&ch.mainthread, NORMALPRIO));
 8000f1a:	6198      	str	r0, [r3, #24]
#else
  /* Now this instructions flow becomes the idle thread.*/
  setcurrp(_thread_init(&ch.mainthread, IDLEPRIO));
#endif

  currp->p_state = CH_STATE_CURRENT;
 8000f1c:	7702      	strb	r2, [r0, #28]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000f1e:	f384 8811 	msr	BASEPRI, r4
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000f22:	b662      	cpsie	i
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	490c      	ldr	r1, [pc, #48]	; (8000f58 <chSysInit+0x98>)
 8000f28:	6199      	str	r1, [r3, #24]
#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
  /* This thread has the lowest priority in the system, its role is just to
     serve interrupts in its context while keeping the lowest energy saving
     mode compatible with the system status.*/
    thread_t *tp =  chThdCreateStatic(ch.idle_thread_wa,
 8000f2a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8000f2e:	9400      	str	r4, [sp, #0]
 8000f30:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <chSysInit+0x9c>)
 8000f36:	f000 fa53 	bl	80013e0 <chThdCreateStatic>
 * @xclass
 */
static inline void chRegSetThreadNameX(thread_t *tp, const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = name;
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <chSysInit+0xa0>)
 8000f3c:	6183      	str	r3, [r0, #24]
                                      (tfunc_t)_idle_thread,
                                      NULL);
    chRegSetThreadNameX(tp, "idle");
  }
#endif
}
 8000f3e:	b003      	add	sp, #12
 8000f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00
 8000f48:	05fa0300 	.word	0x05fa0300
 8000f4c:	e0001000 	.word	0xe0001000
 8000f50:	e000edf0 	.word	0xe000edf0
 8000f54:	20000ca0 	.word	0x20000ca0
 8000f58:	08007810 	.word	0x08007810
 8000f5c:	08000eb1 	.word	0x08000eb1
 8000f60:	08007800 	.word	0x08007800
	...

08000f70 <chSysHalt>:
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
#if defined(CH_CFG_SYSTEM_HALT_HOOK) || defined(__DOXYGEN__)
  CH_CFG_SYSTEM_HALT_HOOK(reason);
#endif

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8000f72:	4b01      	ldr	r3, [pc, #4]	; (8000f78 <chSysHalt+0x8>)
 8000f74:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Harmless infinite loop.*/
  while (true) {
  }
 8000f76:	e7fe      	b.n	8000f76 <chSysHalt+0x6>
 8000f78:	20000c70 	.word	0x20000c70
 8000f7c:	00000000 	.word	0x00000000

08000f80 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  chDbgCheckClassI();

#if CH_CFG_TIME_QUANTUM > 0
  /* Running thread has not used up quantum yet? */
  if (currp->p_preempt > (tslices_t)0) {
 8000f82:	4d13      	ldr	r5, [pc, #76]	; (8000fd0 <chSysTimerHandlerI+0x50>)
 8000f84:	69aa      	ldr	r2, [r5, #24]
 8000f86:	7fd3      	ldrb	r3, [r2, #31]
 8000f88:	b10b      	cbz	r3, 8000f8e <chSysTimerHandlerI+0xe>
    /* Decrement remaining quantum.*/
    currp->p_preempt--;
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	77d3      	strb	r3, [r2, #31]
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currp->p_time++;
 8000f8e:	6a11      	ldr	r1, [r2, #32]

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f90:	69eb      	ldr	r3, [r5, #28]
 8000f92:	4e10      	ldr	r6, [pc, #64]	; (8000fd4 <chSysTimerHandlerI+0x54>)
 8000f94:	3101      	adds	r1, #1
 8000f96:	6211      	str	r1, [r2, #32]
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000f98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000f9a:	42b3      	cmp	r3, r6
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
 8000f9c:	f102 0201 	add.w	r2, r2, #1
 8000fa0:	62aa      	str	r2, [r5, #40]	; 0x28
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
 8000fa2:	d013      	beq.n	8000fcc <chSysTimerHandlerI+0x4c>
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
 8000fa4:	689c      	ldr	r4, [r3, #8]
 8000fa6:	3c01      	subs	r4, #1
 8000fa8:	609c      	str	r4, [r3, #8]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000faa:	b97c      	cbnz	r4, 8000fcc <chSysTimerHandlerI+0x4c>

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000fac:	2720      	movs	r7, #32
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
      vtp->vt_func = NULL;
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fae:	681a      	ldr	r2, [r3, #0]
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
      virtual_timer_t *vtp;
      vtfunc_t fn;

      vtp = ch.vtlist.vt_next;
      fn = vtp->vt_func;
 8000fb0:	68d9      	ldr	r1, [r3, #12]
      vtp->vt_func = NULL;
 8000fb2:	60dc      	str	r4, [r3, #12]
      vtp->vt_next->vt_prev = (virtual_timer_t *)&ch.vtlist;
 8000fb4:	6056      	str	r6, [r2, #4]
      ch.vtlist.vt_next = vtp->vt_next;
 8000fb6:	61ea      	str	r2, [r5, #28]
 8000fb8:	f384 8811 	msr	BASEPRI, r4
      chSysUnlockFromISR();
      fn(vtp->vt_par);
 8000fbc:	6918      	ldr	r0, [r3, #16]
 8000fbe:	4788      	blx	r1
 8000fc0:	f387 8811 	msr	BASEPRI, r7
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime++;
  if (&ch.vtlist != (virtual_timers_list_t *)ch.vtlist.vt_next) {
    /* The list is not empty, processing elements on top.*/
    --ch.vtlist.vt_next->vt_delta;
    while (ch.vtlist.vt_next->vt_delta == (systime_t)0) {
 8000fc4:	69eb      	ldr	r3, [r5, #28]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d0f0      	beq.n	8000fae <chSysTimerHandlerI+0x2e>
 8000fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000c70 	.word	0x20000c70
 8000fd4:	20000c8c 	.word	0x20000c8c
	...

08000fe0 <chSysPolledDelayX>:
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000fe0:	4a03      	ldr	r2, [pc, #12]	; (8000ff0 <chSysPolledDelayX+0x10>)
 8000fe2:	6851      	ldr	r1, [r2, #4]
 8000fe4:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 8000fe6:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 8000fe8:	4298      	cmp	r0, r3
 8000fea:	d8fb      	bhi.n	8000fe4 <chSysPolledDelayX+0x4>
  }
}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e0001000 	.word	0xe0001000
	...

08001000 <_vt_init>:
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <_vt_init+0x18>)
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 8001002:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001006:	f103 021c 	add.w	r2, r3, #28
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800100a:	2100      	movs	r1, #0
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.vt_delta = (systime_t)-1;
 800100c:	6258      	str	r0, [r3, #36]	; 0x24
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.vt_systime = (systime_t)0;
 800100e:	6299      	str	r1, [r3, #40]	; 0x28
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.vt_next = (virtual_timer_t *)&ch.vtlist;
 8001010:	61da      	str	r2, [r3, #28]
  ch.vtlist.vt_prev = (virtual_timer_t *)&ch.vtlist;
 8001012:	621a      	str	r2, [r3, #32]
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000c70 	.word	0x20000c70
 800101c:	00000000 	.word	0x00000000

08001020 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, systime_t delay,
                vtfunc_t vtfunc, void *par) {
 8001020:	b470      	push	{r4, r5, r6}
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
 8001022:	4e0d      	ldr	r6, [pc, #52]	; (8001058 <chVTDoSetI+0x38>)
 8001024:	69f4      	ldr	r4, [r6, #28]
  while (p->vt_delta < delta) {
 8001026:	68a5      	ldr	r5, [r4, #8]
  systime_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
 8001028:	6103      	str	r3, [r0, #16]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800102a:	42a9      	cmp	r1, r5

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->vt_par = par;
  vtp->vt_func = vtfunc;
 800102c:	60c2      	str	r2, [r0, #12]
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 800102e:	d904      	bls.n	800103a <chVTDoSetI+0x1a>
    delta -= p->vt_delta;
    p = p->vt_next;
 8001030:	6824      	ldr	r4, [r4, #0]

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
    delta -= p->vt_delta;
 8001032:	1b49      	subs	r1, r1, r5
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  p = ch.vtlist.vt_next;
  while (p->vt_delta < delta) {
 8001034:	68a5      	ldr	r5, [r4, #8]
 8001036:	428d      	cmp	r5, r1
 8001038:	d3fa      	bcc.n	8001030 <chVTDoSetI+0x10>
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
  vtp->vt_prev = vtp->vt_next->vt_prev;
 800103a:	6863      	ldr	r3, [r4, #4]
 800103c:	6043      	str	r3, [r0, #4]
    delta -= p->vt_delta;
    p = p->vt_next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->vt_next = p;
 800103e:	6004      	str	r4, [r0, #0]
  vtp->vt_prev = vtp->vt_next->vt_prev;
  vtp->vt_prev->vt_next = vtp;
 8001040:	6018      	str	r0, [r3, #0]
  p->vt_prev = vtp;
 8001042:	6060      	str	r0, [r4, #4]
  vtp->vt_delta = delta
 8001044:	6081      	str	r1, [r0, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 8001046:	68a3      	ldr	r3, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  p->vt_prev = vtp;
  vtp->vt_delta = delta

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/;
  p->vt_delta -= delta;
 800104c:	1a59      	subs	r1, r3, r1
 800104e:	60a1      	str	r1, [r4, #8]
  ch.vtlist.vt_delta = (systime_t)-1;
 8001050:	6272      	str	r2, [r6, #36]	; 0x24
}
 8001052:	bc70      	pop	{r4, r5, r6}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	20000c70 	.word	0x20000c70
 800105c:	00000000 	.word	0x00000000

08001060 <chVTDoResetI>:
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001060:	6803      	ldr	r3, [r0, #0]
 8001062:	6882      	ldr	r2, [r0, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001064:	6841      	ldr	r1, [r0, #4]
 *
 * @param[in] vtp       the @p virtual_timer_t structure pointer
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
 8001066:	b430      	push	{r4, r5}
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 8001068:	689d      	ldr	r5, [r3, #8]
  vtp->vt_next->vt_prev = vtp->vt_prev;
  vtp->vt_func = NULL;

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800106a:	4c06      	ldr	r4, [pc, #24]	; (8001084 <chVTDoResetI+0x24>)
  chDbgAssert(vtp->vt_func != NULL, "timer not set or already triggered");

#if CH_CFG_ST_TIMEDELTA == 0

  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;
 800106c:	442a      	add	r2, r5
 800106e:	609a      	str	r2, [r3, #8]

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
 8001070:	600b      	str	r3, [r1, #0]
  vtp->vt_next->vt_prev = vtp->vt_prev;
 8001072:	6805      	ldr	r5, [r0, #0]
  vtp->vt_func = NULL;
 8001074:	2200      	movs	r2, #0

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  /* The delta of the timer is added to the next timer.*/
  vtp->vt_next->vt_delta += vtp->vt_delta;

 /* Removing the element from the delta list.*/
  vtp->vt_prev->vt_next = vtp->vt_next;
  vtp->vt_next->vt_prev = vtp->vt_prev;
 800107a:	6069      	str	r1, [r5, #4]
  vtp->vt_func = NULL;
 800107c:	60c2      	str	r2, [r0, #12]

  /* The above code changes the value in the header when the removed element
     is the last of the list, restoring it.*/
  ch.vtlist.vt_delta = (systime_t)-1;
 800107e:	6263      	str	r3, [r4, #36]	; 0x24
    delta = (systime_t)CH_CFG_ST_TIMEDELTA;
  }

  port_timer_set_alarm(ch.vtlist.vt_lasttime + nowdelta + delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
 8001080:	bc30      	pop	{r4, r5}
 8001082:	4770      	bx	lr
 8001084:	20000c70 	.word	0x20000c70
	...

08001090 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8001090:	b410      	push	{r4}
 8001092:	2320      	movs	r3, #32
 8001094:	f383 8811 	msr	BASEPRI, r3
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->p_state) {
 8001098:	7f03      	ldrb	r3, [r0, #28]
 800109a:	2b07      	cmp	r3, #7
 800109c:	d80e      	bhi.n	80010bc <wakeup+0x2c>
 800109e:	e8df f003 	tbb	[pc, r3]
 80010a2:	0d27      	.short	0x0d27
 80010a4:	0408230d 	.word	0x0408230d
 80010a8:	080d      	.short	0x080d
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->p_u.wtsemp);
 80010aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->s_cnt++;
 80010ac:	6893      	ldr	r3, [r2, #8]
 80010ae:	3301      	adds	r3, #1
 80010b0:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80010b2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80010b6:	601a      	str	r2, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80010b8:	6802      	ldr	r2, [r0, #0]
 80010ba:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80010bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010c0:	2200      	movs	r2, #0
 80010c2:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <wakeup+0x6c>)
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
 80010c6:	6244      	str	r4, [r0, #36]	; 0x24
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80010c8:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80010ca:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	428a      	cmp	r2, r1
 80010d0:	d2fb      	bcs.n	80010ca <wakeup+0x3a>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	6042      	str	r2, [r0, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80010d6:	6003      	str	r3, [r0, #0]
 80010d8:	2100      	movs	r1, #0
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80010da:	6010      	str	r0, [r2, #0]
  cp->p_prev = tp;
 80010dc:	6058      	str	r0, [r3, #4]
 80010de:	f381 8811 	msr	BASEPRI, r1
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80010e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010e6:	4770      	bx	lr
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->p_u.wttrp = NULL;
 80010e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
    break;
 80010ee:	e7e5      	b.n	80010bc <wakeup+0x2c>
 80010f0:	2300      	movs	r3, #0
 80010f2:	f383 8811 	msr	BASEPRI, r3
    break;
  }
  tp->p_u.rdymsg = MSG_TIMEOUT;
  (void) chSchReadyI(tp);
  chSysUnlockFromISR();
}
 80010f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	20000c70 	.word	0x20000c70

08001100 <_scheduler_init>:
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001100:	4b03      	ldr	r3, [pc, #12]	; (8001110 <_scheduler_init+0x10>)
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 8001102:	2200      	movs	r2, #0
 8001104:	601b      	str	r3, [r3, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001106:	605b      	str	r3, [r3, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_newer = (thread_t *)&ch.rlist;
 8001108:	611b      	str	r3, [r3, #16]
  ch.rlist.r_older = (thread_t *)&ch.rlist;
 800110a:	615b      	str	r3, [r3, #20]
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.r_queue);
  ch.rlist.r_prio = NOPRIO;
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	4770      	bx	lr
 8001110:	20000c70 	.word	0x20000c70
	...

08001120 <chSchReadyI>:
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001120:	2200      	movs	r2, #0
 8001122:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <chSchReadyI+0x28>)
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8001126:	b410      	push	{r4}
 8001128:	4604      	mov	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800112a:	7702      	strb	r2, [r0, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 800112c:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	428a      	cmp	r2, r1
 8001132:	d2fb      	bcs.n	800112c <chSchReadyI+0xc>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001138:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
  cp->p_prev = tp;

  return tp;
}
 800113a:	4620      	mov	r0, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800113c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800113e:	605c      	str	r4, [r3, #4]

  return tp;
}
 8001140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000c70 	.word	0x20000c70
 800114c:	00000000 	.word	0x00000000

08001150 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001150:	4b08      	ldr	r3, [pc, #32]	; (8001174 <chSchGoSleepS+0x24>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8001152:	b430      	push	{r4, r5}
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001154:	681a      	ldr	r2, [r3, #0]
  thread_t *otp;

  chDbgCheckClassS();

  otp = currp;
 8001156:	6999      	ldr	r1, [r3, #24]

  tqp->p_next = tp->p_next;
 8001158:	6814      	ldr	r4, [r2, #0]
  otp->p_state = newstate;
 800115a:	7708      	strb	r0, [r1, #28]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800115c:	2501      	movs	r5, #1
  otp = currp;
  otp->p_state = newstate;
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800115e:	2004      	movs	r0, #4
 8001160:	77c8      	strb	r0, [r1, #31]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001162:	6063      	str	r3, [r4, #4]
#if defined(CH_CFG_IDLE_ENTER_HOOK)
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001164:	7715      	strb	r5, [r2, #28]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001166:	601c      	str	r4, [r3, #0]
  chSysSwitch(currp, otp);
 8001168:	4610      	mov	r0, r2
}
 800116a:	bc30      	pop	{r4, r5}
#if CH_CFG_TIME_QUANTUM > 0
  /* The thread is renouncing its remaining time slices so it will have a new
     time quantum when it will wakeup.*/
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 800116c:	619a      	str	r2, [r3, #24]
  if (currp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
  chSysSwitch(currp, otp);
 800116e:	f7ff b8af 	b.w	80002d0 <_port_switch>
 8001172:	bf00      	nop
 8001174:	20000c70 	.word	0x20000c70
	...

08001180 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001180:	b530      	push	{r4, r5, lr}

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001182:	1c4b      	adds	r3, r1, #1
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, systime_t time) {
 8001184:	b087      	sub	sp, #28

  chDbgCheckClassS();

  if (TIME_INFINITE != time) {
 8001186:	d012      	beq.n	80011ae <chSchGoSleepTimeoutS+0x2e>
    virtual_timer_t vt;

    chVTDoSetI(&vt, time, wakeup, currp);
 8001188:	4c0c      	ldr	r4, [pc, #48]	; (80011bc <chSchGoSleepTimeoutS+0x3c>)
 800118a:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <chSchGoSleepTimeoutS+0x40>)
 800118c:	69a3      	ldr	r3, [r4, #24]
 800118e:	4605      	mov	r5, r0
 8001190:	a801      	add	r0, sp, #4
 8001192:	f7ff ff45 	bl	8001020 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8001196:	4628      	mov	r0, r5
 8001198:	f7ff ffda 	bl	8001150 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800119c:	9b04      	ldr	r3, [sp, #16]
 800119e:	b113      	cbz	r3, 80011a6 <chSchGoSleepTimeoutS+0x26>
      chVTDoResetI(&vt);
 80011a0:	a801      	add	r0, sp, #4
 80011a2:	f7ff ff5d 	bl	8001060 <chVTDoResetI>
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->p_u.rdymsg;
 80011a6:	69a3      	ldr	r3, [r4, #24]
}
 80011a8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011aa:	b007      	add	sp, #28
 80011ac:	bd30      	pop	{r4, r5, pc}
 80011ae:	4c03      	ldr	r4, [pc, #12]	; (80011bc <chSchGoSleepTimeoutS+0x3c>)
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80011b0:	f7ff ffce 	bl	8001150 <chSchGoSleepS>
  }

  return currp->p_u.rdymsg;
 80011b4:	69a3      	ldr	r3, [r4, #24]
}
 80011b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80011b8:	b007      	add	sp, #28
 80011ba:	bd30      	pop	{r4, r5, pc}
 80011bc:	20000c70 	.word	0x20000c70
 80011c0:	08001091 	.word	0x08001091
	...

080011d0 <chSchWakeupS>:

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <chSchWakeupS+0x54>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011d2:	b470      	push	{r4, r5, r6}

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011d4:	699e      	ldr	r6, [r3, #24]
 80011d6:	6884      	ldr	r4, [r0, #8]
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011d8:	4605      	mov	r5, r0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011da:	68b0      	ldr	r0, [r6, #8]
              (ch.rlist.r_current->p_prio >= ch.rlist.r_queue.p_next->p_prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->p_u.rdymsg = msg;
 80011dc:	6269      	str	r1, [r5, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011de:	4284      	cmp	r4, r0
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011e0:	f04f 0200 	mov.w	r2, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->p_prio <= currp->p_prio) {
 80011e4:	d80b      	bhi.n	80011fe <chSchWakeupS+0x2e>
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011e6:	772a      	strb	r2, [r5, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
 80011e8:	681b      	ldr	r3, [r3, #0]
  } while (cp->p_prio >= tp->p_prio);
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	4294      	cmp	r4, r2
 80011ee:	d9fb      	bls.n	80011e8 <chSchWakeupS+0x18>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	606a      	str	r2, [r5, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 80011f4:	602b      	str	r3, [r5, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80011f6:	6015      	str	r5, [r2, #0]
  cp->p_prev = tp;
 80011f8:	605d      	str	r5, [r3, #4]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 80011fa:	bc70      	pop	{r4, r5, r6}
 80011fc:	4770      	bx	lr
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 80011fe:	7732      	strb	r2, [r6, #28]
  cp = (thread_t *)&ch.rlist.r_queue;
 8001200:	461a      	mov	r2, r3
  do {
    cp = cp->p_next;
 8001202:	6812      	ldr	r2, [r2, #0]
  } while (cp->p_prio >= tp->p_prio);
 8001204:	6891      	ldr	r1, [r2, #8]
 8001206:	4288      	cmp	r0, r1
 8001208:	d9fb      	bls.n	8001202 <chSchWakeupS+0x32>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 800120a:	6850      	ldr	r0, [r2, #4]
 800120c:	6070      	str	r0, [r6, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 800120e:	2401      	movs	r4, #1
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 8001210:	6032      	str	r2, [r6, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001212:	6006      	str	r6, [r0, #0]
  cp->p_prev = tp;
 8001214:	6056      	str	r6, [r2, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
 8001216:	772c      	strb	r4, [r5, #28]
    chSysSwitch(ntp, otp);
 8001218:	4631      	mov	r1, r6
 800121a:	4628      	mov	r0, r5
  if (ntp->p_prio <= currp->p_prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    thread_t *otp = chSchReadyI(currp);
    setcurrp(ntp);
 800121c:	619d      	str	r5, [r3, #24]
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
  }
}
 800121e:	bc70      	pop	{r4, r5, r6}
    if (otp->p_prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }
#endif
    ntp->p_state = CH_STATE_CURRENT;
    chSysSwitch(ntp, otp);
 8001220:	f7ff b856 	b.w	80002d0 <_port_switch>
 8001224:	20000c70 	.word	0x20000c70
	...

08001230 <chSchIsPreemptionRequired>:
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <chSchIsPreemptionRequired+0x24>)
  tprio_t p2 = currp->p_prio;
 8001232:	699a      	ldr	r2, [r3, #24]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001234:	681b      	ldr	r3, [r3, #0]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001236:	7fd1      	ldrb	r1, [r2, #31]
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.r_queue);
 8001238:	689b      	ldr	r3, [r3, #8]
  tprio_t p2 = currp->p_prio;
 800123a:	6890      	ldr	r0, [r2, #8]
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 800123c:	b921      	cbnz	r1, 8001248 <chSchIsPreemptionRequired+0x18>
 800123e:	4283      	cmp	r3, r0
 8001240:	bf34      	ite	cc
 8001242:	2000      	movcc	r0, #0
 8001244:	2001      	movcs	r0, #1
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
#endif
}
 8001246:	4770      	bx	lr
#if CH_CFG_TIME_QUANTUM > 0
  /* If the running thread has not reached its time quantum, reschedule only
     if the first thread on the ready queue has a higher priority.
     Otherwise, if the running thread has used up its time quantum, reschedule
     if the first thread on the ready queue has equal or higher priority.*/
  return (currp->p_preempt > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 8001248:	4283      	cmp	r3, r0
 800124a:	bf94      	ite	ls
 800124c:	2000      	movls	r0, #0
 800124e:	2001      	movhi	r0, #1
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000c70 	.word	0x20000c70
	...

08001260 <chSchDoRescheduleBehind>:
 * @special
 */
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <chSchDoRescheduleBehind+0x3c>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 8001262:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleBehind(void) {
 8001264:	b4f0      	push	{r4, r5, r6, r7}

  tqp->p_next = tp->p_next;
 8001266:	6803      	ldr	r3, [r0, #0]
  thread_t *otp;

  otp = currp;
 8001268:	6994      	ldr	r4, [r2, #24]
 800126a:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 800126c:	2701      	movs	r7, #1
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800126e:	2604      	movs	r6, #4
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 8001270:	2500      	movs	r5, #0
 8001272:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001274:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 8001276:	7707      	strb	r7, [r0, #28]
void chSchDoRescheduleBehind(void) {
  thread_t *otp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 8001278:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800127a:	77e6      	strb	r6, [r4, #31]
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->p_state != CH_STATE_READY) &&
              (tp->p_state != CH_STATE_FINAL),
              "invalid state");

  tp->p_state = CH_STATE_READY;
 800127c:	7725      	strb	r5, [r4, #28]
 800127e:	e000      	b.n	8001282 <chSchDoRescheduleBehind+0x22>
 8001280:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	428a      	cmp	r2, r1
 8001286:	d2fb      	bcs.n	8001280 <chSchDoRescheduleBehind+0x20>
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
 800128c:	6023      	str	r3, [r4, #0]
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 800128e:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio >= tp->p_prio);
  /* Insertion on p_prev.*/
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001290:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 8001292:	605c      	str	r4, [r3, #4]
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
}
 8001294:	bcf0      	pop	{r4, r5, r6, r7}
  currp->p_state = CH_STATE_CURRENT;
#if CH_CFG_TIME_QUANTUM > 0
  otp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
  (void) chSchReadyI(otp);
  chSysSwitch(currp, otp);
 8001296:	f7ff b81b 	b.w	80002d0 <_port_switch>
 800129a:	bf00      	nop
 800129c:	20000c70 	.word	0x20000c70

080012a0 <chSchDoRescheduleAhead>:
 * @special
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <chSchDoRescheduleAhead+0x38>)
  tp->p_prev->p_next = tp;
  tqp->p_prev = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;
 80012a2:	6810      	ldr	r0, [r2, #0]
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoRescheduleAhead(void) {
 80012a4:	b470      	push	{r4, r5, r6}

  tqp->p_next = tp->p_next;
 80012a6:	6803      	ldr	r3, [r0, #0]
  thread_t *otp, *cp;

  otp = currp;
 80012a8:	6994      	ldr	r4, [r2, #24]
 80012aa:	6013      	str	r3, [r2, #0]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80012ac:	2601      	movs	r6, #1

  otp->p_state = CH_STATE_READY;
 80012ae:	2500      	movs	r5, #0
 80012b0:	68a1      	ldr	r1, [r4, #8]
  tqp->p_next->p_prev = (thread_t *)tqp;
 80012b2:	605a      	str	r2, [r3, #4]
#if defined(CH_CFG_IDLE_LEAVE_HOOK)
  if (otp->p_prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;
 80012b4:	7706      	strb	r6, [r0, #28]
void chSchDoRescheduleAhead(void) {
  thread_t *otp, *cp;

  otp = currp;
  /* Picks the first thread from the ready queue and makes it current.*/
  setcurrp(queue_fifo_remove(&ch.rlist.r_queue));
 80012b6:	6190      	str	r0, [r2, #24]
    CH_CFG_IDLE_LEAVE_HOOK();
  }
#endif
  currp->p_state = CH_STATE_CURRENT;

  otp->p_state = CH_STATE_READY;
 80012b8:	7725      	strb	r5, [r4, #28]
 80012ba:	e000      	b.n	80012be <chSchDoRescheduleAhead+0x1e>
 80012bc:	681b      	ldr	r3, [r3, #0]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	428a      	cmp	r2, r1
 80012c2:	d8fb      	bhi.n	80012bc <chSchDoRescheduleAhead+0x1c>
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.r_queue;
  do {
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
 80012c8:	6023      	str	r3, [r4, #0]
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012ca:	4621      	mov	r1, r4
    cp = cp->p_next;
  } while (cp->p_prio > otp->p_prio);
  /* Insertion on p_prev.*/
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
 80012cc:	6014      	str	r4, [r2, #0]
  cp->p_prev = otp;
 80012ce:	605c      	str	r4, [r3, #4]

  chSysSwitch(currp, otp);
}
 80012d0:	bc70      	pop	{r4, r5, r6}
  otp->p_next = cp;
  otp->p_prev = cp->p_prev;
  otp->p_prev->p_next = otp;
  cp->p_prev = otp;

  chSysSwitch(currp, otp);
 80012d2:	f7fe bffd 	b.w	80002d0 <_port_switch>
 80012d6:	bf00      	nop
 80012d8:	20000c70 	.word	0x20000c70
 80012dc:	00000000 	.word	0x00000000

080012e0 <chSchRescheduleS>:
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.r_queue) > currp->p_prio;
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <chSchRescheduleS+0x14>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	699b      	ldr	r3, [r3, #24]
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
 80012e6:	6892      	ldr	r2, [r2, #8]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d800      	bhi.n	80012f0 <chSchRescheduleS+0x10>
 80012ee:	4770      	bx	lr
    chSchDoRescheduleAhead();
 80012f0:	f7ff bfd6 	b.w	80012a0 <chSchDoRescheduleAhead>
 80012f4:	20000c70 	.word	0x20000c70
	...

08001300 <chSchDoReschedule>:
void chSchDoReschedule(void) {

#if CH_CFG_TIME_QUANTUM > 0
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
 8001300:	4b03      	ldr	r3, [pc, #12]	; (8001310 <chSchDoReschedule+0x10>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	7fdb      	ldrb	r3, [r3, #31]
 8001306:	b10b      	cbz	r3, 800130c <chSchDoReschedule+0xc>
    chSchDoRescheduleBehind();
  }
  else {
    /* The thread didn't consume all its time quantum so it is put ahead of
       threads with equal priority and does not acquire a new time quantum.*/
    chSchDoRescheduleAhead();
 8001308:	f7ff bfca 	b.w	80012a0 <chSchDoRescheduleAhead>
  /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
     to handle on preemption: time quantum elapsed or not.*/
  if (currp->p_preempt == (tslices_t)0) {
    /* The thread consumed its time quantum so it is enqueued behind threads
       with same priority level, however, it acquires a new time quantum.*/
    chSchDoRescheduleBehind();
 800130c:	f7ff bfa8 	b.w	8001260 <chSchDoRescheduleBehind>
 8001310:	20000c70 	.word	0x20000c70
	...

08001320 <_thread_init>:
 * @param[in] prio      the priority level for the new thread
 * @return              The same thread pointer passed as parameter.
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {
 8001320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001324:	4c11      	ldr	r4, [pc, #68]	; (800136c <_thread_init+0x4c>)
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001326:	6401      	str	r1, [r0, #64]	; 0x40
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001328:	6966      	ldr	r6, [r4, #20]
 800132a:	6146      	str	r6, [r0, #20]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800132c:	2200      	movs	r2, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 800132e:	f100 052c 	add.w	r5, r0, #44	; 0x2c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001332:	f04f 0802 	mov.w	r8, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001336:	f04f 0c04 	mov.w	ip, #4
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800133a:	f04f 0e01 	mov.w	lr, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800133e:	f100 0728 	add.w	r7, r0, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 8001342:	6081      	str	r1, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001344:	6104      	str	r4, [r0, #16]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001346:	f880 801c 	strb.w	r8, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800134a:	f880 c01f 	strb.w	ip, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800134e:	f880 e01e 	strb.w	lr, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001352:	7742      	strb	r2, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001354:	63c2      	str	r2, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001356:	6382      	str	r2, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 8001358:	6202      	str	r2, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 800135a:	6182      	str	r2, [r0, #24]
  REG_INSERT(tp);
 800135c:	6130      	str	r0, [r6, #16]
 800135e:	6160      	str	r0, [r4, #20]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 8001360:	6287      	str	r7, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001362:	62c5      	str	r5, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8001364:	6305      	str	r5, [r0, #48]	; 0x30
#endif
#if defined(CH_CFG_THREAD_INIT_HOOK)
  CH_CFG_THREAD_INIT_HOOK(tp);
#endif
  return tp;
}
 8001366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800136a:	bf00      	nop
 800136c:	20000c70 	.word	0x20000c70

08001370 <chThdCreateI>:
 *                      the thread into the working space area.
 *
 * @iclass
 */
thread_t *chThdCreateI(void *wsp, size_t size,
                       tprio_t prio, tfunc_t pf, void *arg) {
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001374:	3964      	subs	r1, #100	; 0x64
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 8001376:	4f18      	ldr	r7, [pc, #96]	; (80013d8 <chThdCreateI+0x68>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001378:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80013dc <chThdCreateI+0x6c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800137c:	f8d7 e014 	ldr.w	lr, [r7, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001382:	4401      	add	r1, r0
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 8001384:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001386:	60c1      	str	r1, [r0, #12]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001388:	f04f 0b02 	mov.w	fp, #2

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800138c:	640b      	str	r3, [r1, #64]	; 0x40

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 800138e:	f04f 0a04 	mov.w	sl, #4
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 8001392:	f100 032c 	add.w	r3, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001396:	f04f 0801 	mov.w	r8, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 800139a:	f100 0c28 	add.w	ip, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800139e:	644e      	str	r6, [r1, #68]	; 0x44
 80013a0:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 80013a4:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013a6:	6107      	str	r7, [r0, #16]
 80013a8:	f8c0 e014 	str.w	lr, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 80013ac:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 80013ae:	f880 b01c 	strb.w	fp, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 80013b2:	f880 a01f 	strb.w	sl, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 80013b6:	f880 801e 	strb.w	r8, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013ba:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 80013bc:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 80013be:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 80013c0:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 80013c2:	6185      	str	r5, [r0, #24]
  REG_INSERT(tp);
 80013c4:	f8ce 0010 	str.w	r0, [lr, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 80013c8:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
 80013cc:	6178      	str	r0, [r7, #20]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 80013ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 80013d0:	6303      	str	r3, [r0, #48]	; 0x30
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);

  return _thread_init(tp, prio);
}
 80013d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013d6:	bf00      	nop
 80013d8:	20000c70 	.word	0x20000c70
 80013dc:	080002e9 	.word	0x080002e9

080013e0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
                            tprio_t prio, tfunc_t pf, void *arg) {
 80013e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e4:	4604      	mov	r4, r0
 80013e6:	2520      	movs	r5, #32
 80013e8:	f385 8811 	msr	BASEPRI, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013ec:	4e1a      	ldr	r6, [pc, #104]	; (8001458 <chThdCreateStatic+0x78>)

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013ee:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800145c <chThdCreateStatic+0x7c>
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 80013f2:	6977      	ldr	r7, [r6, #20]

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013f4:	3964      	subs	r1, #100	; 0x64
 80013f6:	4401      	add	r1, r0
 80013f8:	60c1      	str	r1, [r0, #12]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 80013fa:	2500      	movs	r5, #0

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 80013fc:	640b      	str	r3, [r1, #64]	; 0x40
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->p_msgqueue);
 80013fe:	f100 0b2c 	add.w	fp, r0, #44	; 0x2c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 8001402:	f04f 0c01 	mov.w	ip, #1
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->p_waiting);
 8001406:	f100 0e28 	add.w	lr, r0, #40	; 0x28

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 800140a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800140c:	644b      	str	r3, [r1, #68]	; 0x44
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 800140e:	f04f 0902 	mov.w	r9, #2
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001412:	f04f 0804 	mov.w	r8, #4

  chDbgCheckClassI();
  chDbgCheck((wsp != NULL) && (size >= THD_WORKING_AREA_SIZE(0)) &&
             (prio <= HIGHPRIO) && (pf != NULL));

  PORT_SETUP_CONTEXT(tp, wsp, size, pf, arg);
 8001416:	f8c1 a060 	str.w	sl, [r1, #96]	; 0x60
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
 800141a:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800141c:	6106      	str	r6, [r0, #16]
 800141e:	6147      	str	r7, [r0, #20]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
 8001420:	6402      	str	r2, [r0, #64]	; 0x40
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
 8001422:	f880 901c 	strb.w	r9, [r0, #28]
  tp->p_flags = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
 8001426:	f880 801f 	strb.w	r8, [r0, #31]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
 800142a:	f880 c01e 	strb.w	ip, [r0, #30]
 */
thread_t *_thread_init(thread_t *tp, tprio_t prio) {

  tp->p_prio = prio;
  tp->p_state = CH_STATE_WTSTART;
  tp->p_flags = CH_FLAG_MODE_STATIC;
 800142e:	7745      	strb	r5, [r0, #29]
#if CH_CFG_TIME_QUANTUM > 0
  tp->p_preempt = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->p_realprio = prio;
  tp->p_mtxlist = NULL;
 8001430:	63c5      	str	r5, [r0, #60]	; 0x3c
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->p_epending = (eventmask_t)0;
 8001432:	6385      	str	r5, [r0, #56]	; 0x38
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->p_time = (systime_t)0;
 8001434:	6205      	str	r5, [r0, #32]
#endif
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
 8001436:	6185      	str	r5, [r0, #24]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 8001438:	4629      	mov	r1, r5
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->p_refs = (trefs_t)1;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->p_name = NULL;
  REG_INSERT(tp);
 800143a:	6138      	str	r0, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->p_next = (thread_t *)tlp;
 800143c:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001440:	f8c0 b02c 	str.w	fp, [r0, #44]	; 0x2c
  tqp->p_prev = (thread_t *)tqp;
 8001444:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
 8001448:	6170      	str	r0, [r6, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateI(wsp, size, prio, pf, arg);
  chSchWakeupS(tp, MSG_OK);
 800144a:	f7ff fec1 	bl	80011d0 <chSchWakeupS>
 800144e:	f385 8811 	msr	BASEPRI, r5
  chSysUnlock();

  return tp;
}
 8001452:	4620      	mov	r0, r4
 8001454:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001458:	20000c70 	.word	0x20000c70
 800145c:	080002e9 	.word	0x080002e9

08001460 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(systime_t time) {
 8001460:	b508      	push	{r3, lr}
 8001462:	4601      	mov	r1, r0
 8001464:	2320      	movs	r3, #32
 8001466:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chThdSleepS(systime_t time) {

  chDbgCheck(time != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, time);
 800146a:	2008      	movs	r0, #8
 800146c:	f7ff fe88 	bl	8001180 <chSchGoSleepTimeoutS>
 8001470:	2300      	movs	r3, #0
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	bd08      	pop	{r3, pc}
	...

08001480 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
 8001480:	b538      	push	{r3, r4, r5, lr}
  thread_t *tp = currp;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <chThdExitS+0x3c>)
 8001484:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 8001486:	6aa3      	ldr	r3, [r4, #40]	; 0x28

  tp->p_u.exitcode = msg;
 8001488:	6260      	str	r0, [r4, #36]	; 0x24
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800148a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800148e:	429d      	cmp	r5, r3
 8001490:	d007      	beq.n	80014a2 <chThdExitS+0x22>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->p_next;
  tlp->p_next = tp->p_next;
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	62a2      	str	r2, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->p_waiting));
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fe42 	bl	8001120 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->p_next != (thread_t *)tlp);
 800149c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tp->p_u.exitcode = msg;
#if defined(CH_CFG_THREAD_EXIT_HOOK)
  CH_CFG_THREAD_EXIT_HOOK(tp);
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  while (list_notempty(&tp->p_waiting)) {
 800149e:	42ab      	cmp	r3, r5
 80014a0:	d1f7      	bne.n	8001492 <chThdExitS+0x12>
  }
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads are immediately removed from the registry because
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
 80014a2:	7f63      	ldrb	r3, [r4, #29]
 80014a4:	079b      	lsls	r3, r3, #30
 80014a6:	d104      	bne.n	80014b2 <chThdExitS+0x32>
    REG_REMOVE(tp);
 80014a8:	6963      	ldr	r3, [r4, #20]
 80014aa:	6922      	ldr	r2, [r4, #16]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	6922      	ldr	r2, [r4, #16]
 80014b0:	6153      	str	r3, [r2, #20]
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014b2:	200f      	movs	r0, #15

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
}
 80014b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     there is no memory to recover.*/
  if ((tp->p_flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC) {
    REG_REMOVE(tp);
  }
#endif
  chSchGoSleepS(CH_STATE_FINAL);
 80014b8:	f7ff be4a 	b.w	8001150 <chSchGoSleepS>
 80014bc:	20000c70 	.word	0x20000c70

080014c0 <chThdExit>:
 80014c0:	2320      	movs	r3, #32
 80014c2:	f383 8811 	msr	BASEPRI, r3
 * @api
 */
void chThdExit(msg_t msg) {

  chSysLock();
  chThdExitS(msg);
 80014c6:	f7ff bfdb 	b.w	8001480 <chThdExitS>
 80014ca:	bf00      	nop
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <chThdSuspendS>:
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80014d0:	b510      	push	{r4, lr}
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.r_current;
 80014d2:	4c05      	ldr	r4, [pc, #20]	; (80014e8 <chThdSuspendS+0x18>)
 80014d4:	69a3      	ldr	r3, [r4, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
 80014d6:	6003      	str	r3, [r0, #0]
 * @param[in] trp       a pointer to a thread reference object
 * @return              The wake up message.
 *
 * @sclass
 */
msg_t chThdSuspendS(thread_reference_t *trp) {
 80014d8:	4602      	mov	r2, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  *trp = tp;
  tp->p_u.wttrp = trp;
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
  chSchGoSleepS(CH_STATE_SUSPENDED);
 80014dc:	2003      	movs	r0, #3
 80014de:	f7ff fe37 	bl	8001150 <chSchGoSleepS>

  return chThdGetSelfX()->p_u.rdymsg;
 80014e2:	69a3      	ldr	r3, [r4, #24]
}
 80014e4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80014e6:	bd10      	pop	{r4, pc}
 80014e8:	20000c70 	.word	0x20000c70
 80014ec:	00000000 	.word	0x00000000

080014f0 <chThdSuspendTimeoutS>:
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <chThdSuspendTimeoutS+0x18>)
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, systime_t timeout) {
 80014f2:	4602      	mov	r2, r0
 80014f4:	699b      	ldr	r3, [r3, #24]
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");

  if (TIME_IMMEDIATE == timeout) {
 80014f6:	b121      	cbz	r1, 8001502 <chThdSuspendTimeoutS+0x12>
    return MSG_TIMEOUT;
  }

  *trp = tp;
 80014f8:	6003      	str	r3, [r0, #0]
  tp->p_u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80014fa:	2003      	movs	r0, #3
  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
  tp->p_u.wttrp = trp;
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80014fe:	f7ff be3f 	b.w	8001180 <chSchGoSleepTimeoutS>
}
 8001502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001506:	4770      	bx	lr
 8001508:	20000c70 	.word	0x20000c70
 800150c:	00000000 	.word	0x00000000

08001510 <chThdResumeI>:
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {

  if (*trp != NULL) {
 8001510:	6803      	ldr	r3, [r0, #0]
 8001512:	b12b      	cbz	r3, 8001520 <chThdResumeI+0x10>
    thread_t *tp = *trp;

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
 8001514:	2200      	movs	r2, #0
 8001516:	6002      	str	r2, [r0, #0]
    tp->p_u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8001518:	4618      	mov	r0, r3

    chDbgAssert(tp->p_state == CH_STATE_SUSPENDED,
                "not THD_STATE_SUSPENDED");

    *trp = NULL;
    tp->p_u.rdymsg = msg;
 800151a:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 800151c:	f7ff be00 	b.w	8001120 <chSchReadyI>
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
	...

08001530 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8001530:	b169      	cbz	r1, 800154e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, systime_t timeout) {
 8001534:	b410      	push	{r4}
 8001536:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->p_next = (thread_t *)tqp;
  tp->p_prev = tqp->p_prev;
 8001538:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800153a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800153c:	2004      	movs	r0, #4
 800153e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->p_prev->p_next = tp;
 8001542:	6023      	str	r3, [r4, #0]
  tqp->p_prev = tp;
 8001544:	6053      	str	r3, [r2, #4]
}
 8001546:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800154a:	f7ff be19 	b.w	8001180 <chSchGoSleepTimeoutS>
}
 800154e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001552:	4770      	bx	lr
 8001554:	20000c70 	.word	0x20000c70
	...

08001560 <chThdDequeueNextI>:
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001560:	6802      	ldr	r2, [r0, #0]
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001562:	4290      	cmp	r0, r2
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001564:	4603      	mov	r3, r0

  if (queue_notempty(tqp)) {
 8001566:	d009      	beq.n	800157c <chThdDequeueNextI+0x1c>
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8001568:	b410      	push	{r4}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800156a:	6814      	ldr	r4, [r2, #0]
 800156c:	6004      	str	r4, [r0, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800156e:	6063      	str	r3, [r4, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001570:	6251      	str	r1, [r2, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001572:	4610      	mov	r0, r2

  if (queue_notempty(tqp)) {
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8001574:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001578:	f7ff bdd2 	b.w	8001120 <chSchReadyI>
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001580:	b538      	push	{r3, r4, r5, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 8001582:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8001584:	4298      	cmp	r0, r3
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8001586:	4604      	mov	r4, r0
 8001588:	460d      	mov	r5, r1

  while (queue_notempty(tqp)) {
 800158a:	d009      	beq.n	80015a0 <chThdDequeueAllI+0x20>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	6022      	str	r2, [r4, #0]
 8001590:	4618      	mov	r0, r3
  tqp->p_next->p_prev = (thread_t *)tqp;
 8001592:	6054      	str	r4, [r2, #4]

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->p_state == CH_STATE_QUEUED, "invalid state");

  tp->p_u.rdymsg = msg;
 8001594:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001596:	f7ff fdc3 	bl	8001120 <chSchReadyI>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	429c      	cmp	r4, r3
 800159e:	d1f5      	bne.n	800158c <chThdDequeueAllI+0xc>
 80015a0:	bd38      	pop	{r3, r4, r5, pc}
 80015a2:	bf00      	nop
	...

080015b0 <chTMStartMeasurementX>:
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <chTMStartMeasurementX+0x8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80015b4:	6083      	str	r3, [r0, #8]
 80015b6:	4770      	bx	lr
 80015b8:	e0001000 	.word	0xe0001000
 80015bc:	00000000 	.word	0x00000000

080015c0 <chTMStopMeasurementX>:
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015c2:	490f      	ldr	r1, [pc, #60]	; (8001600 <chTMStopMeasurementX+0x40>)
 80015c4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015c6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80015c8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80015ca:	6f8f      	ldr	r7, [r1, #120]	; 0x78
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80015cc:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015ce:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80015d0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80015d8:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80015da:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80015dc:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80015de:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80015e2:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015e4:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80015e8:	bf88      	it	hi
 80015ea:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80015ec:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80015ee:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80015f0:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80015f4:	bf38      	it	cc
 80015f6:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80015f8:	bcf0      	pop	{r4, r5, r6, r7}
 80015fa:	4770      	bx	lr
 80015fc:	e0001000 	.word	0xe0001000
 8001600:	20000c70 	.word	0x20000c70
	...

08001610 <_tm_init>:
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001610:	b5d0      	push	{r4, r6, r7, lr}
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001612:	4c0c      	ldr	r4, [pc, #48]	; (8001644 <_tm_init+0x34>)
/**
 * @brief   Initializes the time measurement unit.
 *
 * @init
 */
void _tm_init(void) {
 8001614:	b086      	sub	sp, #24
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001616:	2300      	movs	r3, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 800161c:	4668      	mov	r0, sp

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800161e:	2600      	movs	r6, #0
 8001620:	2700      	movs	r7, #0
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001622:	67a3      	str	r3, [r4, #120]	; 0x78
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001624:	9301      	str	r3, [sp, #4]
  tmp->last       = (rtcnt_t)0;
 8001626:	9302      	str	r3, [sp, #8]
  tmp->n          = (ucnt_t)0;
 8001628:	9303      	str	r3, [sp, #12]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 800162a:	9200      	str	r2, [sp, #0]
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 800162c:	e9cd 6704 	strd	r6, r7, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001630:	f7ff ffbe 	bl	80015b0 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8001634:	4668      	mov	r0, sp
 8001636:	f7ff ffc3 	bl	80015c0 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 800163a:	9b02      	ldr	r3, [sp, #8]
 800163c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800163e:	b006      	add	sp, #24
 8001640:	bdd0      	pop	{r4, r6, r7, pc}
 8001642:	bf00      	nop
 8001644:	20000c70 	.word	0x20000c70
	...

08001650 <chMtxObjectInit>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->m_queue);
  mp->m_owner = NULL;
 8001650:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001652:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001654:	6040      	str	r0, [r0, #4]
 8001656:	6083      	str	r3, [r0, #8]
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	0000      	movs	r0, r0
	...

08001660 <chMtxLockS>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <chMtxLockS+0xc4>)

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001662:	6882      	ldr	r2, [r0, #8]
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
 8001664:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001666:	699c      	ldr	r4, [r3, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);

  /* Is the mutex already locked? */
  if (mp->m_owner != NULL) {
 8001668:	2a00      	cmp	r2, #0
 800166a:	d055      	beq.n	8001718 <chMtxLockS+0xb8>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800166c:	68a1      	ldr	r1, [r4, #8]
 800166e:	6893      	ldr	r3, [r2, #8]
 8001670:	4299      	cmp	r1, r3
 8001672:	4605      	mov	r5, r0
 8001674:	d906      	bls.n	8001684 <chMtxLockS+0x24>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 8001676:	7f13      	ldrb	r3, [r2, #28]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->p_prio = ctp->p_prio;
 8001678:	6091      	str	r1, [r2, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
 800167a:	2b06      	cmp	r3, #6
 800167c:	d033      	beq.n	80016e6 <chMtxLockS+0x86>
 800167e:	2b07      	cmp	r3, #7
 8001680:	d01d      	beq.n	80016be <chMtxLockS+0x5e>
 8001682:	b19b      	cbz	r3, 80016ac <chMtxLockS+0x4c>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8001684:	462b      	mov	r3, r5
 8001686:	e003      	b.n	8001690 <chMtxLockS+0x30>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	68a2      	ldr	r2, [r4, #8]
 800168c:	4291      	cmp	r1, r2
 800168e:	d302      	bcc.n	8001696 <chMtxLockS+0x36>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 8001690:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 8001692:	429d      	cmp	r5, r3
 8001694:	d1f8      	bne.n	8001688 <chMtxLockS+0x28>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	6062      	str	r2, [r4, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 800169a:	6023      	str	r3, [r4, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 800169c:	6014      	str	r4, [r2, #0]
  cp->p_prev = tp;
 800169e:	605c      	str	r4, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
 80016a0:	6265      	str	r5, [r4, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80016a2:	2006      	movs	r0, #6
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
  }
}
 80016a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->m_queue);
      ctp->p_u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 80016a8:	f7ff bd52 	b.w	8001150 <chSchGoSleepS>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016ac:	e892 000a 	ldmia.w	r2, {r1, r3}
 80016b0:	6019      	str	r1, [r3, #0]
  tp->p_next->p_prev = tp->p_prev;
 80016b2:	6811      	ldr	r1, [r2, #0]
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->p_state = CH_STATE_CURRENT;
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 80016b4:	4610      	mov	r0, r2
 80016b6:	604b      	str	r3, [r1, #4]
 80016b8:	f7ff fd32 	bl	8001120 <chSchReadyI>
          break;
 80016bc:	e7e2      	b.n	8001684 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016be:	e892 0009 	ldmia.w	r2, {r0, r3}
 80016c2:	6018      	str	r0, [r3, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80016c4:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->p_next->p_prev = tp->p_prev;
 80016c6:	6810      	ldr	r0, [r2, #0]
 80016c8:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80016ca:	4633      	mov	r3, r6
 80016cc:	e002      	b.n	80016d4 <chMtxLockS+0x74>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	4288      	cmp	r0, r1
 80016d2:	d302      	bcc.n	80016da <chMtxLockS+0x7a>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80016d4:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016d6:	429e      	cmp	r6, r3
 80016d8:	d1f9      	bne.n	80016ce <chMtxLockS+0x6e>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 80016de:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 80016e0:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	e7ce      	b.n	8001684 <chMtxLockS+0x24>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->p_prev->p_next = tp->p_next;
 80016e6:	e892 0009 	ldmia.w	r2, {r0, r3}
 80016ea:	6018      	str	r0, [r3, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->p_state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->p_u.wtmtxp->m_queue);
 80016ec:	6a56      	ldr	r6, [r2, #36]	; 0x24
  tp->p_next->p_prev = tp->p_prev;
 80016ee:	6810      	ldr	r0, [r2, #0]
 80016f0:	6043      	str	r3, [r0, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 80016f2:	4633      	mov	r3, r6
 80016f4:	e002      	b.n	80016fc <chMtxLockS+0x9c>
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016f6:	6898      	ldr	r0, [r3, #8]
 80016f8:	4288      	cmp	r0, r1
 80016fa:	d302      	bcc.n	8001702 <chMtxLockS+0xa2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
 80016fc:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
 80016fe:	429e      	cmp	r6, r3
 8001700:	d1f9      	bne.n	80016f6 <chMtxLockS+0x96>
  tp->p_next = cp;
  tp->p_prev = cp->p_prev;
 8001702:	6859      	ldr	r1, [r3, #4]
 8001704:	6051      	str	r1, [r2, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->p_next;
  } while ((cp != (thread_t *)tqp) && (cp->p_prio >= tp->p_prio));
  tp->p_next = cp;
 8001706:	6013      	str	r3, [r2, #0]
  tp->p_prev = cp->p_prev;
  tp->p_prev->p_next = tp;
 8001708:	600a      	str	r2, [r1, #0]
  cp->p_prev = tp;
 800170a:	605a      	str	r2, [r3, #4]
          tp = tp->p_u.wtmtxp->m_owner;
 800170c:	68b2      	ldr	r2, [r6, #8]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->m_owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->p_prio < ctp->p_prio) {
 800170e:	68a1      	ldr	r1, [r4, #8]
 8001710:	6893      	ldr	r3, [r2, #8]
 8001712:	428b      	cmp	r3, r1
 8001714:	d3af      	bcc.n	8001676 <chMtxLockS+0x16>
 8001716:	e7b5      	b.n	8001684 <chMtxLockS+0x24>

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
    mp->m_next = ctp->p_mtxlist;
 8001718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800171a:	60c3      	str	r3, [r0, #12]
    chDbgAssert(mp->m_cnt == (cnt_t)0, "counter is not zero");

    mp->m_cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->m_owner = ctp;
 800171c:	6084      	str	r4, [r0, #8]
    mp->m_next = ctp->p_mtxlist;
    ctp->p_mtxlist = mp;
 800171e:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001720:	bd70      	pop	{r4, r5, r6, pc}
 8001722:	bf00      	nop
 8001724:	20000c70 	.word	0x20000c70
	...

08001730 <chMtxLock>:
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxLock(mutex_t *mp) {
 8001730:	b508      	push	{r3, lr}
 8001732:	2320      	movs	r3, #32
 8001734:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chMtxLockS(mp);
 8001738:	f7ff ff92 	bl	8001660 <chMtxLockS>
 800173c:	2300      	movs	r3, #0
 800173e:	f383 8811 	msr	BASEPRI, r3
 8001742:	bd08      	pop	{r3, pc}
	...

08001750 <chMtxUnlock>:
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <chMtxUnlock+0x60>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
 8001752:	b570      	push	{r4, r5, r6, lr}
  thread_t *ctp = currp;
 8001754:	699d      	ldr	r5, [r3, #24]
 8001756:	2320      	movs	r3, #32
 8001758:	f383 8811 	msr	BASEPRI, r3
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->p_next != (const thread_t *)tqp);
 800175c:	6804      	ldr	r4, [r0, #0]
    chDbgAssert(ctp->p_mtxlist == mp, "not next in list");

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->p_mtxlist = mp->m_next;
 800175e:	68c3      	ldr	r3, [r0, #12]
 8001760:	63eb      	str	r3, [r5, #60]	; 0x3c

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8001762:	42a0      	cmp	r0, r4
 8001764:	d01d      	beq.n	80017a2 <chMtxUnlock+0x52>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
 8001766:	6c29      	ldr	r1, [r5, #64]	; 0x40
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 8001768:	b14b      	cbz	r3, 800177e <chMtxUnlock+0x2e>
 800176a:	681a      	ldr	r2, [r3, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <chMtxUnlock+0x28>
            (lmp->m_queue.p_next->p_prio > newprio)) {
 8001770:	6892      	ldr	r2, [r2, #8]
 8001772:	4291      	cmp	r1, r2
 8001774:	bf38      	it	cc
 8001776:	4611      	movcc	r1, r2
          newprio = lmp->m_queue.p_next->p_prio;
        }
        lmp = lmp->m_next;
 8001778:	68db      	ldr	r3, [r3, #12]

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->p_realprio;
      lmp = ctp->p_mtxlist;
      while (lmp != NULL) {
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f5      	bne.n	800176a <chMtxUnlock+0x1a>
 800177e:	4603      	mov	r3, r0
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->p_next;

  tqp->p_next = tp->p_next;
 8001780:	6822      	ldr	r2, [r4, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
      mp->m_next = tp->p_mtxlist;
 8001782:	6be6      	ldr	r6, [r4, #60]	; 0x3c
        lmp = lmp->m_next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->p_prio = newprio;
 8001784:	60a9      	str	r1, [r5, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001786:	4620      	mov	r0, r4
 8001788:	601a      	str	r2, [r3, #0]
  tqp->p_next->p_prev = (thread_t *)tqp;
 800178a:	6053      	str	r3, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->m_cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->m_queue);
      mp->m_owner = tp;
 800178c:	609c      	str	r4, [r3, #8]
      mp->m_next = tp->p_mtxlist;
 800178e:	60de      	str	r6, [r3, #12]
      tp->p_mtxlist = mp;
 8001790:	63e3      	str	r3, [r4, #60]	; 0x3c

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8001792:	f7ff fcc5 	bl	8001120 <chSchReadyI>
      chSchRescheduleS();
 8001796:	f7ff fda3 	bl	80012e0 <chSchRescheduleS>
 800179a:	2300      	movs	r3, #0
 800179c:	f383 8811 	msr	BASEPRI, r3
 80017a0:	bd70      	pop	{r4, r5, r6, pc}
    }
    else {
      mp->m_owner = NULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	6083      	str	r3, [r0, #8]
 80017a6:	2300      	movs	r3, #0
 80017a8:	f383 8811 	msr	BASEPRI, r3
 80017ac:	bd70      	pop	{r4, r5, r6, pc}
 80017ae:	bf00      	nop
 80017b0:	20000c70 	.word	0x20000c70
	...

080017c0 <chEvtRegisterMaskWithFlags>:
 * @api
 */
void chEvtRegisterMaskWithFlags(event_source_t *esp,
                                event_listener_t *elp,
                                eventmask_t events,
                                eventflags_t wflags) {
 80017c0:	b430      	push	{r4, r5}
 80017c2:	2420      	movs	r4, #32
 80017c4:	f384 8811 	msr	BASEPRI, r4
  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
 80017c8:	4d06      	ldr	r5, [pc, #24]	; (80017e4 <chEvtRegisterMaskWithFlags+0x24>)
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80017ca:	6804      	ldr	r4, [r0, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
 80017cc:	69ad      	ldr	r5, [r5, #24]
                                eventflags_t wflags) {

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
 80017ce:	600c      	str	r4, [r1, #0]
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80017d0:	2400      	movs	r4, #0

  chDbgCheck((esp != NULL) && (elp != NULL));

  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
 80017d2:	6001      	str	r1, [r0, #0]
  elp->el_listener = currp;
 80017d4:	604d      	str	r5, [r1, #4]
  elp->el_events   = events;
 80017d6:	608a      	str	r2, [r1, #8]
  elp->el_flags    = (eventflags_t)0;
  elp->el_wflags   = wflags;
 80017d8:	610b      	str	r3, [r1, #16]
  chSysLock();
  elp->el_next     = esp->es_next;
  esp->es_next     = elp;
  elp->el_listener = currp;
  elp->el_events   = events;
  elp->el_flags    = (eventflags_t)0;
 80017da:	60cc      	str	r4, [r1, #12]
 80017dc:	f384 8811 	msr	BASEPRI, r4
  elp->el_wflags   = wflags;
  chSysUnlock();
}
 80017e0:	bc30      	pop	{r4, r5}
 80017e2:	4770      	bx	lr
 80017e4:	20000c70 	.word	0x20000c70
	...

080017f0 <chEvtUnregister>:
 80017f0:	2320      	movs	r3, #32
 80017f2:	f383 8811 	msr	BASEPRI, r3
  event_listener_t *p;

  chDbgCheck((esp != NULL) && (elp != NULL));

  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
 80017f6:	4602      	mov	r2, r0
 80017f8:	e002      	b.n	8001800 <chEvtUnregister+0x10>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->el_next == elp) {
 80017fa:	428b      	cmp	r3, r1
 80017fc:	d007      	beq.n	800180e <chEvtUnregister+0x1e>
 80017fe:	461a      	mov	r2, r3
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  p = (event_listener_t *)esp;
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->el_next != (event_listener_t *)esp) {
 8001800:	6813      	ldr	r3, [r2, #0]
 8001802:	4283      	cmp	r3, r0
 8001804:	d1f9      	bne.n	80017fa <chEvtUnregister+0xa>
 8001806:	2300      	movs	r3, #0
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	4770      	bx	lr
  /*lint -restore*/
    if (p->el_next == elp) {
      p->el_next = elp->el_next;
 800180e:	680b      	ldr	r3, [r1, #0]
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	2300      	movs	r3, #0
 8001814:	f383 8811 	msr	BASEPRI, r3
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	0000      	movs	r0, r0
	...

08001820 <chEvtSignalI>:
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001820:	6b83      	ldr	r3, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001822:	7f02      	ldrb	r2, [r0, #28]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001824:	4319      	orrs	r1, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001826:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
 8001828:	6381      	str	r1, [r0, #56]	; 0x38
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 800182a:	d00a      	beq.n	8001842 <chEvtSignalI+0x22>
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 800182c:	2a0b      	cmp	r2, #11
 800182e:	d000      	beq.n	8001832 <chEvtSignalI+0x12>
 8001830:	4770      	bx	lr
      ((tp->p_state == CH_STATE_WTANDEVT) &&
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
 8001832:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001834:	4019      	ands	r1, r3

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
      ((tp->p_state == CH_STATE_WTANDEVT) &&
 8001836:	428b      	cmp	r3, r1
 8001838:	d1fa      	bne.n	8001830 <chEvtSignalI+0x10>
       ((tp->p_epending & tp->p_u.ewmask) == tp->p_u.ewmask))) {
    tp->p_u.rdymsg = MSG_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800183e:	f7ff bc6f 	b.w	8001120 <chSchReadyI>
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
       ((tp->p_epending & tp->p_u.ewmask) != (eventmask_t)0)) ||
 8001842:	6a43      	ldr	r3, [r0, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->p_epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->p_state == CH_STATE_WTOREVT) &&
 8001844:	4219      	tst	r1, r3
 8001846:	d1f8      	bne.n	800183a <chEvtSignalI+0x1a>
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	0000      	movs	r0, r0
	...

08001850 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001850:	b570      	push	{r4, r5, r6, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
 8001852:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001854:	42a0      	cmp	r0, r4
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8001856:	4606      	mov	r6, r0
 8001858:	460d      	mov	r5, r1
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800185a:	d00d      	beq.n	8001878 <chEvtBroadcastFlagsI+0x28>
  /*lint -restore*/
    elp->el_flags |= flags;
 800185c:	68e3      	ldr	r3, [r4, #12]
 800185e:	432b      	orrs	r3, r5
 8001860:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001862:	b115      	cbz	r5, 800186a <chEvtBroadcastFlagsI+0x1a>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
 8001864:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->el_flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8001866:	4213      	tst	r3, r2
 8001868:	d003      	beq.n	8001872 <chEvtBroadcastFlagsI+0x22>
        ((elp->el_flags & elp->el_wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->el_listener, elp->el_events);
 800186a:	6860      	ldr	r0, [r4, #4]
 800186c:	68a1      	ldr	r1, [r4, #8]
 800186e:	f7ff ffd7 	bl	8001820 <chEvtSignalI>
    }
    elp = elp->el_next;
 8001872:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->es_next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8001874:	42a6      	cmp	r6, r4
 8001876:	d1f1      	bne.n	800185c <chEvtBroadcastFlagsI+0xc>
 8001878:	bd70      	pop	{r4, r5, r6, pc}
 800187a:	bf00      	nop
 800187c:	0000      	movs	r0, r0
	...

08001880 <chEvtBroadcastFlags>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @api
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 8001880:	b508      	push	{r3, lr}
 8001882:	2320      	movs	r3, #32
 8001884:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
 8001888:	f7ff ffe2 	bl	8001850 <chEvtBroadcastFlagsI>
  chSchRescheduleS();
 800188c:	f7ff fd28 	bl	80012e0 <chSchRescheduleS>
 8001890:	2300      	movs	r3, #0
 8001892:	f383 8811 	msr	BASEPRI, r3
 8001896:	bd08      	pop	{r3, pc}
	...

080018a0 <chEvtWaitOneTimeout>:
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
  thread_t *ctp = currp;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <chEvtWaitOneTimeout+0x4c>)
 * @return              The mask of the lowest event id served and cleared.
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, systime_t time) {
 80018a2:	b570      	push	{r4, r5, r6, lr}
 80018a4:	2220      	movs	r2, #32
  thread_t *ctp = currp;
 80018a6:	699d      	ldr	r5, [r3, #24]
 80018a8:	f382 8811 	msr	BASEPRI, r2
  eventmask_t m;

  chSysLock();
  m = ctp->p_epending & events;
 80018ac:	6baa      	ldr	r2, [r5, #56]	; 0x38
  if (m == (eventmask_t)0) {
 80018ae:	ea10 0602 	ands.w	r6, r0, r2
 80018b2:	d10e      	bne.n	80018d2 <chEvtWaitOneTimeout+0x32>
    if (TIME_IMMEDIATE == time) {
 80018b4:	b919      	cbnz	r1, 80018be <chEvtWaitOneTimeout+0x1e>
 80018b6:	f381 8811 	msr	BASEPRI, r1
      chSysUnlock();
      return (eventmask_t)0;
 80018ba:	4608      	mov	r0, r1
 80018bc:	bd70      	pop	{r4, r5, r6, pc}
    }
    ctp->p_u.ewmask = events;
 80018be:	6268      	str	r0, [r5, #36]	; 0x24
 80018c0:	4604      	mov	r4, r0
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
 80018c2:	200a      	movs	r0, #10
 80018c4:	f7ff fc5c 	bl	8001180 <chSchGoSleepTimeoutS>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	db0b      	blt.n	80018e4 <chEvtWaitOneTimeout+0x44>
      chSysUnlock();
      return (eventmask_t)0;
    }
    m = ctp->p_epending & events;
 80018cc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80018ce:	ea04 0602 	and.w	r6, r4, r2
  }
  m ^= m & (m - (eventmask_t)1);
 80018d2:	4270      	negs	r0, r6
 80018d4:	4030      	ands	r0, r6
  ctp->p_epending &= ~m;
 80018d6:	ea22 0200 	bic.w	r2, r2, r0
 80018da:	63aa      	str	r2, [r5, #56]	; 0x38
 80018dc:	2300      	movs	r3, #0
 80018de:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return m;
}
 80018e2:	bd70      	pop	{r4, r5, r6, pc}
 80018e4:	f386 8811 	msr	BASEPRI, r6
      return (eventmask_t)0;
    }
    ctp->p_u.ewmask = events;
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, time) < MSG_OK) {
      chSysUnlock();
      return (eventmask_t)0;
 80018e8:	4630      	mov	r0, r6
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
 80018ec:	20000c70 	.word	0x20000c70

080018f0 <_core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018f0:	4a05      	ldr	r2, [pc, #20]	; (8001908 <_core_init+0x18>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <_core_init+0x1c>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018f4:	4806      	ldr	r0, [pc, #24]	; (8001910 <_core_init+0x20>)
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018f6:	4907      	ldr	r1, [pc, #28]	; (8001914 <_core_init+0x24>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 80018f8:	f022 0207 	bic.w	r2, r2, #7
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 80018fc:	f023 0307 	bic.w	r3, r3, #7
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  nextmem = (uint8_t *)MEM_ALIGN_NEXT(__heap_base__);
 8001900:	6002      	str	r2, [r0, #0]
  endmem = (uint8_t *)MEM_ALIGN_PREV(__heap_end__);
 8001902:	600b      	str	r3, [r1, #0]
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20001b8f 	.word	0x20001b8f
 800190c:	20020000 	.word	0x20020000
 8001910:	20000ecc 	.word	0x20000ecc
 8001914:	20000ec8 	.word	0x20000ec8
	...

08001920 <chCoreAlloc>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAlloc(size_t size) {
 8001920:	b410      	push	{r4}
 8001922:	2320      	movs	r3, #32
 8001924:	f383 8811 	msr	BASEPRI, r3

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001928:	4c09      	ldr	r4, [pc, #36]	; (8001950 <chCoreAlloc+0x30>)
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <chCoreAlloc+0x34>)
 800192c:	6822      	ldr	r2, [r4, #0]
 800192e:	6819      	ldr	r1, [r3, #0]
void *chCoreAllocI(size_t size) {
  void *p;

  chDbgCheckClassI();

  size = MEM_ALIGN_NEXT(size);
 8001930:	1dc3      	adds	r3, r0, #7
 8001932:	f023 0307 	bic.w	r3, r3, #7
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
 8001936:	1a89      	subs	r1, r1, r2
 8001938:	428b      	cmp	r3, r1
  /*lint -restore*/
    return NULL;
  }
  p = nextmem;
  nextmem += size;
 800193a:	bf9d      	ittte	ls
 800193c:	189b      	addls	r3, r3, r2
 800193e:	6023      	strls	r3, [r4, #0]

  return p;
 8001940:	4610      	movls	r0, r2

  size = MEM_ALIGN_NEXT(size);
  /*lint -save -e9033 [10.8] The cast is safe.*/
  if ((size_t)(endmem - nextmem) < size) {
  /*lint -restore*/
    return NULL;
 8001942:	2000      	movhi	r0, #0
 8001944:	2300      	movs	r3, #0
 8001946:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocI(size);
  chSysUnlock();

  return p;
}
 800194a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	20000ecc 	.word	0x20000ecc
 8001954:	20000ec8 	.word	0x20000ec8
	...

08001960 <_heap_init>:
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <_heap_init+0x14>)
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <_heap_init+0x18>)
 8001964:	601a      	str	r2, [r3, #0]
  default_heap.h_free.h.u.next = NULL;
  default_heap.h_free.h.size = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001966:	f103 0010 	add.w	r0, r3, #16
 * @notapi
 */
void _heap_init(void) {

  default_heap.h_provider = chCoreAlloc;
  default_heap.h_free.h.u.next = NULL;
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  default_heap.h_free.h.size = 0;
 800196e:	60da      	str	r2, [r3, #12]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.h_mtx);
 8001970:	f7ff be6e 	b.w	8001650 <chMtxObjectInit>
 8001974:	20000ed0 	.word	0x20000ed0
 8001978:	08001921 	.word	0x08001921
 800197c:	00000000 	.word	0x00000000

08001980 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <SVC_Handler+0x1c>)
 8001982:	6853      	ldr	r3, [r2, #4]
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6053      	str	r3, [r2, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 800198a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800198e:	3368      	adds	r3, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8001990:	f383 8809 	msr	PSP, r3

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001994:	2300      	movs	r3, #0
 8001996:	f383 8811 	msr	BASEPRI, r3
 800199a:	4770      	bx	lr
 800199c:	e000ef30 	.word	0xe000ef30

080019a0 <_port_irq_epilogue>:
 80019a0:	2320      	movs	r3, #32
 80019a2:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <_port_irq_epilogue+0x50>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80019ae:	d102      	bne.n	80019b6 <_port_irq_epilogue+0x16>
 80019b0:	f383 8811 	msr	BASEPRI, r3
 80019b4:	4770      	bx	lr
/*===========================================================================*/

/**
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {
 80019b6:	b510      	push	{r4, lr}
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  uint32_t result;

  /* Empty asm statement works as a scheduling barrier */
  __ASM volatile ("");
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80019b8:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 80019bc:	f3ef 8409 	mrs	r4, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80019c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	f844 3c08 	str.w	r3, [r4, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80019cc:	f844 2c4c 	str.w	r2, [r4, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80019d0:	f1a4 0368 	sub.w	r3, r4, #104	; 0x68

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80019d4:	f383 8809 	msr	PSP, r3
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80019d8:	f7ff fc2a 	bl	8001230 <chSchIsPreemptionRequired>
 80019dc:	b118      	cbz	r0, 80019e6 <_port_irq_epilogue+0x46>
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <_port_irq_epilogue+0x58>)
 80019e0:	f844 3c50 	str.w	r3, [r4, #-80]
 80019e4:	bd10      	pop	{r4, pc}
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <_port_irq_epilogue+0x5c>)
 80019e8:	f844 3c50 	str.w	r3, [r4, #-80]
 80019ec:	bd10      	pop	{r4, pc}
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	e000ef30 	.word	0xe000ef30
 80019f8:	080002f9 	.word	0x080002f9
 80019fc:	080002fc 	.word	0x080002fc

08001a00 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
 8001a00:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
 8001a02:	f001 f915 	bl	8002c30 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
  palInit(&pal_default_config);
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <halInit+0x34>)
 8001a08:	f001 ff02 	bl	8003810 <_pal_lld_init>
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
 8001a0c:	f000 faa0 	bl	8001f50 <adcInit>
#endif
#if (HAL_USE_DAC == TRUE) || defined(__DOXYGEN__)
  dacInit();
#endif
#if (HAL_USE_EXT == TRUE) || defined(__DOXYGEN__)
  extInit();
 8001a10:	f000 fab6 	bl	8001f80 <extInit>
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
#endif
#if (HAL_USE_I2C == TRUE) || defined(__DOXYGEN__)
  i2cInit();
 8001a14:	f000 fae4 	bl	8001fe0 <i2cInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
 8001a18:	f000 fb32 	bl	8002080 <pwmInit>
#endif
#if (HAL_USE_SDC == TRUE) || defined(__DOXYGEN__)
  sdcInit();
#endif
#if (HAL_USE_SPI == TRUE) || defined(__DOXYGEN__)
  spiInit();
 8001a1c:	f000 fd88 	bl	8002530 <spiInit>
#endif
#if (HAL_USE_UART == TRUE) || defined(__DOXYGEN__)
  uartInit();
#endif
#if (HAL_USE_USB == TRUE) || defined(__DOXYGEN__)
  usbInit();
 8001a20:	f000 fe0e 	bl	8002640 <usbInit>
#endif
#if (HAL_USE_MMC_SPI == TRUE) || defined(__DOXYGEN__)
  mmcInit();
#endif
#if (HAL_USE_SERIAL_USB == TRUE) || defined(__DOXYGEN__)
  sduInit();
 8001a24:	f000 fc34 	bl	8002290 <sduInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
 8001a28:	f003 fa62 	bl	8004ef0 <boardInit>
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
#endif
}
 8001a2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
 8001a30:	f000 b806 	b.w	8001a40 <stInit>
 8001a34:	080079a0 	.word	0x080079a0
	...

08001a40 <stInit>:
 *
 * @init
 */
void stInit(void) {

  st_lld_init();
 8001a40:	f001 bb96 	b.w	8003170 <st_lld_init>
	...

08001a50 <ibqObjectInit>:
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 8001a50:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001a52:	3204      	adds	r2, #4
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 8001a54:	2400      	movs	r4, #0
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001a56:	fb03 1702 	mla	r7, r3, r2, r1
 *
 * @init
 */
void ibqObjectInit(input_buffers_queue_t *ibqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t infy, void *link) {
 8001a5a:	9e04      	ldr	r6, [sp, #16]
 8001a5c:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001a5e:	6147      	str	r7, [r0, #20]
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
 8001a60:	62c6      	str	r6, [r0, #44]	; 0x2c
  ibqp->link     = link;
 8001a62:	6305      	str	r5, [r0, #48]	; 0x30
                   bqnotify_t infy, void *link) {

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
 8001a64:	6084      	str	r4, [r0, #8]
  ibqp->bwrptr   = bp;
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
  ibqp->bn       = n;
  ibqp->buffers  = bp;
  ibqp->ptr      = NULL;
 8001a66:	6244      	str	r4, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 8001a68:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001a6a:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001a6c:	6040      	str	r0, [r0, #4]

  osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&ibqp->waiting);
  ibqp->bcounter = 0;
  ibqp->brdptr   = bp;
 8001a6e:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = bp;
 8001a70:	60c1      	str	r1, [r0, #12]
  ibqp->btop     = bp + ((size + sizeof (size_t)) * n);
  ibqp->bsize    = size + sizeof (size_t);
 8001a72:	6182      	str	r2, [r0, #24]
  ibqp->bn       = n;
 8001a74:	61c3      	str	r3, [r0, #28]
  ibqp->buffers  = bp;
 8001a76:	6201      	str	r1, [r0, #32]
  ibqp->ptr      = NULL;
  ibqp->top      = NULL;
  ibqp->notify   = infy;
  ibqp->link     = link;
}
 8001a78:	bcf0      	pop	{r4, r5, r6, r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	0000      	movs	r0, r0
	...

08001a80 <ibqResetI>:
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 8001a80:	2200      	movs	r2, #0
  ibqp->brdptr   = ibqp->buffers;
 8001a82:	6a01      	ldr	r1, [r0, #32]
 8001a84:	6101      	str	r1, [r0, #16]
  ibqp->bwrptr   = ibqp->buffers;
 8001a86:	60c1      	str	r1, [r0, #12]
 */
void ibqResetI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  ibqp->bcounter = 0;
 8001a88:	6082      	str	r2, [r0, #8]
  ibqp->brdptr   = ibqp->buffers;
  ibqp->bwrptr   = ibqp->buffers;
  ibqp->ptr      = NULL;
 8001a8a:	6242      	str	r2, [r0, #36]	; 0x24
  ibqp->top      = NULL;
 8001a8c:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001a8e:	f06f 0101 	mvn.w	r1, #1
 8001a92:	f7ff bd75 	b.w	8001580 <chThdDequeueAllI>
 8001a96:	bf00      	nop
	...

08001aa0 <ibqGetEmptyBufferI>:
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001aa0:	68c3      	ldr	r3, [r0, #12]
 8001aa2:	6902      	ldr	r2, [r0, #16]
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d001      	beq.n	8001aac <ibqGetEmptyBufferI+0xc>
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8001aa8:	1d18      	adds	r0, r3, #4
}
 8001aaa:	4770      	bx	lr
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8001aac:	6882      	ldr	r2, [r0, #8]
 8001aae:	2a00      	cmp	r2, #0
 8001ab0:	d0fa      	beq.n	8001aa8 <ibqGetEmptyBufferI+0x8>
    return NULL;
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
	...

08001ac0 <ibqPostFullBufferI>:
 * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @iclass
 */
void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 8001ac0:	b430      	push	{r4, r5}

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001ac2:	68c4      	ldr	r4, [r0, #12]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8001ac4:	6945      	ldr	r5, [r0, #20]

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8001ac6:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001ac8:	6983      	ldr	r3, [r0, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001aca:	6882      	ldr	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
 8001acc:	4423      	add	r3, r4
  if (ibqp->bwrptr >= ibqp->btop) {
 8001ace:	42ab      	cmp	r3, r5
  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
 8001ad0:	60c3      	str	r3, [r0, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001ad2:	f102 0201 	add.w	r2, r2, #1
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 8001ad6:	bf28      	it	cs
 8001ad8:	6a03      	ldrcs	r3, [r0, #32]

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
 8001ada:	6082      	str	r2, [r0, #8]
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
    ibqp->bwrptr = ibqp->buffers;
 8001adc:	bf28      	it	cs
 8001ade:	60c3      	strcs	r3, [r0, #12]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001ae0:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
}
 8001ae2:	bc30      	pop	{r4, r5}
 8001ae4:	f7ff bd3c 	b.w	8001560 <chThdDequeueNextI>
	...

08001af0 <ibqGetFullBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001af6:	e003      	b.n	8001b00 <ibqGetFullBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001af8:	f7ff fd1a 	bl	8001530 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001afc:	2800      	cmp	r0, #0
 8001afe:	db0b      	blt.n	8001b18 <ibqGetFullBufferTimeoutS+0x28>
  msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
                                 systime_t timeout) {

  osalDbgCheckClassS();

  while (ibqIsEmptyI(ibqp)) {
 8001b00:	68a3      	ldr	r3, [r4, #8]
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f6      	beq.n	8001af8 <ibqGetFullBufferTimeoutS+0x8>
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b0a:	6923      	ldr	r3, [r4, #16]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b0c:	681a      	ldr	r2, [r3, #0]
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b0e:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b10:	441a      	add	r2, r3
 8001b12:	62a2      	str	r2, [r4, #40]	; 0x28
  }

  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");

  /* Setting up the "current" buffer and its boundary.*/
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8001b14:	6263      	str	r3, [r4, #36]	; 0x24
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8001b16:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001b18:	bd38      	pop	{r3, r4, r5, pc}
 8001b1a:	bf00      	nop
 8001b1c:	0000      	movs	r0, r0
	...

08001b20 <ibqReleaseEmptyBufferS>:
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 8001b20:	b410      	push	{r4}
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001b22:	6983      	ldr	r3, [r0, #24]
 8001b24:	6904      	ldr	r4, [r0, #16]
  if (ibqp->brdptr >= ibqp->btop) {
 8001b26:	6941      	ldr	r1, [r0, #20]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001b28:	6882      	ldr	r2, [r0, #8]
  ibqp->brdptr += ibqp->bsize;
 8001b2a:	4423      	add	r3, r4
  if (ibqp->brdptr >= ibqp->btop) {
 8001b2c:	428b      	cmp	r3, r1
  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
 8001b2e:	6103      	str	r3, [r0, #16]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
 8001b30:	bf24      	itt	cs
 8001b32:	6a03      	ldrcs	r3, [r0, #32]
 8001b34:	6103      	strcs	r3, [r0, #16]

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001b36:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001b38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
 8001b3a:	6082      	str	r2, [r0, #8]
  if (ibqp->brdptr >= ibqp->btop) {
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6242      	str	r2, [r0, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 8001b40:	b113      	cbz	r3, 8001b48 <ibqReleaseEmptyBufferS+0x28>
    ibqp->notify(ibqp);
  }
}
 8001b42:	f85d 4b04 	ldr.w	r4, [sp], #4
  /* No "current" buffer.*/
  ibqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
    ibqp->notify(ibqp);
 8001b46:	4718      	bx	r3
  }
}
 8001b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop

08001b50 <ibqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, systime_t timeout) {
 8001b50:	b538      	push	{r3, r4, r5, lr}
 8001b52:	4604      	mov	r4, r0

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8001b54:	2320      	movs	r3, #32
 8001b56:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
 8001b5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001b5c:	b19d      	cbz	r5, 8001b86 <ibqGetTimeout+0x36>
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001b5e:	462b      	mov	r3, r5
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001b60:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      return msg;
    }
  }

  /* Next byte from the buffer.*/
  msg = (msg_t)*ibqp->ptr;
 8001b62:	f813 5b01 	ldrb.w	r5, [r3], #1
  ibqp->ptr++;
 8001b66:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d204      	bcs.n	8001b76 <ibqGetTimeout+0x26>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f383 8811 	msr	BASEPRI, r3
    ibqReleaseEmptyBufferS(ibqp);
  }

  osalSysUnlock();
  return msg;
 8001b72:	4628      	mov	r0, r5
}
 8001b74:	bd38      	pop	{r3, r4, r5, pc}
  ibqp->ptr++;

  /* If the current buffer has been fully read then it is returned as
     empty in the queue.*/
  if (ibqp->ptr >= ibqp->top) {
    ibqReleaseEmptyBufferS(ibqp);
 8001b76:	4620      	mov	r0, r4
 8001b78:	f7ff ffd2 	bl	8001b20 <ibqReleaseEmptyBufferS>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();
  return msg;
 8001b82:	4628      	mov	r0, r5
}
 8001b84:	bd38      	pop	{r3, r4, r5, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (ibqp->ptr == NULL) {
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001b86:	f7ff ffb3 	bl	8001af0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 8001b8a:	b908      	cbnz	r0, 8001b90 <ibqGetTimeout+0x40>
 8001b8c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001b8e:	e7e6      	b.n	8001b5e <ibqGetTimeout+0xe>
 8001b90:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 8001b94:	bd38      	pop	{r3, r4, r5, pc}
 8001b96:	bf00      	nop
	...

08001ba0 <ibqReadTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
 8001ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	460e      	mov	r6, r1
 8001baa:	4692      	mov	sl, r2
 8001bac:	4699      	mov	r9, r3
 8001bae:	2720      	movs	r7, #32
 8001bb0:	f387 8811 	msr	BASEPRI, r7
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return ch.vtlist.vt_systime;
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <ibqReadTimeout+0x100>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001bba:	444b      	add	r3, r9
 *
 * @api
 */
size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
                      size_t n, systime_t timeout) {
  size_t r = 0;
 8001bbc:	2500      	movs	r5, #0
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001bbe:	9301      	str	r3, [sp, #4]
    if (ibqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001bc0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	46a8      	mov	r8, r5

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001bc8:	b391      	cbz	r1, 8001c30 <ibqReadTimeout+0x90>
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001bca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (size > (n - r)) {
 8001bcc:	ebc5 0b0a 	rsb	fp, r5, sl
        return r;
      }
    }

    /* Size of the data chunk present in the current buffer.*/
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8001bd0:	1a5b      	subs	r3, r3, r1
 8001bd2:	459b      	cmp	fp, r3
 8001bd4:	bf28      	it	cs
 8001bd6:	469b      	movcs	fp, r3
      size = n - r;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001bd8:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 8001bdc:	d938      	bls.n	8001c50 <ibqReadTimeout+0xb0>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
 8001bde:	f101 0240 	add.w	r2, r1, #64	; 0x40
 8001be2:	4633      	mov	r3, r6
 8001be4:	f8d1 c000 	ldr.w	ip, [r1]
 8001be8:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001bec:	6888      	ldr	r0, [r1, #8]
 8001bee:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8001bf2:	f8c3 b00c 	str.w	fp, [r3, #12]
 8001bf6:	3110      	adds	r1, #16
 8001bf8:	4291      	cmp	r1, r2
 8001bfa:	f8c3 c000 	str.w	ip, [r3]
 8001bfe:	f8c3 e004 	str.w	lr, [r3, #4]
 8001c02:	6098      	str	r0, [r3, #8]
 8001c04:	f103 0310 	add.w	r3, r3, #16
 8001c08:	d1ec      	bne.n	8001be4 <ibqReadTimeout+0x44>
      bp        += 64U;
      ibqp->ptr += 64U;
 8001c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
      ibqp->ptr += 64U;
 8001c0e:	3340      	adds	r3, #64	; 0x40
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c10:	429a      	cmp	r2, r3
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
 8001c12:	f106 0640 	add.w	r6, r6, #64	; 0x40
      ibqp->ptr += 64U;
      r         += 64U;
 8001c16:	f105 0540 	add.w	r5, r5, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(bp, ibqp->ptr, 64U);
      bp        += 64U;
      ibqp->ptr += 64U;
 8001c1a:	6263      	str	r3, [r4, #36]	; 0x24
      ibqp->ptr += size;
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c1c:	d924      	bls.n	8001c68 <ibqReadTimeout+0xc8>
 8001c1e:	f388 8811 	msr	BASEPRI, r8
      ibqReleaseEmptyBufferS(ibqp);
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 8001c22:	4555      	cmp	r5, sl
 8001c24:	d227      	bcs.n	8001c76 <ibqReadTimeout+0xd6>
 8001c26:	f387 8811 	msr	BASEPRI, r7

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (ibqp->ptr == NULL) {
 8001c2a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c2c:	2900      	cmp	r1, #0
 8001c2e:	d1cc      	bne.n	8001bca <ibqReadTimeout+0x2a>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001c30:	9b00      	ldr	r3, [sp, #0]
 8001c32:	3303      	adds	r3, #3
 8001c34:	d823      	bhi.n	8001c7e <ibqReadTimeout+0xde>
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <ibqReadTimeout+0x100>)
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001c38:	9a01      	ldr	r2, [sp, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	1ad3      	subs	r3, r2, r3

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001c3e:	4599      	cmp	r9, r3
 8001c40:	d32a      	bcc.n	8001c98 <ibqReadTimeout+0xf8>
          osalSysUnlock();
          return r;
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
 8001c42:	4619      	mov	r1, r3
 8001c44:	4620      	mov	r0, r4
 8001c46:	f7ff ff53 	bl	8001af0 <ibqGetFullBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001c4a:	b9f0      	cbnz	r0, 8001c8a <ibqReadTimeout+0xea>
 8001c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001c4e:	e7bc      	b.n	8001bca <ibqReadTimeout+0x2a>
      bp        += 64U;
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
 8001c50:	4630      	mov	r0, r6
 8001c52:	465a      	mov	r2, fp
 8001c54:	f7ff f844 	bl	8000ce0 <memcpy>
      bp        += size;
      ibqp->ptr += size;
 8001c58:	6a63      	ldr	r3, [r4, #36]	; 0x24
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c5a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
      ibqp->ptr += size;
 8001c5c:	445b      	add	r3, fp
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c5e:	429a      	cmp	r2, r3
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
      ibqp->ptr += size;
      r         += size;
 8001c60:	445d      	add	r5, fp
      ibqp->ptr += 64U;
      r         += 64U;
    }
    else {
      memcpy(bp, ibqp->ptr, size);
      bp        += size;
 8001c62:	445e      	add	r6, fp
      ibqp->ptr += size;
 8001c64:	6263      	str	r3, [r4, #36]	; 0x24
      r         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (ibqp->ptr >= ibqp->top) {
 8001c66:	d8da      	bhi.n	8001c1e <ibqReadTimeout+0x7e>
      ibqReleaseEmptyBufferS(ibqp);
 8001c68:	4620      	mov	r0, r4
 8001c6a:	f7ff ff59 	bl	8001b20 <ibqReleaseEmptyBufferS>
 8001c6e:	f388 8811 	msr	BASEPRI, r8
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (r >= n) {
 8001c72:	4555      	cmp	r5, sl
 8001c74:	d3d7      	bcc.n	8001c26 <ibqReadTimeout+0x86>
      return r;
    }
    osalSysLock();
  }
}
 8001c76:	4628      	mov	r0, r5
 8001c78:	b003      	add	sp, #12
 8001c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4649      	mov	r1, r9
 8001c82:	f7ff ff35 	bl	8001af0 <ibqGetFullBufferTimeoutS>
        }
        msg = ibqGetFullBufferTimeoutS(ibqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001c86:	2800      	cmp	r0, #0
 8001c88:	d0e0      	beq.n	8001c4c <ibqReadTimeout+0xac>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
      return r;
    }
    osalSysLock();
  }
}
 8001c90:	4628      	mov	r0, r5
 8001c92:	b003      	add	sp, #12
 8001c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c98:	f381 8811 	msr	BASEPRI, r1
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return r;
 8001c9c:	e7eb      	b.n	8001c76 <ibqReadTimeout+0xd6>
 8001c9e:	bf00      	nop
 8001ca0:	20000c70 	.word	0x20000c70
	...

08001cb0 <obqObjectInit>:
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 8001cb0:	b4f0      	push	{r4, r5, r6, r7}

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001cb2:	3204      	adds	r2, #4
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 8001cb4:	2400      	movs	r4, #0

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001cb6:	fb02 1703 	mla	r7, r2, r3, r1
 *
 * @init
 */
void obqObjectInit(output_buffers_queue_t *obqp, uint8_t *bp,
                   size_t size, size_t n,
                   bqnotify_t onfy, void *link) {
 8001cba:	9e04      	ldr	r6, [sp, #16]
 8001cbc:	9d05      	ldr	r5, [sp, #20]

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
  obqp->brdptr   = bp;
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
 8001cbe:	6147      	str	r7, [r0, #20]
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
 8001cc0:	62c6      	str	r6, [r0, #44]	; 0x2c
  obqp->link     = link;
 8001cc2:	6305      	str	r5, [r0, #48]	; 0x30
  obqp->bwrptr   = bp;
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
  obqp->bn       = n;
  obqp->buffers  = bp;
  obqp->ptr      = NULL;
 8001cc4:	6244      	str	r4, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001cc6:	6284      	str	r4, [r0, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->p_next = (thread_t *)tqp;
 8001cc8:	6000      	str	r0, [r0, #0]
  tqp->p_prev = (thread_t *)tqp;
 8001cca:	6040      	str	r0, [r0, #4]
                   bqnotify_t onfy, void *link) {

  osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));

  osalThreadQueueObjectInit(&obqp->waiting);
  obqp->bcounter = n;
 8001ccc:	6083      	str	r3, [r0, #8]
  obqp->brdptr   = bp;
 8001cce:	6101      	str	r1, [r0, #16]
  obqp->bwrptr   = bp;
 8001cd0:	60c1      	str	r1, [r0, #12]
  obqp->btop     = bp + ((size + sizeof (size_t)) * n);
  obqp->bsize    = size + sizeof (size_t);
 8001cd2:	6182      	str	r2, [r0, #24]
  obqp->bn       = n;
 8001cd4:	61c3      	str	r3, [r0, #28]
  obqp->buffers  = bp;
 8001cd6:	6201      	str	r1, [r0, #32]
  obqp->ptr      = NULL;
  obqp->top      = NULL;
  obqp->notify   = onfy;
  obqp->link     = link;
}
 8001cd8:	bcf0      	pop	{r4, r5, r6, r7}
 8001cda:	4770      	bx	lr
 8001cdc:	0000      	movs	r0, r0
	...

08001ce0 <obqResetI>:
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
 8001ce0:	6a01      	ldr	r1, [r0, #32]
 8001ce2:	6101      	str	r1, [r0, #16]
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqResetI(output_buffers_queue_t *obqp) {
 8001ce4:	b410      	push	{r4}
  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
  obqp->ptr      = NULL;
 8001ce6:	2200      	movs	r2, #0
 */
void obqResetI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();

  obqp->bcounter = bqSizeX(obqp);
 8001ce8:	69c4      	ldr	r4, [r0, #28]
 8001cea:	6084      	str	r4, [r0, #8]
  obqp->brdptr   = obqp->buffers;
  obqp->bwrptr   = obqp->buffers;
 8001cec:	60c1      	str	r1, [r0, #12]
  obqp->ptr      = NULL;
 8001cee:	6242      	str	r2, [r0, #36]	; 0x24
  obqp->top      = NULL;
 8001cf0:	6282      	str	r2, [r0, #40]	; 0x28
 *
 * @iclass
 */
static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueAllI(tqp, msg);
 8001cf2:	f06f 0101 	mvn.w	r1, #1
  osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
}
 8001cf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cfa:	f7ff bc41 	b.w	8001580 <chThdDequeueAllI>
 8001cfe:	bf00      	nop

08001d00 <obqGetFullBufferI>:
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001d00:	6903      	ldr	r3, [r0, #16]
 8001d02:	68c2      	ldr	r2, [r0, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d004      	beq.n	8001d12 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f850 3b04 	ldr.w	r3, [r0], #4
 8001d0e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001d10:	4770      	bx	lr
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001d12:	6882      	ldr	r2, [r0, #8]
 8001d14:	2a00      	cmp	r2, #0
 8001d16:	d0f7      	beq.n	8001d08 <obqGetFullBufferI+0x8>
    return NULL;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4770      	bx	lr
 8001d1c:	0000      	movs	r0, r0
	...

08001d20 <obqReleaseEmptyBufferI>:
 *
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 *
 * @iclass
 */
void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 8001d20:	b410      	push	{r4}
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001d22:	6983      	ldr	r3, [r0, #24]
 8001d24:	6904      	ldr	r4, [r0, #16]
  if (obqp->brdptr >= obqp->btop) {
 8001d26:	6941      	ldr	r1, [r0, #20]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001d28:	6882      	ldr	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
 8001d2a:	4423      	add	r3, r4
  if (obqp->brdptr >= obqp->btop) {
 8001d2c:	428b      	cmp	r3, r1
  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
  obqp->brdptr += obqp->bsize;
 8001d2e:	6103      	str	r3, [r0, #16]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001d30:	f102 0201 	add.w	r2, r2, #1
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001d34:	bf28      	it	cs
 8001d36:	6a03      	ldrcs	r3, [r0, #32]

  osalDbgCheckClassI();
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");

  /* Freeing a buffer slot in the queue.*/
  obqp->bcounter++;
 8001d38:	6082      	str	r2, [r0, #8]
  obqp->brdptr += obqp->bsize;
  if (obqp->brdptr >= obqp->btop) {
    obqp->brdptr = obqp->buffers;
 8001d3a:	bf28      	it	cs
 8001d3c:	6103      	strcs	r3, [r0, #16]
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8001d3e:	2100      	movs	r1, #0
  }

  /* Waking up one waiting thread, if any.*/
  osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
}
 8001d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d44:	f7ff bc0c 	b.w	8001560 <chThdDequeueNextI>
	...

08001d50 <obqGetEmptyBufferTimeoutS>:
   * @retval MSG_RESET    if the queue has been reset.
   *
   * @sclass
   */
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {
 8001d50:	b538      	push	{r3, r4, r5, lr}
 8001d52:	4604      	mov	r4, r0
 8001d54:	460d      	mov	r5, r1

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001d56:	e003      	b.n	8001d60 <obqGetEmptyBufferTimeoutS+0x10>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              systime_t time) {

  return chThdEnqueueTimeoutS(tqp, time);
 8001d58:	f7ff fbea 	bl	8001530 <chThdEnqueueTimeoutS>
    msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
    if (msg < MSG_OK) {
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	db0b      	blt.n	8001d78 <obqGetEmptyBufferTimeoutS+0x28>
  msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
                                  systime_t timeout) {

  osalDbgCheckClassS();

  while (obqIsFullI(obqp)) {
 8001d60:	68a3      	ldr	r3, [r4, #8]
 8001d62:	4620      	mov	r0, r4
 8001d64:	4629      	mov	r1, r5
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f6      	beq.n	8001d58 <obqGetEmptyBufferTimeoutS+0x8>
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001d6a:	68e2      	ldr	r2, [r4, #12]
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001d6c:	69a3      	ldr	r3, [r4, #24]
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001d6e:	1d11      	adds	r1, r2, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001d70:	4413      	add	r3, r2
  }

  osalDbgAssert(!obqIsFullI(obqp), "still full");

  /* Setting up the "current" buffer and its boundary.*/
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 8001d72:	6261      	str	r1, [r4, #36]	; 0x24
  obqp->top = obqp->bwrptr + obqp->bsize;
 8001d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d76:	2000      	movs	r0, #0

  return MSG_OK;
}
 8001d78:	bd38      	pop	{r3, r4, r5, pc}
 8001d7a:	bf00      	nop
 8001d7c:	0000      	movs	r0, r0
	...

08001d80 <obqPostFullBufferS>:
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8001d80:	b430      	push	{r4, r5}
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001d82:	68c4      	ldr	r4, [r0, #12]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 8001d84:	6945      	ldr	r5, [r0, #20]
  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 8001d86:	6021      	str	r1, [r4, #0]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001d88:	6983      	ldr	r3, [r0, #24]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001d8a:	6882      	ldr	r2, [r0, #8]
  obqp->bwrptr += obqp->bsize;
 8001d8c:	4423      	add	r3, r4
  if (obqp->bwrptr >= obqp->btop) {
 8001d8e:	42ab      	cmp	r3, r5
  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
 8001d90:	60c3      	str	r3, [r0, #12]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
 8001d92:	bf24      	itt	cs
 8001d94:	6a03      	ldrcs	r3, [r0, #32]
 8001d96:	60c3      	strcs	r3, [r0, #12]

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001d98:	3a01      	subs	r2, #1

  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001d9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
 8001d9c:	6082      	str	r2, [r0, #8]
  if (obqp->bwrptr >= obqp->btop) {
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 8001d9e:	2200      	movs	r2, #0
 8001da0:	6242      	str	r2, [r0, #36]	; 0x24

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 8001da2:	b10b      	cbz	r3, 8001da8 <obqPostFullBufferS+0x28>
    obqp->notify(obqp);
  }
}
 8001da4:	bc30      	pop	{r4, r5}
  /* No "current" buffer.*/
  obqp->ptr = NULL;

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
    obqp->notify(obqp);
 8001da6:	4718      	bx	r3
  }
}
 8001da8:	bc30      	pop	{r4, r5}
 8001daa:	4770      	bx	lr
 8001dac:	0000      	movs	r0, r0
	...

08001db0 <obqPutTimeout>:
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
                    systime_t timeout) {
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	2320      	movs	r3, #32
 8001db4:	460e      	mov	r6, r1
 8001db6:	4604      	mov	r4, r0
 8001db8:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
 8001dbc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001dbe:	b19d      	cbz	r5, 8001de8 <obqPutTimeout+0x38>
      return msg;
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
 8001dc0:	702e      	strb	r6, [r5, #0]
  obqp->ptr++;
 8001dc2:	6a63      	ldr	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001dc4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001dc6:	3301      	adds	r3, #1

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001dc8:	4293      	cmp	r3, r2
    }
  }

  /* Writing the byte to the buffer.*/
  *obqp->ptr = b;
  obqp->ptr++;
 8001dca:	6263      	str	r3, [r4, #36]	; 0x24

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
 8001dcc:	d203      	bcs.n	8001dd6 <obqPutTimeout+0x26>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f380 8811 	msr	BASEPRI, r0
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
  }

  osalSysUnlock();
  return MSG_OK;
}
 8001dd4:	bd70      	pop	{r4, r5, r6, pc}
  obqp->ptr++;

  /* If the current buffer has been fully written then it is posted as
     full in the queue.*/
  if (obqp->ptr >= obqp->top) {
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001dd6:	69a1      	ldr	r1, [r4, #24]
 8001dd8:	4620      	mov	r0, r4
 8001dda:	3904      	subs	r1, #4
 8001ddc:	f7ff ffd0 	bl	8001d80 <obqPostFullBufferS>
 8001de0:	2000      	movs	r0, #0
 8001de2:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();
  return MSG_OK;
}
 8001de6:	bd70      	pop	{r4, r5, r6, pc}

  osalSysLock();

  /* This condition indicates that a new buffer must be acquired.*/
  if (obqp->ptr == NULL) {
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001de8:	4611      	mov	r1, r2
 8001dea:	f7ff ffb1 	bl	8001d50 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001dee:	b908      	cbnz	r0, 8001df4 <obqPutTimeout+0x44>
 8001df0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8001df2:	e7e5      	b.n	8001dc0 <obqPutTimeout+0x10>
 8001df4:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlock();
      return msg;
 8001df8:	bd70      	pop	{r4, r5, r6, pc}
 8001dfa:	bf00      	nop
 8001dfc:	0000      	movs	r0, r0
	...

08001e00 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
 8001e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e04:	4604      	mov	r4, r0
 8001e06:	b083      	sub	sp, #12
 8001e08:	4692      	mov	sl, r2
 8001e0a:	4698      	mov	r8, r3
 8001e0c:	2620      	movs	r6, #32
 8001e0e:	f386 8811 	msr	BASEPRI, r6
 8001e12:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <obqWriteTimeout+0xfc>)

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001e14:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001e18:	4443      	add	r3, r8
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, systime_t timeout) {
  size_t w = 0;
 8001e1a:	2500      	movs	r5, #0
  systime_t deadline;

  osalSysLock();

  /* Time window for the whole operation.*/
  deadline = osalOsGetSystemTimeX() + timeout;
 8001e1c:	9301      	str	r3, [sp, #4]
    if (obqp->ptr == NULL) {
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001e1e:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	462f      	mov	r7, r5
 8001e26:	4689      	mov	r9, r1

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001e28:	b388      	cbz	r0, 8001e8e <obqWriteTimeout+0x8e>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001e2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (size > (n - w)) {
 8001e2c:	ebc5 0b0a 	rsb	fp, r5, sl
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8001e30:	1a12      	subs	r2, r2, r0
 8001e32:	4593      	cmp	fp, r2
 8001e34:	bf28      	it	cs
 8001e36:	4693      	movcs	fp, r2
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001e38:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8001e3c:	4649      	mov	r1, r9
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
 8001e3e:	d935      	bls.n	8001eac <obqWriteTimeout+0xac>
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
 8001e40:	f109 0340 	add.w	r3, r9, #64	; 0x40
 8001e44:	f8d1 c000 	ldr.w	ip, [r1]
 8001e48:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001e4c:	688a      	ldr	r2, [r1, #8]
 8001e4e:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8001e52:	f8c0 900c 	str.w	r9, [r0, #12]
 8001e56:	3110      	adds	r1, #16
 8001e58:	4299      	cmp	r1, r3
 8001e5a:	f8c0 c000 	str.w	ip, [r0]
 8001e5e:	f8c0 e004 	str.w	lr, [r0, #4]
 8001e62:	6082      	str	r2, [r0, #8]
 8001e64:	f100 0010 	add.w	r0, r0, #16
 8001e68:	d1ec      	bne.n	8001e44 <obqWriteTimeout+0x44>
      bp        += 64U;
      obqp->ptr += 64U;
 8001e6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
 8001e6c:	4689      	mov	r9, r1
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001e6e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
 8001e70:	3240      	adds	r2, #64	; 0x40
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001e72:	4291      	cmp	r1, r2
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
      w         += 64U;
 8001e74:	f105 0540 	add.w	r5, r5, #64	; 0x40
       this impacts throughput however.*/
    if (size > 64U) {
      /* Giving the compiler a chance to optimize for a fixed size move.*/
      memcpy(obqp->ptr, bp, 64U);
      bp        += 64U;
      obqp->ptr += 64U;
 8001e78:	6262      	str	r2, [r4, #36]	; 0x24
      obqp->ptr += size;
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001e7a:	d922      	bls.n	8001ec2 <obqWriteTimeout+0xc2>
 8001e7c:	f387 8811 	msr	BASEPRI, r7
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8001e80:	4555      	cmp	r5, sl
 8001e82:	d227      	bcs.n	8001ed4 <obqWriteTimeout+0xd4>
 8001e84:	f386 8811 	msr	BASEPRI, r6

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8001e88:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d1cd      	bne.n	8001e2a <obqWriteTimeout+0x2a>
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
 8001e8e:	9b00      	ldr	r3, [sp, #0]
 8001e90:	3303      	adds	r3, #3
 8001e92:	d823      	bhi.n	8001edc <obqWriteTimeout+0xdc>
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <obqWriteTimeout+0xfc>)
 8001e96:	6a99      	ldr	r1, [r3, #40]	; 0x28
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
      }
      else {
        systime_t next_timeout = deadline - osalOsGetSystemTimeX();
 8001e98:	9b01      	ldr	r3, [sp, #4]
 8001e9a:	1a59      	subs	r1, r3, r1

        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
 8001e9c:	4588      	cmp	r8, r1
 8001e9e:	d32a      	bcc.n	8001ef6 <obqWriteTimeout+0xf6>
          osalSysUnlock();
          return w;
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff55 	bl	8001d50 <obqGetEmptyBufferTimeoutS>
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001ea6:	b9f8      	cbnz	r0, 8001ee8 <obqWriteTimeout+0xe8>
 8001ea8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001eaa:	e7be      	b.n	8001e2a <obqWriteTimeout+0x2a>
      bp        += 64U;
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 8001eac:	465a      	mov	r2, fp
 8001eae:	f7fe ff17 	bl	8000ce0 <memcpy>
      bp        += size;
      obqp->ptr += size;
 8001eb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001eb4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
      obqp->ptr += size;
 8001eb6:	445a      	add	r2, fp
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001eb8:	4291      	cmp	r1, r2
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
      obqp->ptr += size;
      w         += size;
 8001eba:	445d      	add	r5, fp
      obqp->ptr += 64U;
      w         += 64U;
    }
    else {
      memcpy(obqp->ptr, bp, size);
      bp        += size;
 8001ebc:	44d9      	add	r9, fp
      obqp->ptr += size;
 8001ebe:	6262      	str	r2, [r4, #36]	; 0x24
      w         += size;
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 8001ec0:	d8dc      	bhi.n	8001e7c <obqWriteTimeout+0x7c>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001ec2:	69a1      	ldr	r1, [r4, #24]
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	3904      	subs	r1, #4
 8001ec8:	f7ff ff5a 	bl	8001d80 <obqPostFullBufferS>
 8001ecc:	f387 8811 	msr	BASEPRI, r7
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 8001ed0:	4555      	cmp	r5, sl
 8001ed2:	d3d7      	bcc.n	8001e84 <obqWriteTimeout+0x84>
      return w;
    }
    osalSysLock();
  }
}
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	b003      	add	sp, #12
 8001ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      msg_t msg;

      /* TIME_INFINITE and TIME_IMMEDIATE are handled differently, no
         deadline.*/
      if ((timeout == TIME_INFINITE) || (timeout == TIME_IMMEDIATE)) {
        msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001edc:	4620      	mov	r0, r4
 8001ede:	4641      	mov	r1, r8
 8001ee0:	f7ff ff36 	bl	8001d50 <obqGetEmptyBufferTimeoutS>
        }
        msg = obqGetEmptyBufferTimeoutS(obqp, next_timeout);
      }

      /* Anything except MSG_OK interrupts the operation.*/
      if (msg != MSG_OK) {
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d0df      	beq.n	8001ea8 <obqWriteTimeout+0xa8>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f383 8811 	msr	BASEPRI, r3
    if (w >= n) {
      return w;
    }
    osalSysLock();
  }
}
 8001eee:	4628      	mov	r0, r5
 8001ef0:	b003      	add	sp, #12
 8001ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ef6:	f380 8811 	msr	BASEPRI, r0
        /* Handling the case where the system time went past the deadline,
           in this case next becomes a very high number because the system
           time is an unsigned type.*/
        if (next_timeout > timeout) {
          osalSysUnlock();
          return w;
 8001efa:	e7eb      	b.n	8001ed4 <obqWriteTimeout+0xd4>
 8001efc:	20000c70 	.word	0x20000c70

08001f00 <obqTryFlushI>:

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001f00:	68c2      	ldr	r2, [r0, #12]
 8001f02:	6903      	ldr	r3, [r0, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <obqTryFlushI+0xc>
      obqp->ptr = NULL;

      return true;
    }
  }
  return false;
 8001f08:	2000      	movs	r0, #0
 8001f0a:	4770      	bx	lr

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8001f0c:	6883      	ldr	r3, [r0, #8]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0fa      	beq.n	8001f08 <obqTryFlushI+0x8>
 8001f12:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0f7      	beq.n	8001f08 <obqTryFlushI+0x8>
 8001f18:	3b04      	subs	r3, #4
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	d0f4      	beq.n	8001f08 <obqTryFlushI+0x8>
 * @retval false        if no new filled buffer has been posted to the queue.
 * @retval true         if a new filled buffer has been posted to the queue.
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {
 8001f1e:	b410      	push	{r4}
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));

    if (size > 0U) {

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8001f20:	6013      	str	r3, [r2, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001f22:	6983      	ldr	r3, [r0, #24]
      if (obqp->bwrptr >= obqp->btop) {
 8001f24:	6944      	ldr	r4, [r0, #20]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001f26:	6881      	ldr	r1, [r0, #8]
      obqp->bwrptr += obqp->bsize;
 8001f28:	441a      	add	r2, r3
      if (obqp->bwrptr >= obqp->btop) {
 8001f2a:	42a2      	cmp	r2, r4
        obqp->bwrptr = obqp->buffers;
 8001f2c:	bf28      	it	cs
 8001f2e:	6a03      	ldrcs	r3, [r0, #32]
      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 8001f30:	60c2      	str	r2, [r0, #12]

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001f32:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
      obqp->bwrptr += obqp->bsize;
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
 8001f36:	bf28      	it	cs
 8001f38:	60c3      	strcs	r3, [r0, #12]
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001f3a:	2300      	movs	r3, #0

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8001f3c:	6081      	str	r1, [r0, #8]
      if (obqp->bwrptr >= obqp->btop) {
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8001f3e:	6243      	str	r3, [r0, #36]	; 0x24

      return true;
    }
  }
  return false;
}
 8001f40:	f85d 4b04 	ldr.w	r4, [sp], #4
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;

      return true;
 8001f44:	2001      	movs	r0, #1
    }
  }
  return false;
}
 8001f46:	4770      	bx	lr
	...

08001f50 <adcInit>:
 *
 * @init
 */
void adcInit(void) {

  adc_lld_init();
 8001f50:	f001 b91e 	b.w	8003190 <adc_lld_init>
	...

08001f60 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8001f60:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001f62:	2201      	movs	r2, #1
 8001f64:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8001f66:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8001f68:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8001f6a:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8001f6c:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001f6e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8001f70:	3018      	adds	r0, #24
 8001f72:	f7ff bb6d 	b.w	8001650 <chMtxObjectInit>
 8001f76:	bf00      	nop
	...

08001f80 <extInit>:
 *
 * @init
 */
void extInit(void) {

  ext_lld_init();
 8001f80:	f001 b9f6 	b.w	8003370 <ext_lld_init>
	...

08001f90 <extObjectInit>:
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001f90:	2201      	movs	r2, #1
  extp->config = NULL;
 8001f92:	2300      	movs	r3, #0
 *
 * @init
 */
void extObjectInit(EXTDriver *extp) {

  extp->state  = EXT_STOP;
 8001f94:	7002      	strb	r2, [r0, #0]
  extp->config = NULL;
 8001f96:	6043      	str	r3, [r0, #4]
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	0000      	movs	r0, r0
	...

08001fa0 <extStart>:
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] config    pointer to the @p EXTConfig object
 *
 * @api
 */
void extStart(EXTDriver *extp, const EXTConfig *config) {
 8001fa0:	b510      	push	{r4, lr}
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((extp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((extp->state == EXT_STOP) || (extp->state == EXT_ACTIVE),
                "invalid state");
  extp->config = config;
 8001faa:	6041      	str	r1, [r0, #4]
  ext_lld_start(extp);
 8001fac:	f001 fa58 	bl	8003460 <ext_lld_start>
  extp->state = EXT_ACTIVE;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	7023      	strb	r3, [r4, #0]
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f383 8811 	msr	BASEPRI, r3
 8001fba:	bd10      	pop	{r4, pc}
 8001fbc:	0000      	movs	r0, r0
	...

08001fc0 <extChannelEnable>:
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] channel   channel to be enabled
 *
 * @api
 */
void extChannelEnable(EXTDriver *extp, expchannel_t channel) {
 8001fc0:	b508      	push	{r3, lr}
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((extp->state == EXT_ACTIVE) &&
                ((extp->config->channels[channel].mode &
                  EXT_CH_MODE_EDGES_MASK) != EXT_CH_MODE_DISABLED),
                "invalid state");
  extChannelEnableI(extp, channel);
 8001fc8:	f001 f9da 	bl	8003380 <ext_lld_channel_enable>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f383 8811 	msr	BASEPRI, r3
 8001fd2:	bd08      	pop	{r3, pc}
	...

08001fe0 <i2cInit>:
 *
 * @init
 */
void i2cInit(void) {

  i2c_lld_init();
 8001fe0:	f001 be8e 	b.w	8003d00 <i2c_lld_init>
	...

08001ff0 <i2cObjectInit>:
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001ff0:	2201      	movs	r2, #1
  i2cp->config = NULL;
 8001ff2:	2300      	movs	r3, #0
 *
 * @init
 */
void i2cObjectInit(I2CDriver *i2cp) {

  i2cp->state  = I2C_STOP;
 8001ff4:	7002      	strb	r2, [r0, #0]
  i2cp->config = NULL;
 8001ff6:	6043      	str	r3, [r0, #4]
 8001ff8:	300c      	adds	r0, #12
 8001ffa:	f7ff bb29 	b.w	8001650 <chMtxObjectInit>
 8001ffe:	bf00      	nop

08002000 <i2cStart>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] config    pointer to the @p I2CConfig object
 *
 * @api
 */
void i2cStart(I2CDriver *i2cp, const I2CConfig *config) {
 8002000:	b510      	push	{r4, lr}
 8002002:	2320      	movs	r3, #32
 8002004:	4604      	mov	r4, r0
 8002006:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((i2cp != NULL) && (config != NULL));
  osalDbgAssert((i2cp->state == I2C_STOP) || (i2cp->state == I2C_READY) ||
                (i2cp->state == I2C_LOCKED), "invalid state");

  osalSysLock();
  i2cp->config = config;
 800200a:	6041      	str	r1, [r0, #4]
  i2c_lld_start(i2cp);
 800200c:	f001 fe90 	bl	8003d30 <i2c_lld_start>
  i2cp->state = I2C_READY;
 8002010:	2302      	movs	r3, #2
 8002012:	7023      	strb	r3, [r4, #0]
 8002014:	2300      	movs	r3, #0
 8002016:	f383 8811 	msr	BASEPRI, r3
 800201a:	bd10      	pop	{r4, pc}
 800201c:	0000      	movs	r0, r0
	...

08002020 <i2cMasterTransmitTimeout>:
                               i2caddr_t addr,
                               const uint8_t *txbuf,
                               size_t txbytes,
                               uint8_t *rxbuf,
                               size_t rxbytes,
                               systime_t timeout) {
 8002020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002022:	b085      	sub	sp, #20
 8002024:	4604      	mov	r4, r0
 8002026:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002028:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800202a:	f04f 0e20 	mov.w	lr, #32
 800202e:	f38e 8811 	msr	BASEPRI, lr

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
  i2cp->state = I2C_ACTIVE_TX;
 8002032:	f04f 0e03 	mov.w	lr, #3
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002036:	9601      	str	r6, [sp, #4]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002038:	2500      	movs	r5, #0
  i2cp->state = I2C_ACTIVE_TX;
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 800203a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800203c:	9700      	str	r7, [sp, #0]
 800203e:	9602      	str	r6, [sp, #8]
               (timeout != TIME_IMMEDIATE));

  osalDbgAssert(i2cp->state == I2C_READY, "not ready");

  osalSysLock();
  i2cp->errors = I2C_NO_ERROR;
 8002040:	6085      	str	r5, [r0, #8]
  i2cp->state = I2C_ACTIVE_TX;
 8002042:	f880 e000 	strb.w	lr, [r0]
  rdymsg = i2c_lld_master_transmit_timeout(i2cp, addr, txbuf, txbytes,
 8002046:	f001 ff33 	bl	8003eb0 <i2c_lld_master_transmit_timeout>
                                           rxbuf, rxbytes, timeout);
  if (rdymsg == MSG_TIMEOUT) {
 800204a:	1c43      	adds	r3, r0, #1
    i2cp->state = I2C_LOCKED;
 800204c:	bf0c      	ite	eq
 800204e:	2305      	moveq	r3, #5
  }
  else {
    i2cp->state = I2C_READY;
 8002050:	2302      	movne	r3, #2
 8002052:	7023      	strb	r3, [r4, #0]
 8002054:	2300      	movs	r3, #0
 8002056:	f383 8811 	msr	BASEPRI, r3
  }
  osalSysUnlock();
  return rdymsg;
}
 800205a:	b005      	add	sp, #20
 800205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205e:	bf00      	nop

08002060 <i2cAcquireBus>:
 * @api
 */
static inline void osalMutexLock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxLock(mp);
 8002060:	300c      	adds	r0, #12
 8002062:	f7ff bb65 	b.w	8001730 <chMtxLock>
 8002066:	bf00      	nop
	...

08002070 <i2cReleaseBus>:
 * @api
 */
static inline void osalMutexUnlock(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxUnlock(mp);
 8002070:	300c      	adds	r0, #12
 8002072:	f7ff bb6d 	b.w	8001750 <chMtxUnlock>
 8002076:	bf00      	nop
	...

08002080 <pwmInit>:
 *
 * @init
 */
void pwmInit(void) {

  pwm_lld_init();
 8002080:	f002 be5e 	b.w	8004d40 <pwm_lld_init>
	...

08002090 <pwmObjectInit>:
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
  pwmp->config   = NULL;
 8002090:	2300      	movs	r3, #0
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {

  pwmp->state    = PWM_STOP;
 8002092:	2201      	movs	r2, #1
 8002094:	7002      	strb	r2, [r0, #0]
  pwmp->config   = NULL;
 8002096:	6043      	str	r3, [r0, #4]
  pwmp->enabled  = 0;
 8002098:	60c3      	str	r3, [r0, #12]
  pwmp->channels = 0;
 800209a:	7403      	strb	r3, [r0, #16]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop

080020a0 <pwmStart>:
 * @param[in] pwmp      pointer to a @p PWMDriver object
 * @param[in] config    pointer to a @p PWMConfig object
 *
 * @api
 */
void pwmStart(PWMDriver *pwmp, const PWMConfig *config) {
 80020a0:	b510      	push	{r4, lr}
 80020a2:	2320      	movs	r3, #32
 80020a4:	4604      	mov	r4, r0
 80020a6:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
 80020aa:	684b      	ldr	r3, [r1, #4]
 80020ac:	6083      	str	r3, [r0, #8]
  osalDbgCheck((pwmp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
 80020ae:	6041      	str	r1, [r0, #4]
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
 80020b0:	f002 fe56 	bl	8004d60 <pwm_lld_start>
  pwmp->enabled = 0;
  pwmp->state = PWM_READY;
 80020b4:	2202      	movs	r2, #2
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 80020b6:	2300      	movs	r3, #0
  pwmp->state = PWM_READY;
 80020b8:	7022      	strb	r2, [r4, #0]
  osalDbgAssert((pwmp->state == PWM_STOP) || (pwmp->state == PWM_READY),
                "invalid state");
  pwmp->config = config;
  pwmp->period = config->period;
  pwm_lld_start(pwmp);
  pwmp->enabled = 0;
 80020ba:	60e3      	str	r3, [r4, #12]
 80020bc:	f383 8811 	msr	BASEPRI, r3
 80020c0:	bd10      	pop	{r4, pc}
 80020c2:	bf00      	nop
	...

080020d0 <pwmEnableChannel>:
 *
 * @api
 */
void pwmEnableChannel(PWMDriver *pwmp,
                      pwmchannel_t channel,
                      pwmcnt_t width) {
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	2320      	movs	r3, #32
 80020d4:	f383 8811 	msr	BASEPRI, r3

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
 80020d8:	2301      	movs	r3, #1
 80020da:	68c5      	ldr	r5, [r0, #12]
 80020dc:	408b      	lsls	r3, r1
 80020de:	432b      	orrs	r3, r5
 80020e0:	60c3      	str	r3, [r0, #12]
 80020e2:	f002 feb5 	bl	8004e50 <pwm_lld_enable_channel>
 80020e6:	2300      	movs	r3, #0
 80020e8:	f383 8811 	msr	BASEPRI, r3
 80020ec:	bd70      	pop	{r4, r5, r6, pc}
 80020ee:	bf00      	nop

080020f0 <obnotify>:
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 80020f0:	b510      	push	{r4, lr}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 80020f2:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80020f4:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 80020f8:	6813      	ldr	r3, [r2, #0]
 80020fa:	7819      	ldrb	r1, [r3, #0]
 80020fc:	2904      	cmp	r1, #4
/**
 * @brief   Notification of filled buffer inserted into the output buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void obnotify(io_buffers_queue_t *bqp) {
 80020fe:	b082      	sub	sp, #8
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002100:	d001      	beq.n	8002106 <obnotify+0x16>
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
    }
  }
}
 8002102:	b002      	add	sp, #8
 8002104:	bd10      	pop	{r4, pc}
  size_t n;
  SerialUSBDriver *sdup = bqGetLinkX(bqp);

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002106:	7a21      	ldrb	r1, [r4, #8]
 8002108:	2902      	cmp	r1, #2
 800210a:	d1fa      	bne.n	8002102 <obnotify+0x12>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800210c:	7911      	ldrb	r1, [r2, #4]
 800210e:	891a      	ldrh	r2, [r3, #8]
 8002110:	2301      	movs	r3, #1
 8002112:	408b      	lsls	r3, r1
 8002114:	4213      	tst	r3, r2
 8002116:	d1f4      	bne.n	8002102 <obnotify+0x12>
    /* Trying to get a full buffer.*/
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002118:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800211c:	a901      	add	r1, sp, #4
 800211e:	f7ff fdef 	bl	8001d00 <obqGetFullBufferI>
    if (buf != NULL) {
 8002122:	4602      	mov	r2, r0
 8002124:	2800      	cmp	r0, #0
 8002126:	d0ec      	beq.n	8002102 <obnotify+0x12>
      /* Buffer found, starting a new transaction.*/
      usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002128:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
 800212c:	9b01      	ldr	r3, [sp, #4]
 800212e:	6808      	ldr	r0, [r1, #0]
 8002130:	7909      	ldrb	r1, [r1, #4]
 8002132:	f000 faed 	bl	8002710 <usbStartTransmitI>
 8002136:	e7e4      	b.n	8002102 <obnotify+0x12>
	...

08002140 <ibnotify>:
/**
 * @brief   Notification of empty buffer released into the input buffers queue.
 *
 * @param[in] bqp       the buffers queue pointer.
 */
static void ibnotify(io_buffers_queue_t *bqp) {
 8002140:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8002142:	6b04      	ldr	r4, [r0, #48]	; 0x30

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8002144:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 8002148:	6813      	ldr	r3, [r2, #0]
 800214a:	7819      	ldrb	r1, [r3, #0]
 800214c:	2904      	cmp	r1, #4
 800214e:	d000      	beq.n	8002152 <ibnotify+0x12>
 8002150:	bd10      	pop	{r4, pc}
 8002152:	7a21      	ldrb	r1, [r4, #8]
 8002154:	2902      	cmp	r1, #2
 8002156:	d1fb      	bne.n	8002150 <ibnotify+0x10>
      (sdup->state != SDU_READY)) {
    return;
  }

  /* Checking if there is already a transaction ongoing on the endpoint.*/
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
 8002158:	7951      	ldrb	r1, [r2, #5]
 800215a:	895a      	ldrh	r2, [r3, #10]
 800215c:	2301      	movs	r3, #1
 800215e:	408b      	lsls	r3, r1
 8002160:	4213      	tst	r3, r2
 8002162:	d1f5      	bne.n	8002150 <ibnotify+0x10>
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8002164:	f104 000c 	add.w	r0, r4, #12
 8002168:	f7ff fc9a 	bl	8001aa0 <ibqGetEmptyBufferI>
    if (buf != NULL) {
 800216c:	2800      	cmp	r0, #0
 800216e:	d0ef      	beq.n	8002150 <ibnotify+0x10>
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8002170:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 8002174:	4602      	mov	r2, r0
 8002176:	7959      	ldrb	r1, [r3, #5]
 8002178:	6818      	ldr	r0, [r3, #0]
                       buf, SERIAL_USB_BUFFERS_SIZE);
    }
  }
}
 800217a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (!usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_out)) {
    /* Trying to get a free buffer.*/
    uint8_t *buf = ibqGetEmptyBufferI(&sdup->ibqueue);
    if (buf != NULL) {
      /* Buffer found, starting a new transaction.*/
      usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800217e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002182:	f000 baad 	b.w	80026e0 <usbStartReceiveI>
 8002186:	bf00      	nop
	...

08002190 <readt>:
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}

static size_t readt(void *ip, uint8_t *bp, size_t n, systime_t timeout) {
 8002190:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002192:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 8002196:	6824      	ldr	r4, [r4, #0]
 8002198:	7824      	ldrb	r4, [r4, #0]
 800219a:	2c04      	cmp	r4, #4
 800219c:	d003      	beq.n	80021a6 <readt+0x16>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
}
 800219e:	2000      	movs	r0, #0
 80021a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021a4:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80021a6:	300c      	adds	r0, #12
}
 80021a8:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80021ac:	f7ff bcf8 	b.w	8001ba0 <ibqReadTimeout>

080021b0 <writet>:
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
}

static size_t writet(void *ip, const uint8_t *bp, size_t n, systime_t timeout) {
 80021b0:	b410      	push	{r4}

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80021b2:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
 80021b6:	6824      	ldr	r4, [r4, #0]
 80021b8:	7824      	ldrb	r4, [r4, #0]
 80021ba:	2c04      	cmp	r4, #4
 80021bc:	d003      	beq.n	80021c6 <writet+0x16>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
}
 80021be:	2000      	movs	r0, #0
 80021c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80021c4:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80021c6:	3040      	adds	r0, #64	; 0x40
}
 80021c8:	f85d 4b04 	ldr.w	r4, [sp], #4

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 80021cc:	f7ff be18 	b.w	8001e00 <obqWriteTimeout>

080021d0 <gett>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
}

static msg_t gett(void *ip, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80021d0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d102      	bne.n	80021e2 <gett+0x12>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 80021dc:	300c      	adds	r0, #12
 80021de:	f7ff bcb7 	b.w	8001b50 <ibqGetTimeout>
}
 80021e2:	f06f 0001 	mvn.w	r0, #1
 80021e6:	4770      	bx	lr
	...

080021f0 <get>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
}

static msg_t get(void *ip) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 80021f0:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d104      	bne.n	8002206 <get+0x16>
    return MSG_RESET;
  }

  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80021fc:	300c      	adds	r0, #12
 80021fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002202:	f7ff bca5 	b.w	8001b50 <ibqGetTimeout>
}
 8002206:	f06f 0001 	mvn.w	r0, #1
 800220a:	4770      	bx	lr
 800220c:	0000      	movs	r0, r0
	...

08002210 <putt>:

static msg_t putt(void *ip, uint8_t b, systime_t timeout) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002210:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d102      	bne.n	8002222 <putt+0x12>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800221c:	3040      	adds	r0, #64	; 0x40
 800221e:	f7ff bdc7 	b.w	8001db0 <obqPutTimeout>
}
 8002222:	f06f 0001 	mvn.w	r0, #1
 8002226:	4770      	bx	lr
	...

08002230 <put>:
                        n, TIME_INFINITE);
}

static msg_t put(void *ip, uint8_t b) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002230:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b04      	cmp	r3, #4
 800223a:	d104      	bne.n	8002246 <put+0x16>
    return MSG_RESET;
  }

  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 800223c:	3040      	adds	r0, #64	; 0x40
 800223e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002242:	f7ff bdb5 	b.w	8001db0 <obqPutTimeout>
}
 8002246:	f06f 0001 	mvn.w	r0, #1
 800224a:	4770      	bx	lr
 800224c:	0000      	movs	r0, r0
	...

08002250 <read>:
                         n, TIME_INFINITE);
}

static size_t read(void *ip, uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002250:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b04      	cmp	r3, #4
 800225a:	d001      	beq.n	8002260 <read+0x10>
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
                        n, TIME_INFINITE);
}
 800225c:	2000      	movs	r0, #0
 800225e:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 8002260:	300c      	adds	r0, #12
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002266:	f7ff bc9b 	b.w	8001ba0 <ibqReadTimeout>
 800226a:	bf00      	nop
 800226c:	0000      	movs	r0, r0
	...

08002270 <write>:
 * Interface implementation.
 */

static size_t write(void *ip, const uint8_t *bp, size_t n) {

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
 8002270:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b04      	cmp	r3, #4
 800227a:	d001      	beq.n	8002280 <write+0x10>
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
                         n, TIME_INFINITE);
}
 800227c:	2000      	movs	r0, #0
 800227e:	4770      	bx	lr

  if (usbGetDriverStateI(((SerialUSBDriver *)ip)->config->usbp) != USB_ACTIVE) {
    return 0;
  }

  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8002280:	3040      	adds	r0, #64	; 0x40
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002286:	f7ff bdbb 	b.w	8001e00 <obqWriteTimeout>
 800228a:	bf00      	nop
 800228c:	0000      	movs	r0, r0
	...

08002290 <sduInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sduInit(void) {
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
	...

080022a0 <sduObjectInit>:
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80022a0:	b510      	push	{r4, lr}

  sdup->vmt = &vmt;
 80022a2:	4603      	mov	r3, r0
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <sduObjectInit+0x48>)
 80022a6:	f843 2b04 	str.w	r2, [r3], #4
 *
 * @param[out] sdup     pointer to a @p SerialUSBDriver structure
 *
 * @init
 */
void sduObjectInit(SerialUSBDriver *sdup) {
 80022aa:	b082      	sub	sp, #8
 80022ac:	4604      	mov	r4, r0

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80022ae:	2101      	movs	r1, #1
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 80022b0:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <sduObjectInit+0x4c>)
 80022b2:	9001      	str	r0, [sp, #4]
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->es_next = (event_listener_t *)esp;
 80022b4:	6043      	str	r3, [r0, #4]
 */
void sduObjectInit(SerialUSBDriver *sdup) {

  sdup->vmt = &vmt;
  osalEventObjectInit(&sdup->event);
  sdup->state = SDU_STOP;
 80022b6:	7201      	strb	r1, [r0, #8]
  ibqObjectInit(&sdup->ibqueue, sdup->ib,
 80022b8:	2302      	movs	r3, #2
 80022ba:	f104 0174 	add.w	r1, r4, #116	; 0x74
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	300c      	adds	r0, #12
 80022c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c6:	f7ff fbc3 	bl	8001a50 <ibqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                ibnotify, sdup);
  obqObjectInit(&sdup->obqueue, sdup->ob,
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <sduObjectInit+0x50>)
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	9401      	str	r4, [sp, #4]
 80022d0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80022d4:	f504 711f 	add.w	r1, r4, #636	; 0x27c
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	2302      	movs	r3, #2
 80022de:	f7ff fce7 	bl	8001cb0 <obqObjectInit>
                SERIAL_USB_BUFFERS_SIZE, SERIAL_USB_BUFFERS_NUMBER,
                obnotify, sdup);
}
 80022e2:	b002      	add	sp, #8
 80022e4:	bd10      	pop	{r4, pc}
 80022e6:	bf00      	nop
 80022e8:	08007830 	.word	0x08007830
 80022ec:	08002141 	.word	0x08002141
 80022f0:	080020f1 	.word	0x080020f1
	...

08002300 <sduStart>:
 * @param[in] config    the serial over USB driver configuration
 *
 * @api
 */
void sduStart(SerialUSBDriver *sdup, const SerialUSBConfig *config) {
  USBDriver *usbp = config->usbp;
 8002300:	680b      	ldr	r3, [r1, #0]
 8002302:	2220      	movs	r2, #32
 8002304:	f382 8811 	msr	BASEPRI, r2
  osalDbgCheck(sdup != NULL);

  osalSysLock();
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
                "invalid state");
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 8002308:	790a      	ldrb	r2, [r1, #4]
 800230a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800230e:	6190      	str	r0, [r2, #24]
  usbp->out_params[config->bulk_out - 1U] = sdup;
 8002310:	794a      	ldrb	r2, [r1, #5]
 8002312:	3209      	adds	r2, #9
 8002314:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  if (config->int_in > 0U) {
 8002318:	798a      	ldrb	r2, [r1, #6]
 800231a:	b112      	cbz	r2, 8002322 <sduStart+0x22>
    usbp->in_params[config->int_in - 1U]  = sdup;
 800231c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002320:	6198      	str	r0, [r3, #24]
  }
  sdup->config = config;
  sdup->state = SDU_READY;
 8002322:	2302      	movs	r3, #2
 8002324:	7203      	strb	r3, [r0, #8]
  usbp->in_params[config->bulk_in - 1U]   = sdup;
  usbp->out_params[config->bulk_out - 1U] = sdup;
  if (config->int_in > 0U) {
    usbp->in_params[config->int_in - 1U]  = sdup;
  }
  sdup->config = config;
 8002326:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
 800232a:	2300      	movs	r3, #0
 800232c:	f383 8811 	msr	BASEPRI, r3
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
	...

08002340 <sduDisconnectI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduDisconnectI(SerialUSBDriver *sdup) {
 8002340:	b510      	push	{r4, lr}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8002342:	2102      	movs	r1, #2
 8002344:	4604      	mov	r4, r0
 8002346:	3004      	adds	r0, #4
 8002348:	f7ff fa82 	bl	8001850 <chEvtBroadcastFlagsI>

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
 800234c:	f104 000c 	add.w	r0, r4, #12
 8002350:	f7ff fb96 	bl	8001a80 <ibqResetI>
  obqResetI(&sdup->obqueue);
 8002354:	f104 0040 	add.w	r0, r4, #64	; 0x40
}
 8002358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void sduDisconnectI(SerialUSBDriver *sdup) {

  /* Queues reset in order to signal the driver stop to the application.*/
  chnAddFlagsI(sdup, CHN_DISCONNECTED);
  ibqResetI(&sdup->ibqueue);
  obqResetI(&sdup->obqueue);
 800235c:	f7ff bcc0 	b.w	8001ce0 <obqResetI>

08002360 <sduConfigureHookI>:
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8002360:	b570      	push	{r4, r5, r6, lr}
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 8002362:	f100 050c 	add.w	r5, r0, #12
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduConfigureHookI(SerialUSBDriver *sdup) {
 8002366:	4604      	mov	r4, r0
  uint8_t *buf;

  ibqResetI(&sdup->ibqueue);
 8002368:	4628      	mov	r0, r5
 800236a:	f7ff fb89 	bl	8001a80 <ibqResetI>
  obqResetI(&sdup->obqueue);
 800236e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002372:	f7ff fcb5 	bl	8001ce0 <obqResetI>
 8002376:	1d20      	adds	r0, r4, #4
 8002378:	2101      	movs	r1, #1
 800237a:	f7ff fa69 	bl	8001850 <chEvtBroadcastFlagsI>
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 800237e:	4628      	mov	r0, r5
 8002380:	f7ff fb8e 	bl	8001aa0 <ibqGetEmptyBufferI>

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8002384:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
  ibqResetI(&sdup->ibqueue);
  obqResetI(&sdup->obqueue);
  chnAddFlagsI(sdup, CHN_CONNECTED);

  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 8002388:	4602      	mov	r2, r0

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800238a:	7959      	ldrb	r1, [r3, #5]
 800238c:	6818      	ldr	r0, [r3, #0]
                   buf, SERIAL_USB_BUFFERS_SIZE);
}
 800238e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* Starts the first OUT transaction immediately.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);

  osalDbgAssert(buf != NULL, "no free buffer");

  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8002392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002396:	f000 b9a3 	b.w	80026e0 <usbStartReceiveI>
 800239a:	bf00      	nop
 800239c:	0000      	movs	r0, r0
	...

080023a0 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 80023a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80023a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80023a8:	2b20      	cmp	r3, #32
 80023aa:	d001      	beq.n	80023b0 <sduRequestsHook+0x10>
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
      return true;
    default:
      return false;
 80023ac:	2000      	movs	r0, #0
    }
  }
  return false;
}
 80023ae:	4770      	bx	lr
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
    switch (usbp->setup[1]) {
 80023b0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80023b4:	2b21      	cmp	r3, #33	; 0x21
 80023b6:	d003      	beq.n	80023c0 <sduRequestsHook+0x20>
 80023b8:	2b22      	cmp	r3, #34	; 0x22
 80023ba:	d009      	beq.n	80023d0 <sduRequestsHook+0x30>
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d1f5      	bne.n	80023ac <sduRequestsHook+0xc>
    case CDC_GET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
      return true;
    case CDC_SET_LINE_CODING:
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <sduRequestsHook+0x3c>)
 80023c2:	6383      	str	r3, [r0, #56]	; 0x38
 80023c4:	2207      	movs	r2, #7
 80023c6:	2300      	movs	r3, #0
 80023c8:	63c2      	str	r2, [r0, #60]	; 0x3c
 80023ca:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 80023cc:	2001      	movs	r0, #1
 80023ce:	4770      	bx	lr
    case CDC_SET_CONTROL_LINE_STATE:
      /* Nothing to do, there are no control lines.*/
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80023d0:	2300      	movs	r3, #0
 80023d2:	6383      	str	r3, [r0, #56]	; 0x38
 80023d4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80023d6:	6403      	str	r3, [r0, #64]	; 0x40
      return true;
 80023d8:	2001      	movs	r0, #1
 80023da:	4770      	bx	lr
 80023dc:	20000800 	.word	0x20000800

080023e0 <sduSOFHookI>:
 */
void sduSOFHookI(SerialUSBDriver *sdup) {

  /* If the USB driver is not in the appropriate state then transactions
     must not be started.*/
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 80023e0:	f8d0 2484 	ldr.w	r2, [r0, #1156]	; 0x484
 80023e4:	6813      	ldr	r3, [r2, #0]
 80023e6:	7819      	ldrb	r1, [r3, #0]
 80023e8:	2904      	cmp	r1, #4
 80023ea:	d000      	beq.n	80023ee <sduSOFHookI+0xe>
 80023ec:	4770      	bx	lr
 80023ee:	7a01      	ldrb	r1, [r0, #8]
 80023f0:	2902      	cmp	r1, #2
 80023f2:	d1fb      	bne.n	80023ec <sduSOFHookI+0xc>
    return;
  }

  /* If there is already a transaction ongoing then another one cannot be
     started.*/
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80023f4:	7911      	ldrb	r1, [r2, #4]
 80023f6:	891a      	ldrh	r2, [r3, #8]
 80023f8:	2301      	movs	r3, #1
 80023fa:	408b      	lsls	r3, r1
 80023fc:	4213      	tst	r3, r2
 80023fe:	d1f5      	bne.n	80023ec <sduSOFHookI+0xc>
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8002400:	b530      	push	{r4, r5, lr}
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 8002402:	f100 0540 	add.w	r5, r0, #64	; 0x40
 *
 * @param[in] sdup      pointer to a @p SerialUSBDriver object
 *
 * @iclass
 */
void sduSOFHookI(SerialUSBDriver *sdup) {
 8002406:	b083      	sub	sp, #12
 8002408:	4604      	mov	r4, r0
    return;
  }

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
 800240a:	4628      	mov	r0, r5
 800240c:	f7ff fd78 	bl	8001f00 <obqTryFlushI>
 8002410:	b908      	cbnz	r0, 8002416 <sduSOFHookI+0x36>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
  }
}
 8002412:	b003      	add	sp, #12
 8002414:	bd30      	pop	{r4, r5, pc}

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002416:	a901      	add	r1, sp, #4
 8002418:	4628      	mov	r0, r5
 800241a:	f7ff fc71 	bl	8001d00 <obqGetFullBufferI>

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800241e:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
 8002422:	9b01      	ldr	r3, [sp, #4]

  /* Checking if there only a buffer partially filled, if so then it is
     enforced in the queue and transmitted.*/
  if (obqTryFlushI(&sdup->obqueue)) {
    size_t n;
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8002424:	4602      	mov	r2, r0

    osalDbgAssert(buf != NULL, "queue is empty");

    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8002426:	6808      	ldr	r0, [r1, #0]
 8002428:	7909      	ldrb	r1, [r1, #4]
 800242a:	f000 f971 	bl	8002710 <usbStartTransmitI>
 800242e:	e7f0      	b.n	8002412 <sduSOFHookI+0x32>

08002430 <sduDataTransmitted>:
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002430:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002432:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        IN endpoint number
 */
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8002436:	b083      	sub	sp, #12
  uint8_t *buf;
  size_t n;
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8002438:	699c      	ldr	r4, [r3, #24]

  if (sdup == NULL) {
 800243a:	b1ec      	cbz	r4, 8002478 <sduDataTransmitted+0x48>
 800243c:	460e      	mov	r6, r1
 800243e:	4605      	mov	r5, r0
 8002440:	2320      	movs	r3, #32
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800244a:	1d20      	adds	r0, r4, #4
 800244c:	2108      	movs	r1, #8
 800244e:	f7ff f9ff 	bl	8001850 <chEvtBroadcastFlagsI>

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	681b      	ldr	r3, [r3, #0]
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8002458:	3440      	adds	r4, #64	; 0x40

  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 800245a:	b9fb      	cbnz	r3, 800249c <sduDataTransmitted+0x6c>
    obqReleaseEmptyBufferI(&sdup->obqueue);
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800245c:	4620      	mov	r0, r4
 800245e:	a901      	add	r1, sp, #4
 8002460:	f7ff fc4e 	bl	8001d00 <obqGetFullBufferI>

  if (buf != NULL) {
 8002464:	4602      	mov	r2, r0
 8002466:	b148      	cbz	r0, 800247c <sduDataTransmitted+0x4c>
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
 8002468:	4628      	mov	r0, r5
 800246a:	4631      	mov	r1, r6
 800246c:	9b01      	ldr	r3, [sp, #4]
 800246e:	f000 f94f 	bl	8002710 <usbStartTransmitI>
 8002472:	2300      	movs	r3, #0
 8002474:	f383 8811 	msr	BASEPRI, r3
  else {
    /* Nothing to transmit.*/
  }

  osalSysUnlockFromISR();
}
 8002478:	b003      	add	sp, #12
 800247a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	2a00      	cmp	r2, #0
 8002484:	d0f5      	beq.n	8002472 <sduDataTransmitted+0x42>
           ((usbp->epc[ep]->in_state->txsize &
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8002486:	8a1b      	ldrh	r3, [r3, #16]
 8002488:	3b01      	subs	r3, #1
  if (buf != NULL) {
    /* The endpoint cannot be busy, we are in the context of the callback,
       so it is safe to transmit without a check.*/
    usbStartTransmitI(usbp, ep, buf, n);
  }
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 800248a:	4013      	ands	r3, r2
 800248c:	d1f1      	bne.n	8002472 <sduDataTransmitted+0x42>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
    /* Transmit zero sized packet in case the last one has maximum allowed
       size. Otherwise the recipient may expect more data coming soon and
       not return buffered data to app. See section 5.8.3 Bulk Transfer
       Packet Size Constraints of the USB Specification document.*/
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 800248e:	4631      	mov	r1, r6
 8002490:	4628      	mov	r0, r5
 8002492:	f105 0244 	add.w	r2, r5, #68	; 0x44
 8002496:	f000 f93b 	bl	8002710 <usbStartTransmitI>
 800249a:	e7ea      	b.n	8002472 <sduDataTransmitted+0x42>
  /* Signaling that space is available in the output queue.*/
  chnAddFlagsI(sdup, CHN_OUTPUT_EMPTY);

  /* Freeing the buffer just transmitted, if it was not a zero size packet.*/
  if (usbp->epc[ep]->in_state->txsize > 0U) {
    obqReleaseEmptyBufferI(&sdup->obqueue);
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff fc3f 	bl	8001d20 <obqReleaseEmptyBufferI>
  }

  /* Checking if there is a buffer ready for transmission.*/
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80024a2:	4620      	mov	r0, r4
 80024a4:	a901      	add	r1, sp, #4
 80024a6:	f7ff fc2b 	bl	8001d00 <obqGetFullBufferI>

  if (buf != NULL) {
 80024aa:	4602      	mov	r2, r0
 80024ac:	2800      	cmp	r0, #0
 80024ae:	d1db      	bne.n	8002468 <sduDataTransmitted+0x38>
 80024b0:	e7e4      	b.n	800247c <sduDataTransmitted+0x4c>
 80024b2:	bf00      	nop
	...

080024c0 <sduDataReceived>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80024c0:	3109      	adds	r1, #9
 *          data endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        OUT endpoint number
 */
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 80024c2:	b538      	push	{r3, r4, r5, lr}
  uint8_t *buf;
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 80024c4:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]

  if (sdup == NULL) {
 80024c8:	b324      	cbz	r4, 8002514 <sduDataReceived+0x54>
 80024ca:	2320      	movs	r3, #32
 80024cc:	f383 8811 	msr	BASEPRI, r3
 80024d0:	2104      	movs	r1, #4
 80024d2:	1860      	adds	r0, r4, r1
 80024d4:	f7ff f9bc 	bl	8001850 <chEvtBroadcastFlagsI>
  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80024d8:	f8d4 2484 	ldr.w	r2, [r4, #1156]	; 0x484
 80024dc:	6813      	ldr	r3, [r2, #0]
 80024de:	7952      	ldrb	r2, [r2, #5]
 80024e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 80024e4:	f104 050c 	add.w	r5, r4, #12
                     usbGetReceiveTransactionSizeX(sdup->config->usbp,
 80024e8:	68db      	ldr	r3, [r3, #12]

  /* Signaling that data is available in the input queue.*/
  chnAddFlagsI(sdup, CHN_INPUT_AVAILABLE);

  /* Posting the filled buffer in the queue.*/
  ibqPostFullBufferI(&sdup->ibqueue,
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4628      	mov	r0, r5
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	f7ff fae6 	bl	8001ac0 <ibqPostFullBufferI>
                                                   sdup->config->bulk_out));

  /* The endpoint cannot be busy, we are in the context of the callback,
     so a packet is in the buffer for sure. Trying to get a free buffer
     for the next transaction.*/
  buf = ibqGetEmptyBufferI(&sdup->ibqueue);
 80024f4:	4628      	mov	r0, r5
 80024f6:	f7ff fad3 	bl	8001aa0 <ibqGetEmptyBufferI>
  if (buf != NULL) {
 80024fa:	b140      	cbz	r0, 800250e <sduDataReceived+0x4e>
    /* Buffer found, starting a new transaction.*/
    usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 80024fc:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
 8002500:	4602      	mov	r2, r0
 8002502:	7959      	ldrb	r1, [r3, #5]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800250a:	f000 f8e9 	bl	80026e0 <usbStartReceiveI>
 800250e:	2300      	movs	r3, #0
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	bd38      	pop	{r3, r4, r5, pc}
 8002516:	bf00      	nop
	...

08002520 <sduInterruptTransmitted>:
 *          interrupt endpoint.
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
	...

08002530 <spiInit>:
 *
 * @init
 */
void spiInit(void) {

  spi_lld_init();
 8002530:	f002 bb1e 	b.w	8004b70 <spi_lld_init>
	...

08002540 <spiObjectInit>:
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 8002540:	2300      	movs	r3, #0
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8002542:	2201      	movs	r2, #1
 8002544:	7002      	strb	r2, [r0, #0]
  spip->config = NULL;
 8002546:	6043      	str	r3, [r0, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8002548:	6083      	str	r3, [r0, #8]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 800254a:	300c      	adds	r0, #12
 800254c:	f7ff b880 	b.w	8001650 <chMtxObjectInit>

08002550 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002550:	b510      	push	{r4, lr}
 8002552:	2320      	movs	r3, #32
 8002554:	4604      	mov	r4, r0
 8002556:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 800255a:	6041      	str	r1, [r0, #4]
  spi_lld_start(spip);
 800255c:	f002 fb30 	bl	8004bc0 <spi_lld_start>
  spip->state = SPI_READY;
 8002560:	2302      	movs	r3, #2
 8002562:	7023      	strb	r3, [r4, #0]
 8002564:	2300      	movs	r3, #0
 8002566:	f383 8811 	msr	BASEPRI, r3
 800256a:	bd10      	pop	{r4, pc}
 800256c:	0000      	movs	r0, r0
	...

08002570 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8002570:	b508      	push	{r3, lr}
 8002572:	2320      	movs	r3, #32
 8002574:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8002578:	f002 fb72 	bl	8004c60 <spi_lld_select>
 800257c:	2300      	movs	r3, #0
 800257e:	f383 8811 	msr	BASEPRI, r3
 8002582:	bd08      	pop	{r3, pc}
	...

08002590 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8002590:	b508      	push	{r3, lr}
 8002592:	2320      	movs	r3, #32
 8002594:	f383 8811 	msr	BASEPRI, r3

  osalDbgCheck(spip != NULL);

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8002598:	f002 fb6a 	bl	8004c70 <spi_lld_unselect>
 800259c:	2300      	movs	r3, #0
 800259e:	f383 8811 	msr	BASEPRI, r3
 80025a2:	bd08      	pop	{r3, pc}
	...

080025b0 <spiExchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiExchange(SPIDriver *spip, size_t n,
                 const void *txbuf, void *rxbuf) {
 80025b0:	b538      	push	{r3, r4, r5, lr}
 80025b2:	4604      	mov	r4, r0
 80025b4:	2520      	movs	r5, #32
 80025b6:	f385 8811 	msr	BASEPRI, r5
               (rxbuf != NULL) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartExchangeI(spip, n, txbuf, rxbuf);
 80025ba:	2503      	movs	r5, #3
 80025bc:	f804 5b08 	strb.w	r5, [r4], #8
 80025c0:	f002 fb5e 	bl	8004c80 <spi_lld_exchange>
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 80025c4:	4620      	mov	r0, r4
 80025c6:	f7fe ff83 	bl	80014d0 <chThdSuspendS>
 80025ca:	2300      	movs	r3, #0
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
 80025d2:	bf00      	nop
	...

080025e0 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 80025e0:	b510      	push	{r4, lr}
 80025e2:	2320      	movs	r3, #32
 80025e4:	4604      	mov	r4, r0
 80025e6:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartSendI(spip, n, txbuf);
 80025ea:	2303      	movs	r3, #3
 80025ec:	f804 3b08 	strb.w	r3, [r4], #8
 80025f0:	f002 fb66 	bl	8004cc0 <spi_lld_send>
 80025f4:	4620      	mov	r0, r4
 80025f6:	f7fe ff6b 	bl	80014d0 <chThdSuspendS>
 80025fa:	2300      	movs	r3, #0
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	bd10      	pop	{r4, pc}
 8002602:	bf00      	nop
	...

08002610 <spiReceive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @api
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {
 8002610:	b510      	push	{r4, lr}
 8002612:	2320      	movs	r3, #32
 8002614:	4604      	mov	r4, r0
 8002616:	f383 8811 	msr	BASEPRI, r3
  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  osalDbgAssert(spip->config->end_cb == NULL, "has callback");
  spiStartReceiveI(spip, n, rxbuf);
 800261a:	2303      	movs	r3, #3
 800261c:	f804 3b08 	strb.w	r3, [r4], #8
 8002620:	f002 fb6e 	bl	8004d00 <spi_lld_receive>
 8002624:	4620      	mov	r0, r4
 8002626:	f7fe ff53 	bl	80014d0 <chThdSuspendS>
 800262a:	2300      	movs	r3, #0
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	bd10      	pop	{r4, pc}
 8002632:	bf00      	nop
	...

08002640 <usbInit>:
 *
 * @init
 */
void usbInit(void) {

  usb_lld_init();
 8002640:	f001 bd7e 	b.w	8004140 <usb_lld_init>
	...

08002650 <usbObjectInit>:
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
 8002650:	2300      	movs	r3, #0
 * @init
 */
void usbObjectInit(USBDriver *usbp) {
  unsigned i;

  usbp->state        = USB_STOP;
 8002652:	2201      	movs	r2, #1
 8002654:	7002      	strb	r2, [r0, #0]
  usbp->config       = NULL;
 8002656:	6043      	str	r3, [r0, #4]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002658:	61c3      	str	r3, [r0, #28]
    usbp->out_params[i] = NULL;
 800265a:	6283      	str	r3, [r0, #40]	; 0x28
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 800265c:	6203      	str	r3, [r0, #32]
    usbp->out_params[i] = NULL;
 800265e:	62c3      	str	r3, [r0, #44]	; 0x2c
  unsigned i;

  usbp->state        = USB_STOP;
  usbp->config       = NULL;
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->in_params[i]  = NULL;
 8002660:	6243      	str	r3, [r0, #36]	; 0x24
    usbp->out_params[i] = NULL;
 8002662:	6303      	str	r3, [r0, #48]	; 0x30
  }
  usbp->transmitting = 0;
 8002664:	8103      	strh	r3, [r0, #8]
  usbp->receiving    = 0;
 8002666:	8143      	strh	r3, [r0, #10]
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	0000      	movs	r0, r0
	...

08002670 <usbStart>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] config    pointer to the @p USBConfig object
 *
 * @api
 */
void usbStart(USBDriver *usbp, const USBConfig *config) {
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	2320      	movs	r3, #32
 8002676:	f383 8811 	msr	BASEPRI, r3
  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800267a:	2500      	movs	r5, #0
  osalDbgCheck((usbp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
                "invalid state");
  usbp->config = config;
 800267c:	6041      	str	r1, [r0, #4]
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
    usbp->epc[i] = NULL;
 800267e:	60c5      	str	r5, [r0, #12]
 8002680:	6105      	str	r5, [r0, #16]
 8002682:	6145      	str	r5, [r0, #20]
 8002684:	6185      	str	r5, [r0, #24]
  }
  usb_lld_start(usbp);
 8002686:	f001 fd73 	bl	8004170 <usb_lld_start>
  usbp->state = USB_READY;
 800268a:	2302      	movs	r3, #2
 800268c:	7023      	strb	r3, [r4, #0]
 800268e:	f385 8811 	msr	BASEPRI, r5
 8002692:	bd38      	pop	{r3, r4, r5, pc}
	...

080026a0 <usbInitEndpointI>:
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80026a0:	b570      	push	{r4, r5, r6, lr}
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 80026a2:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80026a6:	4606      	mov	r6, r0

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80026a8:	6950      	ldr	r0, [r2, #20]
  osalDbgAssert(usbp->state == USB_ACTIVE,
                "invalid state");
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;
 80026aa:	60da      	str	r2, [r3, #12]
 * @param[in] epcp      the endpoint configuration
 *
 * @iclass
 */
void usbInitEndpointI(USBDriver *usbp, usbep_t ep,
                      const USBEndpointConfig *epcp) {
 80026ac:	4614      	mov	r4, r2
 80026ae:	460d      	mov	r5, r1

  /* Logically enabling the endpoint in the USBDriver structure.*/
  usbp->epc[ep] = epcp;

  /* Clearing the state structures, custom fields as well.*/
  if (epcp->in_state != NULL) {
 80026b0:	b118      	cbz	r0, 80026ba <usbInitEndpointI+0x1a>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80026b2:	2100      	movs	r1, #0
 80026b4:	2210      	movs	r2, #16
 80026b6:	f004 fffb 	bl	80076b0 <memset>
  }
  if (epcp->out_state != NULL) {
 80026ba:	69a0      	ldr	r0, [r4, #24]
 80026bc:	b118      	cbz	r0, 80026c6 <usbInitEndpointI+0x26>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80026be:	2100      	movs	r1, #0
 80026c0:	2210      	movs	r2, #16
 80026c2:	f004 fff5 	bl	80076b0 <memset>
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80026c6:	4630      	mov	r0, r6
 80026c8:	4629      	mov	r1, r5
}
 80026ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (epcp->out_state != NULL) {
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
  }

  /* Low level endpoint activation.*/
  usb_lld_init_endpoint(usbp, ep);
 80026ce:	f001 be57 	b.w	8004380 <usb_lld_init_endpoint>
 80026d2:	bf00      	nop
	...

080026e0 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 80026e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80026e2:	eb00 0681 	add.w	r6, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80026e6:	8947      	ldrh	r7, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80026e8:	f8d6 e00c 	ldr.w	lr, [r6, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80026ec:	2601      	movs	r6, #1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 80026ee:	f8de 4018 	ldr.w	r4, [lr, #24]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80026f2:	408e      	lsls	r6, r1
 80026f4:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80026f6:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80026f8:	8146      	strh	r6, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
  /*lint -restore*/
  osp->rxbuf  = buf;
 80026fa:	60a2      	str	r2, [r4, #8]
  osp->rxsize = n;
  osp->rxcnt  = 0;
 80026fc:	e884 0088 	stmia.w	r4, {r3, r7}
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 8002700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
 8002704:	f001 bf1c 	b.w	8004540 <usb_lld_start_out>
	...

08002710 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 8002710:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002712:	eb00 0681 	add.w	r6, r0, r1, lsl #2
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002716:	8907      	ldrh	r7, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8002718:	f8d6 e00c 	ldr.w	lr, [r6, #12]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800271c:	2601      	movs	r6, #1

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 800271e:	f8de 4014 	ldr.w	r4, [lr, #20]
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002722:	408e      	lsls	r6, r1
 8002724:	433e      	orrs	r6, r7
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
  isp->txsize = n;
  isp->txcnt  = 0;
 8002726:	2700      	movs	r7, #0
  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002728:	8106      	strh	r6, [r0, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
  /*lint -restore*/
  isp->txbuf  = buf;
 800272a:	60a2      	str	r2, [r4, #8]
  isp->txsize = n;
  isp->txcnt  = 0;
 800272c:	e884 0088 	stmia.w	r4, {r3, r7}
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8002730:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
#if USB_USE_WAIT == TRUE
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
 8002734:	f001 bf9c 	b.w	8004670 <usb_lld_start_in>
	...

08002740 <_usb_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002740:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002742:	2302      	movs	r3, #2

  /* Resetting internal state.*/
  usbp->status        = 0;
 8002744:	2500      	movs	r5, #0
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void _usb_reset(USBDriver *usbp) {
 8002746:	4604      	mov	r4, r0
  unsigned i;

  /* State transition.*/
  usbp->state         = USB_READY;
 8002748:	7003      	strb	r3, [r0, #0]

  /* Resetting internal state.*/
  usbp->status        = 0;
 800274a:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
  usbp->address       = 0;
 800274e:	f880 504e 	strb.w	r5, [r0, #78]	; 0x4e
  usbp->configuration = 0;
 8002752:	f880 504f 	strb.w	r5, [r0, #79]	; 0x4f
  usbp->transmitting  = 0;
 8002756:	8105      	strh	r5, [r0, #8]
  usbp->receiving     = 0;
 8002758:	8145      	strh	r5, [r0, #10]
        osalThreadResumeI(&usbp->epc[i]->out_state->thread, MSG_RESET);
      }
      osalSysUnlockFromISR();
    }
#endif
    usbp->epc[i] = NULL;
 800275a:	60c5      	str	r5, [r0, #12]
 800275c:	6105      	str	r5, [r0, #16]
 800275e:	6145      	str	r5, [r0, #20]
 8002760:	6185      	str	r5, [r0, #24]
  }

  /* EP0 state machine initialization.*/
  usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002762:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34

  /* Low level reset.*/
  usb_lld_reset(usbp);
 8002766:	f001 fd9b 	bl	80042a0 <usb_lld_reset>

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800276a:	6863      	ldr	r3, [r4, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b123      	cbz	r3, 800277a <_usb_reset+0x3a>
 8002770:	4620      	mov	r0, r4
 8002772:	4629      	mov	r1, r5
}
 8002774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  /* Low level reset.*/
  usb_lld_reset(usbp);

  /* Notification of reset event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 8002778:	4718      	bx	r3
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	0000      	movs	r0, r0
	...

08002780 <_usb_suspend>:

  /* State transition.*/
  usbp->state = USB_SUSPENDED;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002780:	6842      	ldr	r2, [r0, #4]
 8002782:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_suspend(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_SUSPENDED;
 8002784:	2105      	movs	r1, #5
 8002786:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8002788:	b10b      	cbz	r3, 800278e <_usb_suspend+0xe>
 800278a:	2103      	movs	r1, #3
 800278c:	4718      	bx	r3
 800278e:	4770      	bx	lr

08002790 <_usb_wakeup>:

  /* State transition.*/
  usbp->state = USB_ACTIVE;

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002790:	6842      	ldr	r2, [r0, #4]
 8002792:	6813      	ldr	r3, [r2, #0]
 * @notapi
 */
void _usb_wakeup(USBDriver *usbp) {

  /* State transition.*/
  usbp->state = USB_ACTIVE;
 8002794:	2104      	movs	r1, #4
 8002796:	7001      	strb	r1, [r0, #0]

  /* Notification of suspend event.*/
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8002798:	b103      	cbz	r3, 800279c <_usb_wakeup+0xc>
 800279a:	4718      	bx	r3
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop

080027a0 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80027a2:	2300      	movs	r3, #0
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 80027a4:	4604      	mov	r4, r0
  size_t max;

  usbp->ep0state = USB_EP0_WAITING_SETUP;
 80027a6:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  usbReadSetup(usbp, ep, usbp->setup);
 80027aa:	f100 0244 	add.w	r2, r0, #68	; 0x44
 80027ae:	f001 feb7 	bl	8004520 <usb_lld_read_setup>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	b313      	cbz	r3, 80027fe <_usb_ep0setup+0x5e>
      !(usbp->config->requests_hook_cb(usbp))) {
 80027b8:	4620      	mov	r0, r4
 80027ba:	4798      	blx	r3
  usbReadSetup(usbp, ep, usbp->setup);

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 80027bc:	b1f8      	cbz	r0, 80027fe <_usb_ep0setup+0x5e>
 80027be:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80027c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80027c4:	f894 104b 	ldrb.w	r1, [r4, #75]	; 0x4b
 80027c8:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
  }
#endif
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
 80027cc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 80027d0:	42aa      	cmp	r2, r5
    usbp->ep0n = max;
 80027d2:	bf3c      	itt	cc
 80027d4:	63e2      	strcc	r2, [r4, #60]	; 0x3c
 80027d6:	4615      	movcc	r5, r2
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	d476      	bmi.n	80028ca <_usb_ep0setup+0x12a>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 80027dc:	2d00      	cmp	r5, #0
 80027de:	d164      	bne.n	80028aa <_usb_ep0setup+0x10a>
      osalSysUnlockFromISR();
    }
    else {
      /* No receive phase, directly sending the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_SENDING_STS;
 80027e0:	2305      	movs	r3, #5
 80027e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80027e6:	2320      	movs	r3, #32
 80027e8:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 80027ec:	4620      	mov	r0, r4
 80027ee:	4629      	mov	r1, r5
 80027f0:	462a      	mov	r2, r5
 80027f2:	462b      	mov	r3, r5
 80027f4:	f7ff ff8c 	bl	8002710 <usbStartTransmitI>
 80027f8:	f385 8811 	msr	BASEPRI, r5
 80027fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      !(usbp->config->requests_hook_cb(usbp))) {
  /*lint -restore*/
    /* Invoking the default handler, if this fails then stalls the
       endpoint zero as error.*/
    /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 80027fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002802:	f013 0760 	ands.w	r7, r3, #96	; 0x60
 8002806:	d011      	beq.n	800282c <_usb_ep0setup+0x8c>
        !default_handler(usbp)) {
    /*lint -restore*/
      /* Error response, the state machine goes into an error state, the low
         level layer will have to reset it to USB_EP0_WAITING_SETUP after
         receiving a SETUP packet.*/
      usb_lld_stall_in(usbp, 0);
 8002808:	4620      	mov	r0, r4
 800280a:	2100      	movs	r1, #0
 800280c:	f002 f930 	bl	8004a70 <usb_lld_stall_in>
      usb_lld_stall_out(usbp, 0);
 8002810:	4620      	mov	r0, r4
 8002812:	2100      	movs	r1, #0
 8002814:	f002 f91c 	bl	8004a50 <usb_lld_stall_out>
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b113      	cbz	r3, 8002824 <_usb_ep0setup+0x84>
 800281e:	4620      	mov	r0, r4
 8002820:	2105      	movs	r1, #5
 8002822:	4798      	blx	r3
      usbp->ep0state = USB_EP0_ERROR;
 8002824:	2306      	movs	r3, #6
 8002826:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 800282a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
 800282c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8002834:	ea42 2605 	orr.w	r6, r2, r5, lsl #8
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002838:	f5b6 7f40 	cmp.w	r6, #768	; 0x300
 800283c:	f000 80e7 	beq.w	8002a0e <_usb_ep0setup+0x26e>
 8002840:	d916      	bls.n	8002870 <_usb_ep0setup+0xd0>
 8002842:	f5b6 6fc0 	cmp.w	r6, #1536	; 0x600
 8002846:	f000 80c9 	beq.w	80029dc <_usb_ep0setup+0x23c>
 800284a:	d95e      	bls.n	800290a <_usb_ep0setup+0x16a>
 800284c:	f5b6 6f10 	cmp.w	r6, #2304	; 0x900
 8002850:	d06e      	beq.n	8002930 <_usb_ep0setup+0x190>
 8002852:	f640 4202 	movw	r2, #3074	; 0xc02
 8002856:	4296      	cmp	r6, r2
 8002858:	f000 80ec 	beq.w	8002a34 <_usb_ep0setup+0x294>
 800285c:	f5b6 6f00 	cmp.w	r6, #2048	; 0x800
 8002860:	d1d2      	bne.n	8002808 <_usb_ep0setup+0x68>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_CONFIGURATION << 8):
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002862:	f104 024f 	add.w	r2, r4, #79	; 0x4f
 8002866:	2501      	movs	r5, #1
 8002868:	6427      	str	r7, [r4, #64]	; 0x40
 800286a:	63a2      	str	r2, [r4, #56]	; 0x38
 800286c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800286e:	e7a9      	b.n	80027c4 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002870:	2e02      	cmp	r6, #2
 8002872:	f000 809c 	beq.w	80029ae <_usb_ep0setup+0x20e>
 8002876:	f240 8091 	bls.w	800299c <_usb_ep0setup+0x1fc>
 800287a:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800287e:	d07d      	beq.n	800297c <_usb_ep0setup+0x1dc>
 8002880:	f5b6 7f81 	cmp.w	r6, #258	; 0x102
 8002884:	d1c0      	bne.n	8002808 <_usb_ep0setup+0x68>
        return false;
      }
    }
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002886:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800288a:	2a00      	cmp	r2, #0
 800288c:	d1bc      	bne.n	8002808 <_usb_ep0setup+0x68>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800288e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002892:	f012 010f 	ands.w	r1, r2, #15
 8002896:	d046      	beq.n	8002926 <_usb_ep0setup+0x186>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8002898:	0615      	lsls	r5, r2, #24
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 800289a:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800289c:	f100 80f2 	bmi.w	8002a84 <_usb_ep0setup+0x2e4>
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_clear_out(usbp, usbp->setup[4] & 0x0FU);
 80028a0:	f002 f8f6 	bl	8004a90 <usb_lld_clear_out>
 80028a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028a8:	e03d      	b.n	8002926 <_usb_ep0setup+0x186>
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_RX;
 80028aa:	2304      	movs	r3, #4
 80028ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80028b0:	2320      	movs	r3, #32
 80028b2:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80028b6:	2100      	movs	r1, #0
 80028b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff ff0f 	bl	80026e0 <usbStartReceiveI>
 80028c2:	2300      	movs	r3, #0
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbp->ep0n > max) {
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
    /* IN phase.*/
    if (usbp->ep0n != 0U) {
 80028ca:	b17d      	cbz	r5, 80028ec <_usb_ep0setup+0x14c>
      /* Starts the transmit phase.*/
      usbp->ep0state = USB_EP0_TX;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80028d2:	2320      	movs	r3, #32
 80028d4:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 80028d8:	2100      	movs	r1, #0
 80028da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028dc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff ff16 	bl	8002710 <usbStartTransmitI>
 80028e4:	2300      	movs	r3, #0
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      osalSysUnlockFromISR();
    }
    else {
      /* No transmission phase, directly receiving the zero sized status
         packet.*/
      usbp->ep0state = USB_EP0_WAITING_STS;
 80028ec:	2303      	movs	r3, #3
 80028ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80028f2:	2320      	movs	r3, #32
 80028f4:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, NULL, 0);
 80028f8:	4620      	mov	r0, r4
 80028fa:	4629      	mov	r1, r5
 80028fc:	462a      	mov	r2, r5
 80028fe:	462b      	mov	r3, r5
 8002900:	f7ff feee 	bl	80026e0 <usbStartReceiveI>
 8002904:	f385 8811 	msr	BASEPRI, r5
 8002908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800290a:	f240 3202 	movw	r2, #770	; 0x302
 800290e:	4296      	cmp	r6, r2
 8002910:	d021      	beq.n	8002956 <_usb_ep0setup+0x1b6>
 8002912:	f5b6 6fa0 	cmp.w	r6, #1280	; 0x500
 8002916:	f47f af77 	bne.w	8002808 <_usb_ep0setup+0x68>
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_ADDRESS << 8):
    /* The SET_ADDRESS handling can be performed here or postponed after
       the status packed depending on the USB_SET_ADDRESS_MODE low
       driver setting.*/
#if USB_SET_ADDRESS_MODE == USB_EARLY_SET_ADDRESS
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 800291a:	f8b4 2044 	ldrh.w	r2, [r4, #68]	; 0x44
 800291e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002922:	f000 809d 	beq.w	8002a60 <_usb_ep0setup+0x2c0>
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
      }
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002926:	2500      	movs	r5, #0
 8002928:	63a5      	str	r5, [r4, #56]	; 0x38
 800292a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800292c:	6425      	str	r5, [r4, #64]	; 0x40
 800292e:	e749      	b.n	80027c4 <_usb_ep0setup+0x24>
    /* Returning the last selected configuration.*/
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_CONFIGURATION << 8):
    /* Handling configuration selection from the host.*/
    usbp->configuration = usbp->setup[2];
 8002930:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002934:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
    if (usbp->configuration == 0U) {
 8002938:	2a00      	cmp	r2, #0
 800293a:	f040 8082 	bne.w	8002a42 <_usb_ep0setup+0x2a2>
      usbp->state = USB_SELECTED;
 800293e:	2203      	movs	r2, #3
 8002940:	7022      	strb	r2, [r4, #0]
    }
    else {
      usbp->state = USB_ACTIVE;
    }
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8002942:	6862      	ldr	r2, [r4, #4]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	2a00      	cmp	r2, #0
 8002948:	d0ed      	beq.n	8002926 <_usb_ep0setup+0x186>
 800294a:	4620      	mov	r0, r4
 800294c:	2102      	movs	r1, #2
 800294e:	4790      	blx	r2
 8002950:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002954:	e7e7      	b.n	8002926 <_usb_ep0setup+0x186>
    }
    usbSetupTransfer(usbp, NULL, 0, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only ENDPOINT_HALT is handled as feature.*/
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002956:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800295a:	2a00      	cmp	r2, #0
 800295c:	f47f af54 	bne.w	8002808 <_usb_ep0setup+0x68>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002960:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8002964:	f012 010f 	ands.w	r1, r2, #15
 8002968:	d0dd      	beq.n	8002926 <_usb_ep0setup+0x186>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800296a:	0612      	lsls	r2, r2, #24
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 800296c:	4620      	mov	r0, r4
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800296e:	f100 808e 	bmi.w	8002a8e <_usb_ep0setup+0x2ee>
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
      }
      else {
        usb_lld_stall_out(usbp, usbp->setup[4] & 0x0FU);
 8002972:	f002 f86d 	bl	8004a50 <usb_lld_stall_out>
 8002976:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800297a:	e7d4      	b.n	8002926 <_usb_ep0setup+0x186>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 800297c:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002980:	2a01      	cmp	r2, #1
 8002982:	f47f af41 	bne.w	8002808 <_usb_ep0setup+0x68>
      usbp->status &= ~2U;
 8002986:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800298a:	63a7      	str	r7, [r4, #56]	; 0x38
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 800298c:	f022 0202 	bic.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002990:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002992:	6427      	str	r7, [r4, #64]	; 0x40
 8002994:	463d      	mov	r5, r7
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_CLEAR_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status &= ~2U;
 8002996:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 800299a:	e713      	b.n	80027c4 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 800299c:	2e00      	cmp	r6, #0
 800299e:	d146      	bne.n	8002a2e <_usb_ep0setup+0x28e>
                                        USB_RTYPE_TYPE_MASK)) |
           ((uint32_t)usbp->setup[1] << 8U))) {
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Just returns the current status word.*/
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 80029a0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80029a4:	2502      	movs	r5, #2
 80029a6:	6426      	str	r6, [r4, #64]	; 0x40
 80029a8:	63a2      	str	r2, [r4, #56]	; 0x38
 80029aa:	63e5      	str	r5, [r4, #60]	; 0x3c
 80029ac:	e70a      	b.n	80027c4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80029ae:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
 80029b2:	f011 0f80 	tst.w	r1, #128	; 0x80
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 80029b6:	4620      	mov	r0, r4
 80029b8:	f001 010f 	and.w	r1, r1, #15
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
 80029bc:	d144      	bne.n	8002a48 <_usb_ep0setup+0x2a8>
      default:
        return false;
      }
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
 80029be:	f001 fd8f 	bl	80044e0 <usb_lld_get_status_out>
 80029c2:	2801      	cmp	r0, #1
 80029c4:	d044      	beq.n	8002a50 <_usb_ep0setup+0x2b0>
 80029c6:	2802      	cmp	r0, #2
 80029c8:	f47f af1e 	bne.w	8002808 <_usb_ep0setup+0x68>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
        /*lint -restore*/
        return true;
      case EP_STATUS_ACTIVE:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <_usb_ep0setup+0x2f8>)
 80029ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80029d0:	63e0      	str	r0, [r4, #60]	; 0x3c
 80029d2:	6427      	str	r7, [r4, #64]	; 0x40
 80029d4:	4605      	mov	r5, r0
 80029d6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029da:	e6f3      	b.n	80027c4 <_usb_ep0setup+0x24>
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80029dc:	6862      	ldr	r2, [r4, #4]

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 80029de:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
 80029e2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    usbSetupTransfer(usbp, NULL, 0, set_address);
#endif
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_GET_DESCRIPTOR << 8):
    /* Handling descriptor requests from the host.*/
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 80029e6:	6855      	ldr	r5, [r2, #4]
 80029e8:	f894 1047 	ldrb.w	r1, [r4, #71]	; 0x47
 80029ec:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80029f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80029f4:	4620      	mov	r0, r4
 80029f6:	47a8      	blx	r5
                                         usbp->setup[2],
                                         get_hword(&usbp->setup[4]));
    if (dp == NULL) {
 80029f8:	2800      	cmp	r0, #0
 80029fa:	f43f af05 	beq.w	8002808 <_usb_ep0setup+0x68>
      return false;
    }
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 80029fe:	6843      	ldr	r3, [r0, #4]
 8002a00:	6805      	ldr	r5, [r0, #0]
 8002a02:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002a04:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a06:	6427      	str	r7, [r4, #64]	; 0x40
 8002a08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a0c:	e6da      	b.n	80027c4 <_usb_ep0setup+0x24>
    }
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002a0e:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 8002a12:	2a01      	cmp	r2, #1
 8002a14:	f47f aef8 	bne.w	8002808 <_usb_ep0setup+0x68>
      usbp->status |= 2U;
 8002a18:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002a1c:	63a7      	str	r7, [r4, #56]	; 0x38
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002a1e:	f042 0202 	orr.w	r2, r2, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002a22:	63e7      	str	r7, [r4, #60]	; 0x3c
 8002a24:	6427      	str	r7, [r4, #64]	; 0x40
 8002a26:	463d      	mov	r5, r7
    return false;
  case (uint32_t)USB_RTYPE_RECIPIENT_DEVICE | ((uint32_t)USB_REQ_SET_FEATURE << 8):
    /* Only the DEVICE_REMOTE_WAKEUP is handled here, any other feature
       number is handled as an error.*/
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
      usbp->status |= 2U;
 8002a28:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
 8002a2c:	e6ca      	b.n	80027c4 <_usb_ep0setup+0x24>
 */
static bool default_handler(USBDriver *usbp) {
  const USBDescriptor *dp;

  /* Decoding the request.*/
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002a2e:	2e01      	cmp	r6, #1
 8002a30:	f47f aeea 	bne.w	8002808 <_usb_ep0setup+0x68>
  case (uint32_t)USB_RTYPE_RECIPIENT_INTERFACE | ((uint32_t)USB_REQ_GET_STATUS << 8):
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_SYNCH_FRAME << 8):
    /* Just sending two zero bytes, the application can change the behavior
       using a hook..*/
    /*lint -save -e9005 [11.8] Removing const is fine.*/
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8002a34:	4a19      	ldr	r2, [pc, #100]	; (8002a9c <_usb_ep0setup+0x2fc>)
 8002a36:	63a2      	str	r2, [r4, #56]	; 0x38
 8002a38:	2502      	movs	r5, #2
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002a3e:	6422      	str	r2, [r4, #64]	; 0x40
 8002a40:	e6c0      	b.n	80027c4 <_usb_ep0setup+0x24>
    usbp->configuration = usbp->setup[2];
    if (usbp->configuration == 0U) {
      usbp->state = USB_SELECTED;
    }
    else {
      usbp->state = USB_ACTIVE;
 8002a42:	2204      	movs	r2, #4
 8002a44:	7022      	strb	r2, [r4, #0]
 8002a46:	e77c      	b.n	8002942 <_usb_ep0setup+0x1a2>
    /*lint -restore*/
    return true;
  case (uint32_t)USB_RTYPE_RECIPIENT_ENDPOINT | ((uint32_t)USB_REQ_GET_STATUS << 8):
    /* Sending the EP status.*/
    if ((usbp->setup[4] & 0x80U) != 0U) {
      switch (usb_lld_get_status_in(usbp, usbp->setup[4] & 0x0FU)) {
 8002a48:	f001 fd5a 	bl	8004500 <usb_lld_get_status_in>
 8002a4c:	2801      	cmp	r0, #1
 8002a4e:	d1ba      	bne.n	80029c6 <_usb_ep0setup+0x226>
    }
    else {
      switch (usb_lld_get_status_out(usbp, usbp->setup[4] & 0x0FU)) {
      case EP_STATUS_STALLED:
        /*lint -save -e9005 [11.8] Removing const is fine.*/
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_usb_ep0setup+0x300>)
 8002a52:	63a3      	str	r3, [r4, #56]	; 0x38
 8002a54:	63e6      	str	r6, [r4, #60]	; 0x3c
 8002a56:	6427      	str	r7, [r4, #64]	; 0x40
 8002a58:	4635      	mov	r5, r6
 8002a5a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a5e:	e6b1      	b.n	80027c4 <_usb_ep0setup+0x24>
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 8002a60:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8002a64:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  usb_lld_set_address(usbp);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f001 fc79 	bl	8004360 <usb_lld_set_address>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b113      	cbz	r3, 8002a7a <_usb_ep0setup+0x2da>
 8002a74:	4620      	mov	r0, r4
 8002a76:	2101      	movs	r1, #1
 8002a78:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a80:	7022      	strb	r2, [r4, #0]
 8002a82:	e750      	b.n	8002926 <_usb_ep0setup+0x186>
      return false;
    }
    /* Clearing the EP status, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_clear_in(usbp, usbp->setup[4] & 0x0FU);
 8002a84:	f002 f814 	bl	8004ab0 <usb_lld_clear_in>
 8002a88:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a8c:	e74b      	b.n	8002926 <_usb_ep0setup+0x186>
      return false;
    }
    /* Stalling the EP, not valid for EP0, it is ignored in that case.*/
    if ((usbp->setup[4] & 0x0FU) != 0U) {
      if ((usbp->setup[4] & 0x80U) != 0U) {
        usb_lld_stall_in(usbp, usbp->setup[4] & 0x0FU);
 8002a8e:	f001 ffef 	bl	8004a70 <usb_lld_stall_in>
 8002a92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a96:	e746      	b.n	8002926 <_usb_ep0setup+0x186>
 8002a98:	08007860 	.word	0x08007860
 8002a9c:	08007850 	.word	0x08007850
 8002aa0:	08007870 	.word	0x08007870
	...

08002ab0 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002ab0:	b538      	push	{r3, r4, r5, lr}
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002ab2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8002ab6:	4604      	mov	r4, r0
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	d815      	bhi.n	8002ae8 <_usb_ep0in+0x38>
 8002abc:	e8df f003 	tbb	[pc, r3]
 8002ac0:	04251504 	.word	0x04251504
 8002ac4:	3504      	.short	0x3504
 8002ac6:	04          	.byte	0x04
 8002ac7:	00          	.byte	0x00
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002ac8:	2100      	movs	r1, #0
 8002aca:	f001 ffd1 	bl	8004a70 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002ace:	4620      	mov	r0, r4
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f001 ffbd 	bl	8004a50 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b113      	cbz	r3, 8002ae2 <_usb_ep0in+0x32>
 8002adc:	4620      	mov	r0, r4
 8002ade:	2105      	movs	r1, #5
 8002ae0:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002ae8:	bd38      	pop	{r3, r4, r5, pc}

static uint16_t get_hword(uint8_t *p) {
  uint16_t hw;

  hw  = (uint16_t)*p++;
  hw |= (uint16_t)*p << 8U;
 8002aea:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
 8002aee:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002af2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  size_t max;

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
 8002af4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d906      	bls.n	8002b0a <_usb_ep0in+0x5a>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8002afc:	68c3      	ldr	r3, [r0, #12]
 8002afe:	8a1d      	ldrh	r5, [r3, #16]
 8002b00:	fbb2 f3f5 	udiv	r3, r2, r5
 8002b04:	fb05 2513 	mls	r5, r5, r3, r2
  case USB_EP0_TX:
    max = (size_t)get_hword(&usbp->setup[6]);
    /* If the transmitted size is less than the requested size and it is a
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
 8002b08:	b1b5      	cbz	r5, 8002b38 <_usb_ep0in+0x88>
      return;
    }
    /* Falls into, it is intentional.*/
  case USB_EP0_WAITING_TX0:
    /* Transmit phase over, receiving the zero sized status packet.*/
    usbp->ep0state = USB_EP0_WAITING_STS;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002b10:	2320      	movs	r3, #32
 8002b12:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartReceiveI(usbp, 0, NULL, 0);
 8002b16:	2100      	movs	r1, #0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	f7ff fddf 	bl	80026e0 <usbStartReceiveI>
 8002b22:	2300      	movs	r3, #0
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	bd38      	pop	{r3, r4, r5, pc}
    usb_lld_end_setup(usbp, ep);
#endif
    return;
  case USB_EP0_SENDING_STS:
    /* Status packet sent, invoking the callback if defined.*/
    if (usbp->ep0endcb != NULL) {
 8002b2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b2c:	b103      	cbz	r3, 8002b30 <_usb_ep0in+0x80>
      usbp->ep0endcb(usbp);
 8002b2e:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
 8002b38:	2320      	movs	r3, #32
 8002b3a:	f383 8811 	msr	BASEPRI, r3
       multiple of the maximum packet size then a zero size packet must be
       transmitted.*/
    if ((usbp->ep0n < max) &&
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
      osalSysLockFromISR();
      usbStartTransmitI(usbp, 0, NULL, 0);
 8002b3e:	4629      	mov	r1, r5
 8002b40:	462a      	mov	r2, r5
 8002b42:	462b      	mov	r3, r5
 8002b44:	f7ff fde4 	bl	8002710 <usbStartTransmitI>
 8002b48:	f385 8811 	msr	BASEPRI, r5
      osalSysUnlockFromISR();
      usbp->ep0state = USB_EP0_WAITING_TX0;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return;
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
	...

08002b60 <_usb_ep0out>:
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {

  (void)ep;
  switch (usbp->ep0state) {
 8002b60:	f890 2034 	ldrb.w	r2, [r0, #52]	; 0x34
 8002b64:	2a06      	cmp	r2, #6
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8002b66:	b538      	push	{r3, r4, r5, lr}
 8002b68:	d80a      	bhi.n	8002b80 <_usb_ep0out+0x20>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	f013 0f67 	tst.w	r3, #103	; 0x67
 8002b72:	4604      	mov	r4, r0
 8002b74:	d111      	bne.n	8002b9a <_usb_ep0out+0x3a>
 8002b76:	f013 0508 	ands.w	r5, r3, #8
 8002b7a:	d102      	bne.n	8002b82 <_usb_ep0out+0x22>
 8002b7c:	06db      	lsls	r3, r3, #27
 8002b7e:	d41d      	bmi.n	8002bbc <_usb_ep0out+0x5c>
 8002b80:	bd38      	pop	{r3, r4, r5, pc}
    return;
  case USB_EP0_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8002b82:	68c3      	ldr	r3, [r0, #12]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f9      	bne.n	8002b80 <_usb_ep0out+0x20>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8002b8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b8e:	b103      	cbz	r3, 8002b92 <_usb_ep0out+0x32>
      usbp->ep0endcb(usbp);
 8002b90:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_WAITING_SETUP;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return;
 8002b98:	bd38      	pop	{r3, r4, r5, pc}
    /* Falling through is intentional.*/
  case USB_EP0_ERROR:
    /* Error response, the state machine goes into an error state, the low
       level layer will have to reset it to USB_EP0_WAITING_SETUP after
       receiving a SETUP packet.*/
    usb_lld_stall_in(usbp, 0);
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	f001 ff68 	bl	8004a70 <usb_lld_stall_in>
    usb_lld_stall_out(usbp, 0);
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	f001 ff54 	bl	8004a50 <usb_lld_stall_out>
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8002ba8:	6863      	ldr	r3, [r4, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	b113      	cbz	r3, 8002bb4 <_usb_ep0out+0x54>
 8002bae:	4620      	mov	r0, r4
 8002bb0:	2105      	movs	r1, #5
 8002bb2:	4798      	blx	r3
    usbp->ep0state = USB_EP0_ERROR;
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8002bba:	bd38      	pop	{r3, r4, r5, pc}

  (void)ep;
  switch (usbp->ep0state) {
  case USB_EP0_RX:
    /* Receive phase over, sending the zero sized status packet.*/
    usbp->ep0state = USB_EP0_SENDING_STS;
 8002bbc:	2305      	movs	r3, #5
 8002bbe:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	f383 8811 	msr	BASEPRI, r3
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    osalSysLockFromISR();
    usbStartTransmitI(usbp, 0, NULL, 0);
 8002bc8:	4629      	mov	r1, r5
 8002bca:	462a      	mov	r2, r5
 8002bcc:	462b      	mov	r3, r5
 8002bce:	f7ff fd9f 	bl	8002710 <usbStartTransmitI>
 8002bd2:	f385 8811 	msr	BASEPRI, r5
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
	...

08002be0 <nvicEnableVector>:
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002be0:	0943      	lsrs	r3, r0, #5
 8002be2:	009b      	lsls	r3, r3, #2
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
 8002be4:	b410      	push	{r4}
 8002be6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002bea:	f100 4460 	add.w	r4, r0, #3758096384	; 0xe0000000
 8002bee:	f504 4461 	add.w	r4, r4, #57600	; 0xe100
 8002bf2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8002bf6:	0109      	lsls	r1, r1, #4
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002bf8:	f000 001f 	and.w	r0, r0, #31
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4082      	lsls	r2, r0

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002c00:	b2c9      	uxtb	r1, r1
 8002c02:	f884 1300 	strb.w	r1, [r4, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002c06:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
	...

08002c20 <nvicSetSystemHandlerPriority>:
  SCB->SHP[_SHP_IDX(handler)] = (SCB->SHP[_SHP_IDX(handler)] & ~(0xFFU << _BIT_SHIFT(handler))) |
                                (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(handler));
#elif defined(__CORE_CM7_H_GENERIC)
  SCB->SHPR[handler] = NVIC_PRIORITY_MASK(prio);
#else
  SCB->SHP[handler] = NVIC_PRIORITY_MASK(prio);
 8002c20:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002c24:	f500 406d 	add.w	r0, r0, #60672	; 0xed00
 8002c28:	0109      	lsls	r1, r1, #4
 8002c2a:	b2c9      	uxtb	r1, r1
 8002c2c:	7601      	strb	r1, [r0, #24]
 8002c2e:	4770      	bx	lr

08002c30 <hal_lld_init>:
 */
void hal_lld_init(void) {

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <hal_lld_init+0x60>)
 8002c32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	2200      	movs	r2, #0
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
 8002c3a:	b410      	push	{r4}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
 8002c3c:	6119      	str	r1, [r3, #16]
 8002c3e:	611a      	str	r2, [r3, #16]
  rccResetAHB2(~0);
 8002c40:	6958      	ldr	r0, [r3, #20]
 8002c42:	6159      	str	r1, [r3, #20]
 8002c44:	615a      	str	r2, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002c46:	6a18      	ldr	r0, [r3, #32]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002c48:	4c12      	ldr	r4, [pc, #72]	; (8002c94 <hal_lld_init+0x64>)

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).*/
  rccResetAHB1(~0);
  rccResetAHB2(~0);
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8002c4a:	f060 5080 	orn	r0, r0, #268435456	; 0x10000000
 8002c4e:	6218      	str	r0, [r3, #32]
 8002c50:	621a      	str	r2, [r3, #32]
  rccResetAPB2(~0);
 8002c52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002c54:	6259      	str	r1, [r3, #36]	; 0x24
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(FALSE);
 8002c58:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c5a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002c5e:	6419      	str	r1, [r3, #64]	; 0x40
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8002c60:	6821      	ldr	r1, [r4, #0]
 8002c62:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002c66:	6021      	str	r1, [r4, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8002c68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002c6a:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8002c6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002c72:	d003      	beq.n	8002c7c <hal_lld_init+0x4c>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8002c74:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002c78:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8002c7a:	671a      	str	r2, [r3, #112]	; 0x70

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002c7c:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <hal_lld_init+0x64>)

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
 8002c7e:	f85d 4b04 	ldr.w	r4, [sp], #4

  PWR->CSR |= PWR_CSR_BRE;
  while ((PWR->CSR & PWR_CSR_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR &= ~PWR_CSR_BRE;
 8002c82:	6853      	ldr	r3, [r2, #4]
 8002c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c88:	6053      	str	r3, [r2, #4]

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();

#if defined(STM32_DMA_REQUIRED)
  dmaInit();
 8002c8a:	f000 b9f1 	b.w	8003070 <dmaInit>
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40007000 	.word	0x40007000
	...

08002ca0 <stm32_clock_init>:
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002ca0:	492c      	ldr	r1, [pc, #176]	; (8002d54 <stm32_clock_init+0xb4>)

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <stm32_clock_init+0xb8>)
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002ca4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002ca8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 */
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* PWR clock enable.*/
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8002cac:	6408      	str	r0, [r1, #64]	; 0x40

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 8002cae:	601a      	str	r2, [r3, #0]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8002cb0:	680b      	ldr	r3, [r1, #0]
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8002cb8:	680a      	ldr	r2, [r1, #0]
 8002cba:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <stm32_clock_init+0xb4>)
 8002cbc:	0790      	lsls	r0, r2, #30
 8002cbe:	d5fb      	bpl.n	8002cb8 <stm32_clock_init+0x18>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW */
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	f022 0203 	bic.w	r2, r2, #3
 8002cc6:	609a      	str	r2, [r3, #8]
  RCC->CFGR |= RCC_CFGR_SWS_HSI;            /* Select HSI as internal*/
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8002ccc:	4619      	mov	r1, r3
 8002cce:	688b      	ldr	r3, [r1, #8]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <stm32_clock_init+0xb4>)
 8002cd2:	f013 030c 	ands.w	r3, r3, #12
 8002cd6:	d1fa      	bne.n	8002cce <stm32_clock_init+0x2e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8002cd8:	6811      	ldr	r1, [r2, #0]
 8002cda:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8002cde:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8002ce0:	6093      	str	r3, [r2, #8]
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ce8:	6013      	str	r3, [r2, #0]
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8002cea:	6811      	ldr	r1, [r2, #0]
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <stm32_clock_init+0xb4>)
 8002cee:	0389      	lsls	r1, r1, #14
 8002cf0:	d5fb      	bpl.n	8002cea <stm32_clock_init+0x4a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8002cf2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	675a      	str	r2, [r3, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8002cfa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002cfc:	4915      	ldr	r1, [pc, #84]	; (8002d54 <stm32_clock_init+0xb4>)
 8002cfe:	0790      	lsls	r0, r2, #30
 8002d00:	d5fb      	bpl.n	8002cfa <stm32_clock_init+0x5a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8002d02:	4b16      	ldr	r3, [pc, #88]	; (8002d5c <stm32_clock_init+0xbc>)
 8002d04:	604b      	str	r3, [r1, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002d06:	680b      	ldr	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002d08:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <stm32_clock_init+0xb8>)

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	600b      	str	r3, [r1, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8002d10:	6853      	ldr	r3, [r2, #4]
 8002d12:	0459      	lsls	r1, r3, #17
 8002d14:	d5fc      	bpl.n	8002d10 <stm32_clock_init+0x70>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8002d16:	490f      	ldr	r1, [pc, #60]	; (8002d54 <stm32_clock_init+0xb4>)
 8002d18:	680a      	ldr	r2, [r1, #0]
 8002d1a:	4b0e      	ldr	r3, [pc, #56]	; (8002d54 <stm32_clock_init+0xb4>)
 8002d1c:	0192      	lsls	r2, r2, #6
 8002d1e:	d5fb      	bpl.n	8002d18 <stm32_clock_init+0x78>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <stm32_clock_init+0xc0>)
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 8002d22:	4910      	ldr	r1, [pc, #64]	; (8002d64 <stm32_clock_init+0xc4>)
 8002d24:	6099      	str	r1, [r3, #8]
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 8002d26:	f240 7105 	movw	r1, #1797	; 0x705
 8002d2a:	6011      	str	r1, [r2, #0]
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	f042 0202 	orr.w	r2, r2, #2
 8002d32:	609a      	str	r2, [r3, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8002d34:	461a      	mov	r2, r3
 8002d36:	6893      	ldr	r3, [r2, #8]
 8002d38:	4906      	ldr	r1, [pc, #24]	; (8002d54 <stm32_clock_init+0xb4>)
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b08      	cmp	r3, #8
 8002d40:	d1f9      	bne.n	8002d36 <stm32_clock_init+0x96>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, TRUE);
 8002d42:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d48:	644b      	str	r3, [r1, #68]	; 0x44
 8002d4a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8002d4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d50:	664b      	str	r3, [r1, #100]	; 0x64
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	07405408 	.word	0x07405408
 8002d60:	40023c00 	.word	0x40023c00
 8002d64:	38889400 	.word	0x38889400
	...

08002d70 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8002d70:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d72:	4b07      	ldr	r3, [pc, #28]	; (8002d90 <Vector6C+0x20>)
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
 8002d74:	4a07      	ldr	r2, [pc, #28]	; (8002d94 <Vector6C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002d76:	6819      	ldr	r1, [r3, #0]
 8002d78:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8002d7c:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[0].dma_func)
 8002d7e:	6813      	ldr	r3, [r2, #0]
 8002d80:	b10b      	cbz	r3, 8002d86 <Vector6C+0x16>
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);
 8002d82:	6850      	ldr	r0, [r2, #4]
 8002d84:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8002d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 0U;
  if (dma_isr_redir[0].dma_func)
    dma_isr_redir[0].dma_func(dma_isr_redir[0].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002d8a:	f7fe be09 	b.w	80019a0 <_port_irq_epilogue>
 8002d8e:	bf00      	nop
 8002d90:	40026000 	.word	0x40026000
 8002d94:	20000ef0 	.word	0x20000ef0
	...

08002da0 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002da0:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <Vector70+0x24>)
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002da2:	4809      	ldr	r0, [pc, #36]	; (8002dc8 <Vector70+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002da4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
 8002da6:	6882      	ldr	r2, [r0, #8]
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002da8:	0989      	lsrs	r1, r1, #6
 8002daa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8002dae:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
 8002db0:	018c      	lsls	r4, r1, #6
 8002db2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[1].dma_func)
 8002db4:	b10a      	cbz	r2, 8002dba <Vector70+0x1a>
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);
 8002db6:	68c0      	ldr	r0, [r0, #12]
 8002db8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 6U;
  if (dma_isr_redir[1].dma_func)
    dma_isr_redir[1].dma_func(dma_isr_redir[1].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dbe:	f7fe bdef 	b.w	80019a0 <_port_irq_epilogue>
 8002dc2:	bf00      	nop
 8002dc4:	40026000 	.word	0x40026000
 8002dc8:	20000ef0 	.word	0x20000ef0
 8002dcc:	00000000 	.word	0x00000000

08002dd0 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dd0:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <Vector74+0x24>)
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002dd2:	4809      	ldr	r0, [pc, #36]	; (8002df8 <Vector74+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dd4:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
 8002dd6:	6902      	ldr	r2, [r0, #16]
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002dd8:	0c09      	lsrs	r1, r1, #16
 8002dda:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8002dde:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
 8002de0:	040c      	lsls	r4, r1, #16
 8002de2:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[2].dma_func)
 8002de4:	b10a      	cbz	r2, 8002dea <Vector74+0x1a>
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);
 8002de6:	6940      	ldr	r0, [r0, #20]
 8002de8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 16U;
  if (dma_isr_redir[2].dma_func)
    dma_isr_redir[2].dma_func(dma_isr_redir[2].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002dee:	f7fe bdd7 	b.w	80019a0 <_port_irq_epilogue>
 8002df2:	bf00      	nop
 8002df4:	40026000 	.word	0x40026000
 8002df8:	20000ef0 	.word	0x20000ef0
 8002dfc:	00000000 	.word	0x00000000

08002e00 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <Vector78+0x24>)
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002e02:	4809      	ldr	r0, [pc, #36]	; (8002e28 <Vector78+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e04:	6819      	ldr	r1, [r3, #0]
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
 8002e06:	6982      	ldr	r2, [r0, #24]
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002e08:	0d89      	lsrs	r1, r1, #22
 8002e0a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8002e0e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
 8002e10:	058c      	lsls	r4, r1, #22
 8002e12:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[3].dma_func)
 8002e14:	b10a      	cbz	r2, 8002e1a <Vector78+0x1a>
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);
 8002e16:	69c0      	ldr	r0, [r0, #28]
 8002e18:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->LIFCR = flags << 22U;
  if (dma_isr_redir[3].dma_func)
    dma_isr_redir[3].dma_func(dma_isr_redir[3].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e1e:	f7fe bdbf 	b.w	80019a0 <_port_irq_epilogue>
 8002e22:	bf00      	nop
 8002e24:	40026000 	.word	0x40026000
 8002e28:	20000ef0 	.word	0x20000ef0
 8002e2c:	00000000 	.word	0x00000000

08002e30 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8002e30:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <Vector7C+0x20>)
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002e34:	4807      	ldr	r0, [pc, #28]	; (8002e54 <Vector7C+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e36:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
 8002e38:	6a02      	ldr	r2, [r0, #32]
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002e3a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8002e3e:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[4].dma_func)
 8002e40:	b10a      	cbz	r2, 8002e46 <Vector7C+0x16>
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);
 8002e42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002e44:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 0U;
  if (dma_isr_redir[4].dma_func)
    dma_isr_redir[4].dma_func(dma_isr_redir[4].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e4a:	f7fe bda9 	b.w	80019a0 <_port_irq_epilogue>
 8002e4e:	bf00      	nop
 8002e50:	40026000 	.word	0x40026000
 8002e54:	20000ef0 	.word	0x20000ef0
	...

08002e60 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <Vector80+0x24>)
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002e62:	4809      	ldr	r0, [pc, #36]	; (8002e88 <Vector80+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e64:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
 8002e66:	6a82      	ldr	r2, [r0, #40]	; 0x28
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002e68:	0989      	lsrs	r1, r1, #6
 8002e6a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8002e6e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
 8002e70:	018c      	lsls	r4, r1, #6
 8002e72:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[5].dma_func)
 8002e74:	b10a      	cbz	r2, 8002e7a <Vector80+0x1a>
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);
 8002e76:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8002e78:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002e7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 6U;
  if (dma_isr_redir[5].dma_func)
    dma_isr_redir[5].dma_func(dma_isr_redir[5].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002e7e:	f7fe bd8f 	b.w	80019a0 <_port_irq_epilogue>
 8002e82:	bf00      	nop
 8002e84:	40026000 	.word	0x40026000
 8002e88:	20000ef0 	.word	0x20000ef0
 8002e8c:	00000000 	.word	0x00000000

08002e90 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e90:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <Vector84+0x24>)
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002e92:	4809      	ldr	r0, [pc, #36]	; (8002eb8 <Vector84+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e94:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
 8002e96:	6b02      	ldr	r2, [r0, #48]	; 0x30
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8002e98:	0c09      	lsrs	r1, r1, #16
 8002e9a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8002e9e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
 8002ea0:	040c      	lsls	r4, r1, #16
 8002ea2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[6].dma_func)
 8002ea4:	b10a      	cbz	r2, 8002eaa <Vector84+0x1a>
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);
 8002ea6:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002ea8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 16U;
  if (dma_isr_redir[6].dma_func)
    dma_isr_redir[6].dma_func(dma_isr_redir[6].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002eae:	f7fe bd77 	b.w	80019a0 <_port_irq_epilogue>
 8002eb2:	bf00      	nop
 8002eb4:	40026000 	.word	0x40026000
 8002eb8:	20000ef0 	.word	0x20000ef0
 8002ebc:	00000000 	.word	0x00000000

08002ec0 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ec0:	4b08      	ldr	r3, [pc, #32]	; (8002ee4 <VectorFC+0x24>)
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002ec2:	4809      	ldr	r0, [pc, #36]	; (8002ee8 <VectorFC+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ec4:	6859      	ldr	r1, [r3, #4]
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
 8002ec6:	6b82      	ldr	r2, [r0, #56]	; 0x38
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8002ec8:	0d89      	lsrs	r1, r1, #22
 8002eca:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8002ece:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
 8002ed0:	058c      	lsls	r4, r1, #22
 8002ed2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[7].dma_func)
 8002ed4:	b10a      	cbz	r2, 8002eda <VectorFC+0x1a>
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);
 8002ed6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8002ed8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA1->HIFCR = flags << 22U;
  if (dma_isr_redir[7].dma_func)
    dma_isr_redir[7].dma_func(dma_isr_redir[7].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002ede:	f7fe bd5f 	b.w	80019a0 <_port_irq_epilogue>
 8002ee2:	bf00      	nop
 8002ee4:	40026000 	.word	0x40026000
 8002ee8:	20000ef0 	.word	0x20000ef0
 8002eec:	00000000 	.word	0x00000000

08002ef0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8002ef0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ef2:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <Vector120+0x20>)
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <Vector120+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002ef6:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
 8002ef8:	6c02      	ldr	r2, [r0, #64]	; 0x40
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8002efa:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8002efe:	6099      	str	r1, [r3, #8]
  if (dma_isr_redir[8].dma_func)
 8002f00:	b10a      	cbz	r2, 8002f06 <Vector120+0x16>
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);
 8002f02:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002f04:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 0U;
  if (dma_isr_redir[8].dma_func)
    dma_isr_redir[8].dma_func(dma_isr_redir[8].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f0a:	f7fe bd49 	b.w	80019a0 <_port_irq_epilogue>
 8002f0e:	bf00      	nop
 8002f10:	40026400 	.word	0x40026400
 8002f14:	20000ef0 	.word	0x20000ef0
	...

08002f20 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <Vector124+0x24>)
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002f22:	4809      	ldr	r0, [pc, #36]	; (8002f48 <Vector124+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f24:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
 8002f26:	6c82      	ldr	r2, [r0, #72]	; 0x48
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8002f28:	0989      	lsrs	r1, r1, #6
 8002f2a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8002f2e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
 8002f30:	018c      	lsls	r4, r1, #6
 8002f32:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[9].dma_func)
 8002f34:	b10a      	cbz	r2, 8002f3a <Vector124+0x1a>
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);
 8002f36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8002f38:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 6U;
  if (dma_isr_redir[9].dma_func)
    dma_isr_redir[9].dma_func(dma_isr_redir[9].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f3e:	f7fe bd2f 	b.w	80019a0 <_port_irq_epilogue>
 8002f42:	bf00      	nop
 8002f44:	40026400 	.word	0x40026400
 8002f48:	20000ef0 	.word	0x20000ef0
 8002f4c:	00000000 	.word	0x00000000

08002f50 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f50:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <Vector128+0x24>)
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002f52:	4809      	ldr	r0, [pc, #36]	; (8002f78 <Vector128+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f54:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
 8002f56:	6d02      	ldr	r2, [r0, #80]	; 0x50
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 8002f58:	0c09      	lsrs	r1, r1, #16
 8002f5a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8002f5e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
 8002f60:	040c      	lsls	r4, r1, #16
 8002f62:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[10].dma_func)
 8002f64:	b10a      	cbz	r2, 8002f6a <Vector128+0x1a>
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);
 8002f66:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8002f68:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 16U;
  if (dma_isr_redir[10].dma_func)
    dma_isr_redir[10].dma_func(dma_isr_redir[10].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f6e:	f7fe bd17 	b.w	80019a0 <_port_irq_epilogue>
 8002f72:	bf00      	nop
 8002f74:	40026400 	.word	0x40026400
 8002f78:	20000ef0 	.word	0x20000ef0
 8002f7c:	00000000 	.word	0x00000000

08002f80 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <Vector12C+0x24>)
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <Vector12C+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f84:	6819      	ldr	r1, [r3, #0]
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
 8002f86:	6d82      	ldr	r2, [r0, #88]	; 0x58
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8002f88:	0d89      	lsrs	r1, r1, #22
 8002f8a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8002f8e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
 8002f90:	058c      	lsls	r4, r1, #22
 8002f92:	609c      	str	r4, [r3, #8]
  if (dma_isr_redir[11].dma_func)
 8002f94:	b10a      	cbz	r2, 8002f9a <Vector12C+0x1a>
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);
 8002f96:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8002f98:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->LIFCR = flags << 22U;
  if (dma_isr_redir[11].dma_func)
    dma_isr_redir[11].dma_func(dma_isr_redir[11].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002f9e:	f7fe bcff 	b.w	80019a0 <_port_irq_epilogue>
 8002fa2:	bf00      	nop
 8002fa4:	40026400 	.word	0x40026400
 8002fa8:	20000ef0 	.word	0x20000ef0
 8002fac:	00000000 	.word	0x00000000

08002fb0 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8002fb0:	b508      	push	{r3, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <Vector130+0x20>)
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002fb4:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <Vector130+0x24>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002fb6:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
 8002fb8:	6e02      	ldr	r2, [r0, #96]	; 0x60
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8002fba:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8002fbe:	60d9      	str	r1, [r3, #12]
  if (dma_isr_redir[12].dma_func)
 8002fc0:	b10a      	cbz	r2, 8002fc6 <Vector130+0x16>
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);
 8002fc2:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8002fc4:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002fc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 0U;
  if (dma_isr_redir[12].dma_func)
    dma_isr_redir[12].dma_func(dma_isr_redir[12].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002fca:	f7fe bce9 	b.w	80019a0 <_port_irq_epilogue>
 8002fce:	bf00      	nop
 8002fd0:	40026400 	.word	0x40026400
 8002fd4:	20000ef0 	.word	0x20000ef0
	...

08002fe0 <Vector150>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <Vector150+0x24>)
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002fe2:	4809      	ldr	r0, [pc, #36]	; (8003008 <Vector150+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002fe4:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
 8002fe6:	6e82      	ldr	r2, [r0, #104]	; 0x68
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8002fe8:	0989      	lsrs	r1, r1, #6
 8002fea:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8002fee:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
 8002ff0:	018c      	lsls	r4, r1, #6
 8002ff2:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[13].dma_func)
 8002ff4:	b10a      	cbz	r2, 8002ffa <Vector150+0x1a>
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);
 8002ff6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8002ff8:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 8002ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 6U;
  if (dma_isr_redir[13].dma_func)
    dma_isr_redir[13].dma_func(dma_isr_redir[13].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 8002ffe:	f7fe bccf 	b.w	80019a0 <_port_irq_epilogue>
 8003002:	bf00      	nop
 8003004:	40026400 	.word	0x40026400
 8003008:	20000ef0 	.word	0x20000ef0
 800300c:	00000000 	.word	0x00000000

08003010 <Vector154>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <Vector154+0x24>)
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <Vector154+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003014:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
 8003016:	6f02      	ldr	r2, [r0, #112]	; 0x70
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 8003018:	0c09      	lsrs	r1, r1, #16
 800301a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 800301e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
 8003020:	040c      	lsls	r4, r1, #16
 8003022:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[14].dma_func)
 8003024:	b10a      	cbz	r2, 800302a <Vector154+0x1a>
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);
 8003026:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8003028:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800302a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 16U;
  if (dma_isr_redir[14].dma_func)
    dma_isr_redir[14].dma_func(dma_isr_redir[14].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800302e:	f7fe bcb7 	b.w	80019a0 <_port_irq_epilogue>
 8003032:	bf00      	nop
 8003034:	40026400 	.word	0x40026400
 8003038:	20000ef0 	.word	0x20000ef0
 800303c:	00000000 	.word	0x00000000

08003040 <Vector158>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <Vector158+0x24>)
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8003042:	4809      	ldr	r0, [pc, #36]	; (8003068 <Vector158+0x28>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003044:	6859      	ldr	r1, [r3, #4]
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
 8003046:	6f82      	ldr	r2, [r0, #120]	; 0x78
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8003048:	0d89      	lsrs	r1, r1, #22
 800304a:	f001 013d 	and.w	r1, r1, #61	; 0x3d
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 800304e:	b510      	push	{r4, lr}
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
 8003050:	058c      	lsls	r4, r1, #22
 8003052:	60dc      	str	r4, [r3, #12]
  if (dma_isr_redir[15].dma_func)
 8003054:	b10a      	cbz	r2, 800305a <Vector158+0x1a>
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);
 8003056:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8003058:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
}
 800305a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  DMA2->HIFCR = flags << 22U;
  if (dma_isr_redir[15].dma_func)
    dma_isr_redir[15].dma_func(dma_isr_redir[15].dma_param, flags);

  OSAL_IRQ_EPILOGUE();
 800305e:	f7fe bc9f 	b.w	80019a0 <_port_irq_epilogue>
 8003062:	bf00      	nop
 8003064:	40026400 	.word	0x40026400
 8003068:	20000ef0 	.word	0x20000ef0
 800306c:	00000000 	.word	0x00000000

08003070 <dmaInit>:
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
 8003070:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <dmaInit+0x38>)
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
 8003072:	b430      	push	{r4, r5}
  unsigned i;

  dma_streams_mask = 0U;
 8003074:	2200      	movs	r2, #0
 8003076:	4d0d      	ldr	r5, [pc, #52]	; (80030ac <dmaInit+0x3c>)
 8003078:	4c0d      	ldr	r4, [pc, #52]	; (80030b0 <dmaInit+0x40>)
 800307a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
 800307c:	4611      	mov	r1, r2
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 800307e:	4613      	mov	r3, r2
    _stm32_dma_streams[i].stream->CR = 0U;
 8003080:	58a8      	ldr	r0, [r5, r2]
 8003082:	6001      	str	r1, [r0, #0]
    dma_isr_redir[i].dma_func = NULL;
 8003084:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
 */
void dmaInit(void) {
  unsigned i;

  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8003088:	3301      	adds	r3, #1
 800308a:	2b10      	cmp	r3, #16
 800308c:	f102 020c 	add.w	r2, r2, #12
 8003090:	d1f6      	bne.n	8003080 <dmaInit+0x10>
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003092:	4908      	ldr	r1, [pc, #32]	; (80030b4 <dmaInit+0x44>)
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8003094:	4a08      	ldr	r2, [pc, #32]	; (80030b8 <dmaInit+0x48>)
  dma_streams_mask = 0U;
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309a:	608b      	str	r3, [r1, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
  DMA2->HIFCR = 0xFFFFFFFFU;
}
 800309c:	bc30      	pop	{r4, r5}
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = 0U;
    dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  DMA1->HIFCR = 0xFFFFFFFFU;
 800309e:	60cb      	str	r3, [r1, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
 80030a0:	6093      	str	r3, [r2, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
 80030a2:	60d3      	str	r3, [r2, #12]
}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20000f70 	.word	0x20000f70
 80030ac:	08007880 	.word	0x08007880
 80030b0:	20000ef0 	.word	0x20000ef0
 80030b4:	40026000 	.word	0x40026000
 80030b8:	40026400 	.word	0x40026400
 80030bc:	00000000 	.word	0x00000000

080030c0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
 80030c2:	4f1f      	ldr	r7, [pc, #124]	; (8003140 <dmaStreamAllocate+0x80>)
 80030c4:	7a46      	ldrb	r6, [r0, #9]
 80030c6:	683d      	ldr	r5, [r7, #0]
 80030c8:	2401      	movs	r4, #1
 80030ca:	fa04 fe06 	lsl.w	lr, r4, r6
 80030ce:	ea1e 0f05 	tst.w	lr, r5
 80030d2:	d131      	bne.n	8003138 <dmaStreamAllocate+0x78>
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80030d4:	4c1b      	ldr	r4, [pc, #108]	; (8003144 <dmaStreamAllocate+0x84>)
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 80030d6:	ea4e 0505 	orr.w	r5, lr, r5
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80030da:	eb04 0cc6 	add.w	ip, r4, r6, lsl #3
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80030de:	f015 0fff 	tst.w	r5, #255	; 0xff
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
  dma_isr_redir[dmastp->selfindex].dma_param = param;
  dma_streams_mask |= (1U << dmastp->selfindex);
 80030e2:	603d      	str	r5, [r7, #0]
  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Marks the stream as allocated.*/
  dma_isr_redir[dmastp->selfindex].dma_func  = func;
 80030e4:	f844 2036 	str.w	r2, [r4, r6, lsl #3]
  dma_isr_redir[dmastp->selfindex].dma_param = param;
 80030e8:	f8cc 3004 	str.w	r3, [ip, #4]
  dma_streams_mask |= (1U << dmastp->selfindex);

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
 80030ec:	d004      	beq.n	80030f8 <dmaStreamAllocate+0x38>
    rccEnableDMA1(false);
 80030ee:	4c16      	ldr	r4, [pc, #88]	; (8003148 <dmaStreamAllocate+0x88>)
 80030f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030f6:	6323      	str	r3, [r4, #48]	; 0x30
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
 80030f8:	f415 4f7f 	tst.w	r5, #65280	; 0xff00
 80030fc:	d116      	bne.n	800312c <dmaStreamAllocate+0x6c>
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 80030fe:	6805      	ldr	r5, [r0, #0]
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	f023 031f 	bic.w	r3, r3, #31
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	f013 0401 	ands.w	r4, r3, #1
 800310e:	d1fb      	bne.n	8003108 <dmaStreamAllocate+0x48>
 8003110:	7a07      	ldrb	r7, [r0, #8]
 8003112:	6846      	ldr	r6, [r0, #4]
 8003114:	233d      	movs	r3, #61	; 0x3d
 8003116:	40bb      	lsls	r3, r7
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 8003118:	2721      	movs	r7, #33	; 0x21
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
  }

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800311a:	6033      	str	r3, [r6, #0]
  dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
 800311c:	602c      	str	r4, [r5, #0]
  dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
 800311e:	616f      	str	r7, [r5, #20]

  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
 8003120:	b162      	cbz	r2, 800313c <dmaStreamAllocate+0x7c>
    nvicEnableVector(dmastp->vector, priority);
 8003122:	7a80      	ldrb	r0, [r0, #10]
 8003124:	f7ff fd5c 	bl	8002be0 <nvicEnableVector>
  }

  return false;
 8003128:	4620      	mov	r0, r4
 800312a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma_streams_mask & STM32_DMA1_STREAMS_MASK) != 0U) {
    rccEnableDMA1(false);
  }
  if ((dma_streams_mask & STM32_DMA2_STREAMS_MASK) != 0U) {
    rccEnableDMA2(false);
 800312c:	4c06      	ldr	r4, [pc, #24]	; (8003148 <dmaStreamAllocate+0x88>)
 800312e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003134:	6323      	str	r3, [r4, #48]	; 0x30
 8003136:	e7e2      	b.n	80030fe <dmaStreamAllocate+0x3e>

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma_streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 8003138:	4620      	mov	r0, r4
 800313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /* Enables the associated IRQ vector if a callback is defined.*/
  if (func != NULL) {
    nvicEnableVector(dmastp->vector, priority);
  }

  return false;
 800313c:	4610      	mov	r0, r2
}
 800313e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003140:	20000f70 	.word	0x20000f70
 8003144:	20000ef0 	.word	0x20000ef0
 8003148:	40023800 	.word	0x40023800
 800314c:	00000000 	.word	0x00000000

08003150 <SysTick_Handler>:
 * @brief   System Timer vector.
 * @details This interrupt is used for system tick in periodic mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(SysTick_Handler) {
 8003150:	b508      	push	{r3, lr}
 8003152:	2320      	movs	r3, #32
 8003154:	f383 8811 	msr	BASEPRI, r3
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
 8003158:	f7fd ff12 	bl	8000f80 <chSysTimerHandlerI>
 800315c:	2300      	movs	r3, #0
 800315e:	f383 8811 	msr	BASEPRI, r3
  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
}
 8003162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
 8003166:	f7fe bc1b 	b.w	80019a0 <_port_irq_epilogue>
 800316a:	bf00      	nop
 800316c:	0000      	movs	r0, r0
	...

08003170 <st_lld_init>:
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <st_lld_init+0x18>)
 8003172:	f244 109f 	movw	r0, #16799	; 0x419f
  SysTick->VAL = 0;
 8003176:	2100      	movs	r1, #0
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003178:	2207      	movs	r2, #7
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING */

#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
 800317a:	6058      	str	r0, [r3, #4]
  SysTick->VAL = 0;
 800317c:	6099      	str	r1, [r3, #8]
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 800317e:	200b      	movs	r0, #11
 8003180:	2108      	movs	r1, #8
#if OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC
  /* Periodic systick mode, the Cortex-Mx internal systick timer is used
     in this mode.*/
  SysTick->LOAD = (STM32_HCLK / OSAL_ST_FREQUENCY) - 1;
  SysTick->VAL = 0;
  SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8003182:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_ENABLE_Msk |
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
 8003184:	f7ff bd4c 	b.w	8002c20 <nvicSetSystemHandlerPriority>
 8003188:	e000e010 	.word	0xe000e010
 800318c:	00000000 	.word	0x00000000

08003190 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
 8003190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8003192:	4f12      	ldr	r7, [pc, #72]	; (80031dc <adc_lld_init+0x4c>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8003194:	4e12      	ldr	r6, [pc, #72]	; (80031e0 <adc_lld_init+0x50>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8003196:	4d13      	ldr	r5, [pc, #76]	; (80031e4 <adc_lld_init+0x54>)

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8003198:	4c13      	ldr	r4, [pc, #76]	; (80031e8 <adc_lld_init+0x58>)
 */
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 800319a:	4638      	mov	r0, r7
 800319c:	f7fe fee0 	bl	8001f60 <adcObjectInit>
  ADCD1.adc = ADC1;
 80031a0:	4a12      	ldr	r2, [pc, #72]	; (80031ec <adc_lld_init+0x5c>)
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80031a2:	4b13      	ldr	r3, [pc, #76]	; (80031f0 <adc_lld_init+0x60>)
void adc_lld_init(void) {

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
 80031a4:	62ba      	str	r2, [r7, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80031a6:	4630      	mov	r0, r6
#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  ADCD1.adc = ADC1;
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80031aa:	62fc      	str	r4, [r7, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80031ac:	f7fe fed8 	bl	8001f60 <adcObjectInit>
  ADCD2.adc = ADC2;
 80031b0:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <adc_lld_init+0x64>)
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <adc_lld_init+0x68>)
#endif

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
 80031b4:	62b2      	str	r2, [r6, #40]	; 0x28
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 80031b6:	4628      	mov	r0, r5

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
  ADCD2.adc = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 80031b8:	f1a4 0218 	sub.w	r2, r4, #24
 80031bc:	62f2      	str	r2, [r6, #44]	; 0x2c
  ADCD2.dmamode = STM32_DMA_CR_CHSEL(ADC2_DMA_CHANNEL) |
 80031be:	6333      	str	r3, [r6, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80031c0:	3c24      	subs	r4, #36	; 0x24
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 80031c2:	f7fe fecd 	bl	8001f60 <adcObjectInit>
  ADCD3.adc = ADC3;
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <adc_lld_init+0x6c>)
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <adc_lld_init+0x70>)
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80031ca:	62ec      	str	r4, [r5, #44]	; 0x2c
#endif

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
  ADCD3.adc = ADC3;
 80031cc:	62aa      	str	r2, [r5, #40]	; 0x28
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = STM32_DMA_CR_CHSEL(ADC3_DMA_CHANNEL) |
 80031ce:	632b      	str	r3, [r5, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 80031d0:	2012      	movs	r0, #18
 80031d2:	2106      	movs	r1, #6
}
 80031d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
 80031d8:	f7ff bd02 	b.w	8002be0 <nvicEnableVector>
 80031dc:	20000f74 	.word	0x20000f74
 80031e0:	20000fa8 	.word	0x20000fa8
 80031e4:	20000fdc 	.word	0x20000fdc
 80031e8:	08007910 	.word	0x08007910
 80031ec:	40012000 	.word	0x40012000
 80031f0:	00022c16 	.word	0x00022c16
 80031f4:	40012100 	.word	0x40012100
 80031f8:	02022c16 	.word	0x02022c16
 80031fc:	04022c16 	.word	0x04022c16
 8003200:	40012200 	.word	0x40012200
	...

08003210 <adc_lld_stop_conversion>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003210:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003212:	680a      	ldr	r2, [r1, #0]
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	f023 031f 	bic.w	r3, r3, #31
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	f013 0301 	ands.w	r3, r3, #1
 8003222:	d1fb      	bne.n	800321c <adc_lld_stop_conversion+0xc>
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8003224:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8003226:	7a0d      	ldrb	r5, [r1, #8]
 8003228:	684c      	ldr	r4, [r1, #4]
  adcp->adc->CR1 = 0;
 800322a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 800322c:	213d      	movs	r1, #61	; 0x3d
 800322e:	40a9      	lsls	r1, r5
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
 8003230:	2001      	movs	r0, #1
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8003232:	6021      	str	r1, [r4, #0]
  adcp->adc->CR1 = 0;
 8003234:	6053      	str	r3, [r2, #4]
  adcp->adc->CR2 = 0;
  adcp->adc->CR2 = ADC_CR2_ADON;
}
 8003236:	bc30      	pop	{r4, r5}
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adcp->adc->CR1 = 0;
  adcp->adc->CR2 = 0;
 8003238:	6093      	str	r3, [r2, #8]
  adcp->adc->CR2 = ADC_CR2_ADON;
 800323a:	6090      	str	r0, [r2, #8]
}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
 8003240:	b538      	push	{r3, r4, r5, lr}
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
 8003242:	4b42      	ldr	r3, [pc, #264]	; (800334c <Vector88+0x10c>)
 8003244:	681a      	ldr	r2, [r3, #0]
  ADC1->SR = 0;
 8003246:	2100      	movs	r1, #0
 8003248:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
 800324a:	0691      	lsls	r1, r2, #26
 800324c:	d505      	bpl.n	800325a <Vector88+0x1a>
 800324e:	4c40      	ldr	r4, [pc, #256]	; (8003350 <Vector88+0x110>)
 8003250:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d157      	bne.n	800330a <Vector88+0xca>
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
 800325a:	4b3e      	ldr	r3, [pc, #248]	; (8003354 <Vector88+0x114>)
 800325c:	681a      	ldr	r2, [r3, #0]
  ADC2->SR = 0;
 800325e:	2100      	movs	r1, #0
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 8003260:	0692      	lsls	r2, r2, #26
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  sr = ADC2->SR;
  ADC2->SR = 0;
 8003262:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
 8003264:	d504      	bpl.n	8003270 <Vector88+0x30>
 8003266:	4c3c      	ldr	r4, [pc, #240]	; (8003358 <Vector88+0x118>)
 8003268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	bb63      	cbnz	r3, 80032ca <Vector88+0x8a>
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  sr = ADC3->SR;
 8003270:	4b3a      	ldr	r3, [pc, #232]	; (800335c <Vector88+0x11c>)
 8003272:	681a      	ldr	r2, [r3, #0]
  ADC3->SR = 0;
 8003274:	2100      	movs	r1, #0
 8003276:	6019      	str	r1, [r3, #0]
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD3.dmastp) > 0)) {
 8003278:	0693      	lsls	r3, r2, #26
 800327a:	d522      	bpl.n	80032c2 <Vector88+0x82>
 800327c:	4c38      	ldr	r4, [pc, #224]	; (8003360 <Vector88+0x120>)
 800327e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	b1eb      	cbz	r3, 80032c2 <Vector88+0x82>
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD3.grpp != NULL)
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	b1db      	cbz	r3, 80032c2 <Vector88+0x82>
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
 800328a:	4620      	mov	r0, r4
 800328c:	f7ff ffc0 	bl	8003210 <adc_lld_stop_conversion>
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	b14b      	cbz	r3, 80032aa <Vector88+0x6a>
 8003296:	2205      	movs	r2, #5
 8003298:	7022      	strb	r2, [r4, #0]
 800329a:	4620      	mov	r0, r4
 800329c:	2101      	movs	r1, #1
 800329e:	4798      	blx	r3
 80032a0:	7823      	ldrb	r3, [r4, #0]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	bf04      	itt	eq
 80032a6:	2302      	moveq	r3, #2
 80032a8:	7023      	strbeq	r3, [r4, #0]
 80032aa:	2500      	movs	r5, #0
 80032ac:	6125      	str	r5, [r4, #16]
 80032ae:	2320      	movs	r3, #32
 80032b0:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 80032b4:	482b      	ldr	r0, [pc, #172]	; (8003364 <Vector88+0x124>)
 80032b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032ba:	f7fe f929 	bl	8001510 <chThdResumeI>
 80032be:	f385 8811 	msr	BASEPRI, r5
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
}
 80032c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      _adc_isr_error_code(&ADCD3, ADC_ERR_OVERFLOW);
  }
  /* TODO: Add here analog watchdog handling.*/
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
 80032c6:	f7fe bb6b 	b.w	80019a0 <_port_irq_epilogue>
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD2.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD2.grpp != NULL)
 80032ca:	6923      	ldr	r3, [r4, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0cf      	beq.n	8003270 <Vector88+0x30>
      _adc_isr_error_code(&ADCD2, ADC_ERR_OVERFLOW);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff9d 	bl	8003210 <adc_lld_stop_conversion>
 80032d6:	6923      	ldr	r3, [r4, #16]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	b14b      	cbz	r3, 80032f0 <Vector88+0xb0>
 80032dc:	2205      	movs	r2, #5
 80032de:	7022      	strb	r2, [r4, #0]
 80032e0:	4620      	mov	r0, r4
 80032e2:	2101      	movs	r1, #1
 80032e4:	4798      	blx	r3
 80032e6:	7823      	ldrb	r3, [r4, #0]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	bf04      	itt	eq
 80032ec:	2302      	moveq	r3, #2
 80032ee:	7023      	strbeq	r3, [r4, #0]
 80032f0:	2500      	movs	r5, #0
 80032f2:	6125      	str	r5, [r4, #16]
 80032f4:	2320      	movs	r3, #32
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	481b      	ldr	r0, [pc, #108]	; (8003368 <Vector88+0x128>)
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003300:	f7fe f906 	bl	8001510 <chThdResumeI>
 8003304:	f385 8811 	msr	BASEPRI, r5
 8003308:	e7b2      	b.n	8003270 <Vector88+0x30>
  /* Note, an overflow may occur after the conversion ended before the driver
     is able to stop the ADC, this is why the DMA channel is checked too.*/
  if ((sr & ADC_SR_OVR) && (dmaStreamGetTransactionSize(ADCD1.dmastp) > 0)) {
    /* ADC overflow condition, this could happen only if the DMA is unable
       to read data fast enough.*/
    if (ADCD1.grpp != NULL)
 800330a:	6923      	ldr	r3, [r4, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0a4      	beq.n	800325a <Vector88+0x1a>
      _adc_isr_error_code(&ADCD1, ADC_ERR_OVERFLOW);
 8003310:	4620      	mov	r0, r4
 8003312:	f7ff ff7d 	bl	8003210 <adc_lld_stop_conversion>
 8003316:	6923      	ldr	r3, [r4, #16]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	b14b      	cbz	r3, 8003330 <Vector88+0xf0>
 800331c:	2205      	movs	r2, #5
 800331e:	7022      	strb	r2, [r4, #0]
 8003320:	4620      	mov	r0, r4
 8003322:	2101      	movs	r1, #1
 8003324:	4798      	blx	r3
 8003326:	7823      	ldrb	r3, [r4, #0]
 8003328:	2b05      	cmp	r3, #5
 800332a:	bf04      	itt	eq
 800332c:	2302      	moveq	r3, #2
 800332e:	7023      	strbeq	r3, [r4, #0]
 8003330:	2500      	movs	r5, #0
 8003332:	6125      	str	r5, [r4, #16]
 8003334:	2320      	movs	r3, #32
 8003336:	f383 8811 	msr	BASEPRI, r3
 800333a:	480c      	ldr	r0, [pc, #48]	; (800336c <Vector88+0x12c>)
 800333c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003340:	f7fe f8e6 	bl	8001510 <chThdResumeI>
 8003344:	f385 8811 	msr	BASEPRI, r5
 8003348:	e787      	b.n	800325a <Vector88+0x1a>
 800334a:	bf00      	nop
 800334c:	40012000 	.word	0x40012000
 8003350:	20000f74 	.word	0x20000f74
 8003354:	40012100 	.word	0x40012100
 8003358:	20000fa8 	.word	0x20000fa8
 800335c:	40012200 	.word	0x40012200
 8003360:	20000fdc 	.word	0x20000fdc
 8003364:	20000ff0 	.word	0x20000ff0
 8003368:	20000fbc 	.word	0x20000fbc
 800336c:	20000f88 	.word	0x20000f88

08003370 <ext_lld_init>:
 * @notapi
 */
void ext_lld_init(void) {

  /* Driver initialization.*/
  extObjectInit(&EXTD1);
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <ext_lld_init+0x8>)
 8003372:	f7fe be0d 	b.w	8001f90 <extObjectInit>
 8003376:	bf00      	nop
 8003378:	20001010 	.word	0x20001010
 800337c:	00000000 	.word	0x00000000

08003380 <ext_lld_channel_enable>:
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 8003380:	f001 021f 	and.w	r2, r1, #31
 8003384:	2301      	movs	r3, #1

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
 8003386:	290f      	cmp	r1, #15
 * @param[in] extp      pointer to the @p EXTDriver object
 * @param[in] channel   channel to be enabled
 *
 * @notapi
 */
void ext_lld_channel_enable(EXTDriver *extp, expchannel_t channel) {
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t cmask = (1 << (channel & 0x1F));
 800338a:	fa03 f302 	lsl.w	r3, r3, r2

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
 800338e:	d91d      	bls.n	80033cc <ext_lld_channel_enable+0x4c>
 8003390:	6842      	ldr	r2, [r0, #4]
 8003392:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    if ((cmask & STM32_EXTI_IMR_MASK) != 0U) {
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 8003396:	07c4      	lsls	r4, r0, #31
 8003398:	d533      	bpl.n	8003402 <ext_lld_channel_enable+0x82>
      EXTI->RTSR |= cmask;
 800339a:	4d21      	ldr	r5, [pc, #132]	; (8003420 <ext_lld_channel_enable+0xa0>)
 800339c:	68ac      	ldr	r4, [r5, #8]
 800339e:	431c      	orrs	r4, r3
 80033a0:	60ac      	str	r4, [r5, #8]
 80033a2:	43dc      	mvns	r4, r3
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
      EXTI->FTSR |= cmask;
 80033a4:	4d1e      	ldr	r5, [pc, #120]	; (8003420 <ext_lld_channel_enable+0xa0>)
    else
      EXTI->FTSR &= ~cmask;

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 80033a6:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
 80033aa:	f010 0f02 	tst.w	r0, #2
      EXTI->FTSR |= cmask;
 80033ae:	68e8      	ldr	r0, [r5, #12]
    else
      EXTI->FTSR &= ~cmask;

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 80033b0:	684a      	ldr	r2, [r1, #4]
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
    if (extp->config->channels[channel].mode & EXT_CH_MODE_FALLING_EDGE)
      EXTI->FTSR |= cmask;
 80033b2:	bf14      	ite	ne
 80033b4:	4318      	orrne	r0, r3
    else
      EXTI->FTSR &= ~cmask;
 80033b6:	4020      	andeq	r0, r4
 80033b8:	60e8      	str	r0, [r5, #12]

    /* Programming interrupt and event registers.*/
    if (extp->config->channels[channel].cb != NULL) {
 80033ba:	b342      	cbz	r2, 800340e <ext_lld_channel_enable+0x8e>
      EXTI->IMR |= cmask;
 80033bc:	4a18      	ldr	r2, [pc, #96]	; (8003420 <ext_lld_channel_enable+0xa0>)
 80033be:	6811      	ldr	r1, [r2, #0]
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6013      	str	r3, [r2, #0]
      EXTI->EMR &= ~cmask;
 80033c4:	6853      	ldr	r3, [r2, #4]
 80033c6:	4023      	ands	r3, r4
 80033c8:	6053      	str	r3, [r2, #4]
 80033ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033cc:	f021 0403 	bic.w	r4, r1, #3

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
    uint32_t port = ((extp->config->channels[channel].mode &
 80033d0:	6842      	ldr	r2, [r0, #4]
 80033d2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80033d6:	f504 349c 	add.w	r4, r4, #79872	; 0x13800
 80033da:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 80033de:	68a7      	ldr	r7, [r4, #8]
  uint32_t cmask = (1 << (channel & 0x1F));

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
 80033e0:	f001 0503 	and.w	r5, r1, #3
 80033e4:	00ad      	lsls	r5, r5, #2
 80033e6:	f04f 0e0f 	mov.w	lr, #15
 80033ea:	fa0e fe05 	lsl.w	lr, lr, r5
    uint32_t port = ((extp->config->channels[channel].mode &
                      EXT_MODE_GPIO_MASK) >>
 80033ee:	f3c0 1603 	ubfx	r6, r0, #4, #4
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 80033f2:	ea27 070e 	bic.w	r7, r7, lr

  /* Setting the associated GPIO for external channels.*/
  if (channel < 16) {
    uint32_t n = channel >> 2;
    uint32_t mask = ~(0xF << ((channel & 3) * 4));
    uint32_t port = ((extp->config->channels[channel].mode &
 80033f6:	fa06 f505 	lsl.w	r5, r6, r5
                     EXT_MODE_GPIO_OFF) << ((channel & 3) * 4);

#if defined(STM32F1XX)
    AFIO->EXTICR[n] = (AFIO->EXTICR[n] & mask) | port;
#else /* !defined(STM32F1XX) */
    SYSCFG->EXTICR[n] = (SYSCFG->EXTICR[n] & mask) | port;
 80033fa:	433d      	orrs	r5, r7
 80033fc:	60a5      	str	r5, [r4, #8]
    if ((cmask & STM32_EXTI_IMR_MASK) != 0U) {
      return;
    }

    /* Programming edge registers.*/
    if (extp->config->channels[channel].mode & EXT_CH_MODE_RISING_EDGE)
 80033fe:	07c4      	lsls	r4, r0, #31
 8003400:	d4cb      	bmi.n	800339a <ext_lld_channel_enable+0x1a>
      EXTI->RTSR |= cmask;
    else
      EXTI->RTSR &= ~cmask;
 8003402:	4e07      	ldr	r6, [pc, #28]	; (8003420 <ext_lld_channel_enable+0xa0>)
 8003404:	68b5      	ldr	r5, [r6, #8]
 8003406:	43dc      	mvns	r4, r3
 8003408:	4025      	ands	r5, r4
 800340a:	60b5      	str	r5, [r6, #8]
 800340c:	e7ca      	b.n	80033a4 <ext_lld_channel_enable+0x24>
    if (extp->config->channels[channel].cb != NULL) {
      EXTI->IMR |= cmask;
      EXTI->EMR &= ~cmask;
    }
    else {
      EXTI->EMR |= cmask;
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <ext_lld_channel_enable+0xa0>)
 8003410:	6851      	ldr	r1, [r2, #4]
 8003412:	430b      	orrs	r3, r1
 8003414:	6053      	str	r3, [r2, #4]
      EXTI->IMR &= ~cmask;
 8003416:	6813      	ldr	r3, [r2, #0]
 8003418:	4023      	ands	r3, r4
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800341e:	bf00      	nop
 8003420:	40013c00 	.word	0x40013c00
	...

08003430 <ext_lld_channel_disable>:
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <ext_lld_channel_disable+0x28>)
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 8003432:	f001 011f 	and.w	r1, r1, #31
 8003436:	2201      	movs	r2, #1
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 8003438:	6818      	ldr	r0, [r3, #0]
 * @param[in] channel   channel to be disabled
 *
 * @notapi
 */
void ext_lld_channel_disable(EXTDriver *extp, expchannel_t channel) {
  uint32_t cmask = (1 << (channel & 0x1F));
 800343a:	408a      	lsls	r2, r1
  (void)extp;

#if STM32_EXTI_NUM_LINES > 32
  if (channel < 32) {
#endif
    EXTI->IMR  &= ~cmask;
 800343c:	43d1      	mvns	r1, r2
 800343e:	4008      	ands	r0, r1
 8003440:	6018      	str	r0, [r3, #0]
    EXTI->EMR  &= ~cmask;
 8003442:	6858      	ldr	r0, [r3, #4]
 8003444:	4008      	ands	r0, r1
 8003446:	6058      	str	r0, [r3, #4]
    EXTI->RTSR &= ~cmask;
 8003448:	6898      	ldr	r0, [r3, #8]
 800344a:	4008      	ands	r0, r1
 800344c:	6098      	str	r0, [r3, #8]
    EXTI->FTSR &= ~cmask;
 800344e:	68d8      	ldr	r0, [r3, #12]
 8003450:	4001      	ands	r1, r0
 8003452:	60d9      	str	r1, [r3, #12]
    EXTI->PR    =  cmask;
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	4770      	bx	lr
 8003458:	40013c00 	.word	0x40013c00
 800345c:	00000000 	.word	0x00000000

08003460 <ext_lld_start>:
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 8003460:	b538      	push	{r3, r4, r5, lr}
  expchannel_t line;

  if (extp->state == EXT_STOP)
 8003462:	7803      	ldrb	r3, [r0, #0]
 8003464:	2b01      	cmp	r3, #1
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 8003466:	4605      	mov	r5, r0
  expchannel_t line;

  if (extp->state == EXT_STOP)
 8003468:	d016      	beq.n	8003498 <ext_lld_start+0x38>
 *
 * @param[in] extp      pointer to the @p EXTDriver object
 *
 * @notapi
 */
void ext_lld_start(EXTDriver *extp) {
 800346a:	2400      	movs	r4, #0
 800346c:	e004      	b.n	8003478 <ext_lld_start+0x18>

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 800346e:	3401      	adds	r4, #1
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
 8003470:	f7ff ff86 	bl	8003380 <ext_lld_channel_enable>

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 8003474:	2c17      	cmp	r4, #23
 8003476:	d00e      	beq.n	8003496 <ext_lld_start+0x36>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 8003478:	686b      	ldr	r3, [r5, #4]
 800347a:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
 800347e:	f013 0f04 	tst.w	r3, #4
      ext_lld_channel_enable(extp, line);
 8003482:	4628      	mov	r0, r5
 8003484:	4621      	mov	r1, r4
  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
 8003486:	d1f2      	bne.n	800346e <ext_lld_start+0xe>
      ext_lld_channel_enable(extp, line);
    else
      ext_lld_channel_disable(extp, line);
 8003488:	4621      	mov	r1, r4
 800348a:	4628      	mov	r0, r5

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 800348c:	3401      	adds	r4, #1
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    else
      ext_lld_channel_disable(extp, line);
 800348e:	f7ff ffcf 	bl	8003430 <ext_lld_channel_disable>

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();

  /* Configuration of automatic channels.*/
  for (line = 0; line < EXT_MAX_CHANNELS; line++)
 8003492:	2c17      	cmp	r4, #23
 8003494:	d1f0      	bne.n	8003478 <ext_lld_start+0x18>
    if (extp->config->channels[line].mode & EXT_CH_MODE_AUTOSTART)
      ext_lld_channel_enable(extp, line);
    else
      ext_lld_channel_disable(extp, line);
}
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 */
void ext_lld_start(EXTDriver *extp) {
  expchannel_t line;

  if (extp->state == EXT_STOP)
    ext_lld_exti_irq_enable();
 8003498:	f000 f982 	bl	80037a0 <ext_lld_exti_irq_enable>
 800349c:	e7e5      	b.n	800346a <ext_lld_start+0xa>
 800349e:	bf00      	nop

080034a0 <Vector58>:
OSAL_IRQ_HANDLER(Vector58) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034a0:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <Vector58+0x24>)
/**
 * @brief   EXTI[0] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector58) {
 80034a2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034a4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 0);
 80034a6:	6813      	ldr	r3, [r2, #0]
 80034a8:	400b      	ands	r3, r1
 80034aa:	f003 0301 	and.w	r3, r3, #1
  EXTI->PR = pr;
 80034ae:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 0))
 80034b0:	b123      	cbz	r3, 80034bc <Vector58+0x1c>
    EXTD1.config->channels[0].cb(&EXTD1, 0);
 80034b2:	4805      	ldr	r0, [pc, #20]	; (80034c8 <Vector58+0x28>)
 80034b4:	6843      	ldr	r3, [r0, #4]
 80034b6:	2100      	movs	r1, #0
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 0);
  EXTI->PR = pr;
  if (pr & (1U << 0))
    EXTD1.config->channels[0].cb(&EXTD1, 0);

  OSAL_IRQ_EPILOGUE();
 80034c0:	f7fe ba6e 	b.w	80019a0 <_port_irq_epilogue>
 80034c4:	40013c00 	.word	0x40013c00
 80034c8:	20001010 	.word	0x20001010
 80034cc:	00000000 	.word	0x00000000

080034d0 <Vector5C>:
OSAL_IRQ_HANDLER(Vector5C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034d0:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <Vector5C+0x24>)
/**
 * @brief   EXTI[1] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector5C) {
 80034d2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80034d4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 1);
 80034d6:	6813      	ldr	r3, [r2, #0]
 80034d8:	400b      	ands	r3, r1
 80034da:	f003 0302 	and.w	r3, r3, #2
  EXTI->PR = pr;
 80034de:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 1))
 80034e0:	b123      	cbz	r3, 80034ec <Vector5C+0x1c>
    EXTD1.config->channels[1].cb(&EXTD1, 1);
 80034e2:	4805      	ldr	r0, [pc, #20]	; (80034f8 <Vector5C+0x28>)
 80034e4:	6843      	ldr	r3, [r0, #4]
 80034e6:	2101      	movs	r1, #1
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80034ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 1);
  EXTI->PR = pr;
  if (pr & (1U << 1))
    EXTD1.config->channels[1].cb(&EXTD1, 1);

  OSAL_IRQ_EPILOGUE();
 80034f0:	f7fe ba56 	b.w	80019a0 <_port_irq_epilogue>
 80034f4:	40013c00 	.word	0x40013c00
 80034f8:	20001010 	.word	0x20001010
 80034fc:	00000000 	.word	0x00000000

08003500 <Vector60>:
OSAL_IRQ_HANDLER(Vector60) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003500:	4a08      	ldr	r2, [pc, #32]	; (8003524 <Vector60+0x24>)
/**
 * @brief   EXTI[2] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector60) {
 8003502:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003504:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 2);
 8003506:	6813      	ldr	r3, [r2, #0]
 8003508:	400b      	ands	r3, r1
 800350a:	f003 0304 	and.w	r3, r3, #4
  EXTI->PR = pr;
 800350e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 2))
 8003510:	b123      	cbz	r3, 800351c <Vector60+0x1c>
    EXTD1.config->channels[2].cb(&EXTD1, 2);
 8003512:	4805      	ldr	r0, [pc, #20]	; (8003528 <Vector60+0x28>)
 8003514:	6843      	ldr	r3, [r0, #4]
 8003516:	2102      	movs	r1, #2
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800351c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 2);
  EXTI->PR = pr;
  if (pr & (1U << 2))
    EXTD1.config->channels[2].cb(&EXTD1, 2);

  OSAL_IRQ_EPILOGUE();
 8003520:	f7fe ba3e 	b.w	80019a0 <_port_irq_epilogue>
 8003524:	40013c00 	.word	0x40013c00
 8003528:	20001010 	.word	0x20001010
 800352c:	00000000 	.word	0x00000000

08003530 <Vector64>:
OSAL_IRQ_HANDLER(Vector64) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003530:	4a08      	ldr	r2, [pc, #32]	; (8003554 <Vector64+0x24>)
/**
 * @brief   EXTI[3] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector64) {
 8003532:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003534:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 3);
 8003536:	6813      	ldr	r3, [r2, #0]
 8003538:	400b      	ands	r3, r1
 800353a:	f003 0308 	and.w	r3, r3, #8
  EXTI->PR = pr;
 800353e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 3))
 8003540:	b123      	cbz	r3, 800354c <Vector64+0x1c>
    EXTD1.config->channels[3].cb(&EXTD1, 3);
 8003542:	4805      	ldr	r0, [pc, #20]	; (8003558 <Vector64+0x28>)
 8003544:	6843      	ldr	r3, [r0, #4]
 8003546:	2103      	movs	r1, #3
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800354c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 3);
  EXTI->PR = pr;
  if (pr & (1U << 3))
    EXTD1.config->channels[3].cb(&EXTD1, 3);

  OSAL_IRQ_EPILOGUE();
 8003550:	f7fe ba26 	b.w	80019a0 <_port_irq_epilogue>
 8003554:	40013c00 	.word	0x40013c00
 8003558:	20001010 	.word	0x20001010
 800355c:	00000000 	.word	0x00000000

08003560 <Vector68>:
OSAL_IRQ_HANDLER(Vector68) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003560:	4a08      	ldr	r2, [pc, #32]	; (8003584 <Vector68+0x24>)
/**
 * @brief   EXTI[4] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector68) {
 8003562:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003564:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 4);
 8003566:	6813      	ldr	r3, [r2, #0]
 8003568:	400b      	ands	r3, r1
 800356a:	f003 0310 	and.w	r3, r3, #16
  EXTI->PR = pr;
 800356e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 4))
 8003570:	b123      	cbz	r3, 800357c <Vector68+0x1c>
    EXTD1.config->channels[4].cb(&EXTD1, 4);
 8003572:	4805      	ldr	r0, [pc, #20]	; (8003588 <Vector68+0x28>)
 8003574:	6843      	ldr	r3, [r0, #4]
 8003576:	2104      	movs	r1, #4
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800357c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 4);
  EXTI->PR = pr;
  if (pr & (1U << 4))
    EXTD1.config->channels[4].cb(&EXTD1, 4);

  OSAL_IRQ_EPILOGUE();
 8003580:	f7fe ba0e 	b.w	80019a0 <_port_irq_epilogue>
 8003584:	40013c00 	.word	0x40013c00
 8003588:	20001010 	.word	0x20001010
 800358c:	00000000 	.word	0x00000000

08003590 <Vector9C>:
OSAL_IRQ_HANDLER(Vector9C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003590:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <Vector9C+0x68>)
/**
 * @brief   EXTI[5]...EXTI[9] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector9C) {
 8003592:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003594:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
 8003596:	681c      	ldr	r4, [r3, #0]
 8003598:	4014      	ands	r4, r2
 800359a:	f404 7278 	and.w	r2, r4, #992	; 0x3e0
                     (1U << 9));
  EXTI->PR = pr;
 800359e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 5))
 80035a0:	06a3      	lsls	r3, r4, #26
 80035a2:	d422      	bmi.n	80035ea <Vector9C+0x5a>
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
 80035a4:	0660      	lsls	r0, r4, #25
 80035a6:	d41a      	bmi.n	80035de <Vector9C+0x4e>
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
 80035a8:	0621      	lsls	r1, r4, #24
 80035aa:	d412      	bmi.n	80035d2 <Vector9C+0x42>
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
 80035ac:	05e2      	lsls	r2, r4, #23
 80035ae:	d40a      	bmi.n	80035c6 <Vector9C+0x36>
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
 80035b0:	05a3      	lsls	r3, r4, #22
 80035b2:	d504      	bpl.n	80035be <Vector9C+0x2e>
    EXTD1.config->channels[9].cb(&EXTD1, 9);
 80035b4:	4811      	ldr	r0, [pc, #68]	; (80035fc <Vector9C+0x6c>)
 80035b6:	6843      	ldr	r3, [r0, #4]
 80035b8:	2109      	movs	r1, #9
 80035ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035bc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80035be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
  if (pr & (1U << 9))
    EXTD1.config->channels[9].cb(&EXTD1, 9);

  OSAL_IRQ_EPILOGUE();
 80035c2:	f7fe b9ed 	b.w	80019a0 <_port_irq_epilogue>
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
  if (pr & (1U << 8))
    EXTD1.config->channels[8].cb(&EXTD1, 8);
 80035c6:	480d      	ldr	r0, [pc, #52]	; (80035fc <Vector9C+0x6c>)
 80035c8:	6843      	ldr	r3, [r0, #4]
 80035ca:	2108      	movs	r1, #8
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4798      	blx	r3
 80035d0:	e7ee      	b.n	80035b0 <Vector9C+0x20>
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
  if (pr & (1U << 7))
    EXTD1.config->channels[7].cb(&EXTD1, 7);
 80035d2:	480a      	ldr	r0, [pc, #40]	; (80035fc <Vector9C+0x6c>)
 80035d4:	6843      	ldr	r3, [r0, #4]
 80035d6:	2107      	movs	r1, #7
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	4798      	blx	r3
 80035dc:	e7e6      	b.n	80035ac <Vector9C+0x1c>
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
  if (pr & (1U << 6))
    EXTD1.config->channels[6].cb(&EXTD1, 6);
 80035de:	4807      	ldr	r0, [pc, #28]	; (80035fc <Vector9C+0x6c>)
 80035e0:	6843      	ldr	r3, [r0, #4]
 80035e2:	2106      	movs	r1, #6
 80035e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e6:	4798      	blx	r3
 80035e8:	e7de      	b.n	80035a8 <Vector9C+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 5) | (1U << 6) | (1U << 7) | (1U << 8) |
                     (1U << 9));
  EXTI->PR = pr;
  if (pr & (1U << 5))
    EXTD1.config->channels[5].cb(&EXTD1, 5);
 80035ea:	4804      	ldr	r0, [pc, #16]	; (80035fc <Vector9C+0x6c>)
 80035ec:	6843      	ldr	r3, [r0, #4]
 80035ee:	2105      	movs	r1, #5
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4798      	blx	r3
 80035f4:	e7d6      	b.n	80035a4 <Vector9C+0x14>
 80035f6:	bf00      	nop
 80035f8:	40013c00 	.word	0x40013c00
 80035fc:	20001010 	.word	0x20001010

08003600 <VectorE0>:
OSAL_IRQ_HANDLER(VectorE0) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <VectorE0+0x78>)
/**
 * @brief   EXTI[10]...EXTI[15] interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE0) {
 8003602:	b510      	push	{r4, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003604:	695a      	ldr	r2, [r3, #20]
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
 8003606:	681c      	ldr	r4, [r3, #0]
 8003608:	4014      	ands	r4, r2
 800360a:	f404 427c 	and.w	r2, r4, #64512	; 0xfc00
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
 800360e:	615a      	str	r2, [r3, #20]
  if (pr & (1U << 10))
 8003610:	0562      	lsls	r2, r4, #21
 8003612:	d42a      	bmi.n	800366a <VectorE0+0x6a>
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
 8003614:	0523      	lsls	r3, r4, #20
 8003616:	d422      	bmi.n	800365e <VectorE0+0x5e>
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
 8003618:	04e0      	lsls	r0, r4, #19
 800361a:	d41a      	bmi.n	8003652 <VectorE0+0x52>
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
 800361c:	04a1      	lsls	r1, r4, #18
 800361e:	d412      	bmi.n	8003646 <VectorE0+0x46>
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
 8003620:	0462      	lsls	r2, r4, #17
 8003622:	d40a      	bmi.n	800363a <VectorE0+0x3a>
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
 8003624:	0423      	lsls	r3, r4, #16
 8003626:	d504      	bpl.n	8003632 <VectorE0+0x32>
    EXTD1.config->channels[15].cb(&EXTD1, 15);
 8003628:	4814      	ldr	r0, [pc, #80]	; (800367c <VectorE0+0x7c>)
 800362a:	6843      	ldr	r3, [r0, #4]
 800362c:	210f      	movs	r1, #15
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 8003632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
  if (pr & (1U << 15))
    EXTD1.config->channels[15].cb(&EXTD1, 15);

  OSAL_IRQ_EPILOGUE();
 8003636:	f7fe b9b3 	b.w	80019a0 <_port_irq_epilogue>
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
  if (pr & (1U << 14))
    EXTD1.config->channels[14].cb(&EXTD1, 14);
 800363a:	4810      	ldr	r0, [pc, #64]	; (800367c <VectorE0+0x7c>)
 800363c:	6843      	ldr	r3, [r0, #4]
 800363e:	210e      	movs	r1, #14
 8003640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003642:	4798      	blx	r3
 8003644:	e7ee      	b.n	8003624 <VectorE0+0x24>
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
  if (pr & (1U << 13))
    EXTD1.config->channels[13].cb(&EXTD1, 13);
 8003646:	480d      	ldr	r0, [pc, #52]	; (800367c <VectorE0+0x7c>)
 8003648:	6843      	ldr	r3, [r0, #4]
 800364a:	210d      	movs	r1, #13
 800364c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364e:	4798      	blx	r3
 8003650:	e7e6      	b.n	8003620 <VectorE0+0x20>
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
  if (pr & (1U << 12))
    EXTD1.config->channels[12].cb(&EXTD1, 12);
 8003652:	480a      	ldr	r0, [pc, #40]	; (800367c <VectorE0+0x7c>)
 8003654:	6843      	ldr	r3, [r0, #4]
 8003656:	210c      	movs	r1, #12
 8003658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800365a:	4798      	blx	r3
 800365c:	e7de      	b.n	800361c <VectorE0+0x1c>
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
  if (pr & (1U << 11))
    EXTD1.config->channels[11].cb(&EXTD1, 11);
 800365e:	4807      	ldr	r0, [pc, #28]	; (800367c <VectorE0+0x7c>)
 8003660:	6843      	ldr	r3, [r0, #4]
 8003662:	210b      	movs	r1, #11
 8003664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003666:	4798      	blx	r3
 8003668:	e7d6      	b.n	8003618 <VectorE0+0x18>
  pr = EXTI->PR;
  pr &= EXTI->IMR & ((1U << 10) | (1U << 11) | (1U << 12) | (1U << 13) |
                     (1U << 14) | (1U << 15));
  EXTI->PR = pr;
  if (pr & (1U << 10))
    EXTD1.config->channels[10].cb(&EXTD1, 10);
 800366a:	4804      	ldr	r0, [pc, #16]	; (800367c <VectorE0+0x7c>)
 800366c:	6843      	ldr	r3, [r0, #4]
 800366e:	210a      	movs	r1, #10
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	4798      	blx	r3
 8003674:	e7ce      	b.n	8003614 <VectorE0+0x14>
 8003676:	bf00      	nop
 8003678:	40013c00 	.word	0x40013c00
 800367c:	20001010 	.word	0x20001010

08003680 <Vector44>:
OSAL_IRQ_HANDLER(Vector44) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003680:	4a08      	ldr	r2, [pc, #32]	; (80036a4 <Vector44+0x24>)
/**
 * @brief   EXTI[16] interrupt handler (PVD).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector44) {
 8003682:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003684:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 16);
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  EXTI->PR = pr;
 800368c:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 16))
 800368e:	b12b      	cbz	r3, 800369c <Vector44+0x1c>
    EXTD1.config->channels[16].cb(&EXTD1, 16);
 8003690:	4805      	ldr	r0, [pc, #20]	; (80036a8 <Vector44+0x28>)
 8003692:	6843      	ldr	r3, [r0, #4]
 8003694:	2110      	movs	r1, #16
 8003696:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800369a:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800369c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 16);
  EXTI->PR = pr;
  if (pr & (1U << 16))
    EXTD1.config->channels[16].cb(&EXTD1, 16);

  OSAL_IRQ_EPILOGUE();
 80036a0:	f7fe b97e 	b.w	80019a0 <_port_irq_epilogue>
 80036a4:	40013c00 	.word	0x40013c00
 80036a8:	20001010 	.word	0x20001010
 80036ac:	00000000 	.word	0x00000000

080036b0 <VectorE4>:
OSAL_IRQ_HANDLER(VectorE4) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036b0:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <VectorE4+0x24>)
/**
 * @brief   EXTI[17] interrupt handler (RTC_ALARM).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE4) {
 80036b2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036b4:	6953      	ldr	r3, [r2, #20]
  pr = EXTI->IMR & (1U << 17);
 80036b6:	6813      	ldr	r3, [r2, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  EXTI->PR = pr;
 80036bc:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 17))
 80036be:	b12b      	cbz	r3, 80036cc <VectorE4+0x1c>
    EXTD1.config->channels[17].cb(&EXTD1, 17);
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <VectorE4+0x28>)
 80036c2:	6843      	ldr	r3, [r0, #4]
 80036c4:	2111      	movs	r1, #17
 80036c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036ca:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr = EXTI->IMR & (1U << 17);
  EXTI->PR = pr;
  if (pr & (1U << 17))
    EXTD1.config->channels[17].cb(&EXTD1, 17);

  OSAL_IRQ_EPILOGUE();
 80036d0:	f7fe b966 	b.w	80019a0 <_port_irq_epilogue>
 80036d4:	40013c00 	.word	0x40013c00
 80036d8:	20001010 	.word	0x20001010
 80036dc:	00000000 	.word	0x00000000

080036e0 <VectorE8>:
OSAL_IRQ_HANDLER(VectorE8) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036e0:	4a09      	ldr	r2, [pc, #36]	; (8003708 <VectorE8+0x28>)
/**
 * @brief   EXTI[18] interrupt handler (OTG_FS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(VectorE8) {
 80036e2:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 80036e4:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 18);
 80036e6:	6813      	ldr	r3, [r2, #0]
 80036e8:	400b      	ands	r3, r1
 80036ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  EXTI->PR = pr;
 80036ee:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 18))
 80036f0:	b12b      	cbz	r3, 80036fe <VectorE8+0x1e>
    EXTD1.config->channels[18].cb(&EXTD1, 18);
 80036f2:	4806      	ldr	r0, [pc, #24]	; (800370c <VectorE8+0x2c>)
 80036f4:	6843      	ldr	r3, [r0, #4]
 80036f6:	2112      	movs	r1, #18
 80036f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fc:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 80036fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 18);
  EXTI->PR = pr;
  if (pr & (1U << 18))
    EXTD1.config->channels[18].cb(&EXTD1, 18);

  OSAL_IRQ_EPILOGUE();
 8003702:	f7fe b94d 	b.w	80019a0 <_port_irq_epilogue>
 8003706:	bf00      	nop
 8003708:	40013c00 	.word	0x40013c00
 800370c:	20001010 	.word	0x20001010

08003710 <Vector170>:
OSAL_IRQ_HANDLER(Vector170) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003710:	4a09      	ldr	r2, [pc, #36]	; (8003738 <Vector170+0x28>)
/**
 * @brief   EXTI[20] interrupt handler (OTG_HS_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector170) {
 8003712:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003714:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 20);
 8003716:	6813      	ldr	r3, [r2, #0]
 8003718:	400b      	ands	r3, r1
 800371a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  EXTI->PR = pr;
 800371e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 20))
 8003720:	b12b      	cbz	r3, 800372e <Vector170+0x1e>
    EXTD1.config->channels[20].cb(&EXTD1, 20);
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <Vector170+0x2c>)
 8003724:	6843      	ldr	r3, [r0, #4]
 8003726:	2114      	movs	r1, #20
 8003728:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800372c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800372e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 20);
  EXTI->PR = pr;
  if (pr & (1U << 20))
    EXTD1.config->channels[20].cb(&EXTD1, 20);

  OSAL_IRQ_EPILOGUE();
 8003732:	f7fe b935 	b.w	80019a0 <_port_irq_epilogue>
 8003736:	bf00      	nop
 8003738:	40013c00 	.word	0x40013c00
 800373c:	20001010 	.word	0x20001010

08003740 <Vector48>:
OSAL_IRQ_HANDLER(Vector48) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <Vector48+0x28>)
/**
 * @brief   EXTI[21] interrupt handler (TAMPER_STAMP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector48) {
 8003742:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003744:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 21);
 8003746:	6813      	ldr	r3, [r2, #0]
 8003748:	400b      	ands	r3, r1
 800374a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  EXTI->PR = pr;
 800374e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 21))
 8003750:	b12b      	cbz	r3, 800375e <Vector48+0x1e>
    EXTD1.config->channels[21].cb(&EXTD1, 21);
 8003752:	4806      	ldr	r0, [pc, #24]	; (800376c <Vector48+0x2c>)
 8003754:	6843      	ldr	r3, [r0, #4]
 8003756:	2115      	movs	r1, #21
 8003758:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800375c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800375e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 21);
  EXTI->PR = pr;
  if (pr & (1U << 21))
    EXTD1.config->channels[21].cb(&EXTD1, 21);

  OSAL_IRQ_EPILOGUE();
 8003762:	f7fe b91d 	b.w	80019a0 <_port_irq_epilogue>
 8003766:	bf00      	nop
 8003768:	40013c00 	.word	0x40013c00
 800376c:	20001010 	.word	0x20001010

08003770 <Vector4C>:
OSAL_IRQ_HANDLER(Vector4C) {
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <Vector4C+0x28>)
/**
 * @brief   EXTI[22] interrupt handler (RTC_WKUP).
 *
 * @isr
 */
OSAL_IRQ_HANDLER(Vector4C) {
 8003772:	b508      	push	{r3, lr}
  uint32_t pr;

  OSAL_IRQ_PROLOGUE();

  pr = EXTI->PR;
 8003774:	6951      	ldr	r1, [r2, #20]
  pr &= EXTI->IMR & (1U << 22);
 8003776:	6813      	ldr	r3, [r2, #0]
 8003778:	400b      	ands	r3, r1
 800377a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  EXTI->PR = pr;
 800377e:	6153      	str	r3, [r2, #20]
  if (pr & (1U << 22))
 8003780:	b12b      	cbz	r3, 800378e <Vector4C+0x1e>
    EXTD1.config->channels[22].cb(&EXTD1, 22);
 8003782:	4806      	ldr	r0, [pc, #24]	; (800379c <Vector4C+0x2c>)
 8003784:	6843      	ldr	r3, [r0, #4]
 8003786:	2116      	movs	r1, #22
 8003788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800378c:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
}
 800378e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pr &= EXTI->IMR & (1U << 22);
  EXTI->PR = pr;
  if (pr & (1U << 22))
    EXTD1.config->channels[22].cb(&EXTD1, 22);

  OSAL_IRQ_EPILOGUE();
 8003792:	f7fe b905 	b.w	80019a0 <_port_irq_epilogue>
 8003796:	bf00      	nop
 8003798:	40013c00 	.word	0x40013c00
 800379c:	20001010 	.word	0x20001010

080037a0 <ext_lld_exti_irq_enable>:
 *
 * @notapi
 */
void ext_lld_exti_irq_enable(void) {

  nvicEnableVector(EXTI0_IRQn, STM32_EXT_EXTI0_IRQ_PRIORITY);
 80037a0:	2006      	movs	r0, #6
/**
 * @brief   Enables EXTI IRQ sources.
 *
 * @notapi
 */
void ext_lld_exti_irq_enable(void) {
 80037a2:	b508      	push	{r3, lr}

  nvicEnableVector(EXTI0_IRQn, STM32_EXT_EXTI0_IRQ_PRIORITY);
 80037a4:	4601      	mov	r1, r0
 80037a6:	f7ff fa1b 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_EXT_EXTI1_IRQ_PRIORITY);
 80037aa:	2007      	movs	r0, #7
 80037ac:	2106      	movs	r1, #6
 80037ae:	f7ff fa17 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI2_IRQn, STM32_EXT_EXTI2_IRQ_PRIORITY);
 80037b2:	2008      	movs	r0, #8
 80037b4:	2106      	movs	r1, #6
 80037b6:	f7ff fa13 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_EXT_EXTI3_IRQ_PRIORITY);
 80037ba:	2009      	movs	r0, #9
 80037bc:	2106      	movs	r1, #6
 80037be:	f7ff fa0f 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_EXT_EXTI4_IRQ_PRIORITY);
 80037c2:	200a      	movs	r0, #10
 80037c4:	2106      	movs	r1, #6
 80037c6:	f7ff fa0b 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_EXT_EXTI5_9_IRQ_PRIORITY);
 80037ca:	2017      	movs	r0, #23
 80037cc:	2106      	movs	r1, #6
 80037ce:	f7ff fa07 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_EXT_EXTI10_15_IRQ_PRIORITY);
 80037d2:	2028      	movs	r0, #40	; 0x28
 80037d4:	2106      	movs	r1, #6
 80037d6:	f7ff fa03 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(PVD_IRQn, STM32_EXT_EXTI16_IRQ_PRIORITY);
 80037da:	2001      	movs	r0, #1
 80037dc:	2106      	movs	r1, #6
 80037de:	f7ff f9ff 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(RTC_Alarm_IRQn, STM32_EXT_EXTI17_IRQ_PRIORITY);
 80037e2:	2029      	movs	r0, #41	; 0x29
 80037e4:	210f      	movs	r1, #15
 80037e6:	f7ff f9fb 	bl	8002be0 <nvicEnableVector>
  nvicEnableVector(OTG_FS_WKUP_IRQn, STM32_EXT_EXTI18_IRQ_PRIORITY);
 80037ea:	202a      	movs	r0, #42	; 0x2a
 80037ec:	2106      	movs	r1, #6
 80037ee:	f7ff f9f7 	bl	8002be0 <nvicEnableVector>
#if STM32_HAS_ETH
  nvicEnableVector(ETH_WKUP_IRQn, STM32_EXT_EXTI19_IRQ_PRIORITY);
#endif
#if STM32_HAS_OTG2
  nvicEnableVector(OTG_HS_WKUP_IRQn, STM32_EXT_EXTI20_IRQ_PRIORITY);
 80037f2:	204c      	movs	r0, #76	; 0x4c
 80037f4:	2106      	movs	r1, #6
 80037f6:	f7ff f9f3 	bl	8002be0 <nvicEnableVector>
#endif
#if !defined(STM32F401xx)
  nvicEnableVector(TAMP_STAMP_IRQn, STM32_EXT_EXTI21_IRQ_PRIORITY);
 80037fa:	2002      	movs	r0, #2
 80037fc:	210f      	movs	r1, #15
 80037fe:	f7ff f9ef 	bl	8002be0 <nvicEnableVector>
#endif /* !defined(STM32F401xx) */
  nvicEnableVector(RTC_WKUP_IRQn, STM32_EXT_EXTI22_IRQ_PRIORITY);
 8003802:	2003      	movs	r0, #3
 8003804:	210f      	movs	r1, #15
}
 8003806:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  nvicEnableVector(OTG_HS_WKUP_IRQn, STM32_EXT_EXTI20_IRQ_PRIORITY);
#endif
#if !defined(STM32F401xx)
  nvicEnableVector(TAMP_STAMP_IRQn, STM32_EXT_EXTI21_IRQ_PRIORITY);
#endif /* !defined(STM32F401xx) */
  nvicEnableVector(RTC_WKUP_IRQn, STM32_EXT_EXTI22_IRQ_PRIORITY);
 800380a:	f7ff b9e9 	b.w	8002be0 <nvicEnableVector>
 800380e:	bf00      	nop

08003810 <_pal_lld_init>:
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003810:	f8df c178 	ldr.w	ip, [pc, #376]	; 800398c <_pal_lld_init+0x17c>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003814:	4957      	ldr	r1, [pc, #348]	; (8003974 <_pal_lld_init+0x164>)
 8003816:	4a58      	ldr	r2, [pc, #352]	; (8003978 <_pal_lld_init+0x168>)
 *
 * @param[in] config    the STM32 ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
 8003818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 800381c:	f8dc 8030 	ldr.w	r8, [ip, #48]	; 0x30
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003820:	f8df e16c 	ldr.w	lr, [pc, #364]	; 8003990 <_pal_lld_init+0x180>
 8003824:	4f55      	ldr	r7, [pc, #340]	; (800397c <_pal_lld_init+0x16c>)
 8003826:	4e56      	ldr	r6, [pc, #344]	; (8003980 <_pal_lld_init+0x170>)
 8003828:	4d56      	ldr	r5, [pc, #344]	; (8003984 <_pal_lld_init+0x174>)
 800382a:	4c57      	ldr	r4, [pc, #348]	; (8003988 <_pal_lld_init+0x178>)
 800382c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8003994 <_pal_lld_init+0x184>
#elif defined(STM32F0XX)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F3XX) || defined(STM32F37X)
  rccEnableAHB(AHB_EN_MASK, TRUE);
#elif defined(STM32F2XX) || defined(STM32F4XX) || defined(STM32F7XX)
  RCC->AHB1ENR   |= AHB1_EN_MASK;
 8003830:	f048 08ff 	orr.w	r8, r8, #255	; 0xff
 8003834:	f8cc 8030 	str.w	r8, [ip, #48]	; 0x30
  RCC->AHB1LPENR |= AHB1_LPEN_MASK;
 8003838:	f8dc 8050 	ldr.w	r8, [ip, #80]	; 0x50
 800383c:	f048 08ff 	orr.w	r8, r8, #255	; 0xff
 8003840:	f8cc 8050 	str.w	r8, [ip, #80]	; 0x50
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003844:	6843      	ldr	r3, [r0, #4]
 8003846:	f8ce 3004 	str.w	r3, [lr, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800384a:	6883      	ldr	r3, [r0, #8]
 800384c:	f8ce 3008 	str.w	r3, [lr, #8]
  gpiop->PUPDR   = config->pupdr;
 8003850:	68c3      	ldr	r3, [r0, #12]
 8003852:	f8ce 300c 	str.w	r3, [lr, #12]
  gpiop->ODR     = config->odr;
 8003856:	6903      	ldr	r3, [r0, #16]
 8003858:	f8ce 3014 	str.w	r3, [lr, #20]
  gpiop->AFRL    = config->afrl;
 800385c:	6943      	ldr	r3, [r0, #20]
 800385e:	f8ce 3020 	str.w	r3, [lr, #32]
  gpiop->AFRH    = config->afrh;
 8003862:	6983      	ldr	r3, [r0, #24]
 8003864:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003868:	6803      	ldr	r3, [r0, #0]
 800386a:	f8ce 3000 	str.w	r3, [lr]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800386e:	6a03      	ldr	r3, [r0, #32]
 8003870:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003872:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003874:	60bb      	str	r3, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 8003876:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003878:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 800387a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800387c:	617b      	str	r3, [r7, #20]
  gpiop->AFRL    = config->afrl;
 800387e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003880:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 8003882:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003886:	69c3      	ldr	r3, [r0, #28]
 8003888:	603b      	str	r3, [r7, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800388a:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800388c:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800388e:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8003890:	60b7      	str	r7, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 8003892:	6c47      	ldr	r7, [r0, #68]	; 0x44
 8003894:	60f7      	str	r7, [r6, #12]
  gpiop->ODR     = config->odr;
 8003896:	6c87      	ldr	r7, [r0, #72]	; 0x48
 8003898:	6177      	str	r7, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800389a:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800389c:	6237      	str	r7, [r6, #32]
  gpiop->AFRH    = config->afrh;
 800389e:	6d07      	ldr	r7, [r0, #80]	; 0x50
 80038a0:	6277      	str	r7, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80038a2:	6b87      	ldr	r7, [r0, #56]	; 0x38
 80038a4:	6037      	str	r7, [r6, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80038a6:	6d86      	ldr	r6, [r0, #88]	; 0x58
 80038a8:	606e      	str	r6, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80038aa:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80038ac:	60ae      	str	r6, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80038ae:	6e06      	ldr	r6, [r0, #96]	; 0x60
 80038b0:	60ee      	str	r6, [r5, #12]
  gpiop->ODR     = config->odr;
 80038b2:	6e46      	ldr	r6, [r0, #100]	; 0x64
 80038b4:	616e      	str	r6, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80038b6:	6e86      	ldr	r6, [r0, #104]	; 0x68
 80038b8:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80038ba:	6ec6      	ldr	r6, [r0, #108]	; 0x6c
 80038bc:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80038be:	6d46      	ldr	r6, [r0, #84]	; 0x54
 80038c0:	602e      	str	r6, [r5, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80038c2:	6f45      	ldr	r5, [r0, #116]	; 0x74
 80038c4:	6065      	str	r5, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80038c6:	6f85      	ldr	r5, [r0, #120]	; 0x78
 80038c8:	60a5      	str	r5, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80038ca:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
 80038cc:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 80038ce:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
 80038d2:	6165      	str	r5, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80038d4:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80038d8:	6225      	str	r5, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80038da:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 80038de:	6265      	str	r5, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80038e0:	6f05      	ldr	r5, [r0, #112]	; 0x70
 80038e2:	6025      	str	r5, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80038e4:	f8d0 4090 	ldr.w	r4, [r0, #144]	; 0x90
 80038e8:	604c      	str	r4, [r1, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80038ea:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 80038ee:	608c      	str	r4, [r1, #8]
  gpiop->PUPDR   = config->pupdr;
 80038f0:	f8d0 4098 	ldr.w	r4, [r0, #152]	; 0x98
 80038f4:	60cc      	str	r4, [r1, #12]
  gpiop->ODR     = config->odr;
 80038f6:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 80038fa:	614c      	str	r4, [r1, #20]
  gpiop->AFRL    = config->afrl;
 80038fc:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
 8003900:	620c      	str	r4, [r1, #32]
  gpiop->AFRH    = config->afrh;
 8003902:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
 8003906:	624c      	str	r4, [r1, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003908:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
 800390c:	600c      	str	r4, [r1, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800390e:	f8d0 10ac 	ldr.w	r1, [r0, #172]	; 0xac
 8003912:	6051      	str	r1, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003914:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 8003918:	6091      	str	r1, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 800391a:	f8d0 10b4 	ldr.w	r1, [r0, #180]	; 0xb4
 800391e:	60d1      	str	r1, [r2, #12]
  gpiop->ODR     = config->odr;
 8003920:	f8d0 10b8 	ldr.w	r1, [r0, #184]	; 0xb8
 8003924:	6151      	str	r1, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8003926:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 800392a:	6211      	str	r1, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800392c:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8003930:	6251      	str	r1, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003932:	f8d0 10a8 	ldr.w	r1, [r0, #168]	; 0xa8
 8003936:	6011      	str	r1, [r2, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void initgpio(stm32_gpio_t *gpiop, const stm32_gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8003938:	f8d0 20c8 	ldr.w	r2, [r0, #200]	; 0xc8
 800393c:	f8c9 2004 	str.w	r2, [r9, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003940:	f8d0 20cc 	ldr.w	r2, [r0, #204]	; 0xcc
 8003944:	f8c9 2008 	str.w	r2, [r9, #8]
  gpiop->PUPDR   = config->pupdr;
 8003948:	f8d0 20d0 	ldr.w	r2, [r0, #208]	; 0xd0
 800394c:	f8c9 200c 	str.w	r2, [r9, #12]
  gpiop->ODR     = config->odr;
 8003950:	f8d0 20d4 	ldr.w	r2, [r0, #212]	; 0xd4
 8003954:	f8c9 2014 	str.w	r2, [r9, #20]
  gpiop->AFRL    = config->afrl;
 8003958:	f8d0 20d8 	ldr.w	r2, [r0, #216]	; 0xd8
 800395c:	f8c9 2020 	str.w	r2, [r9, #32]
  gpiop->AFRH    = config->afrh;
 8003960:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 8003964:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003968:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
 800396c:	f8c9 2000 	str.w	r2, [r9]
 8003970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003974:	40021400 	.word	0x40021400
 8003978:	40021800 	.word	0x40021800
 800397c:	40020400 	.word	0x40020400
 8003980:	40020800 	.word	0x40020800
 8003984:	40020c00 	.word	0x40020c00
 8003988:	40021000 	.word	0x40021000
 800398c:	40023800 	.word	0x40023800
 8003990:	40020000 	.word	0x40020000
 8003994:	40021c00 	.word	0x40021c00
	...

080039a0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80039a4:	f3c2 1c41 	ubfx	ip, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80039a8:	f002 0e03 	and.w	lr, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80039ac:	f3c2 0980 	ubfx	r9, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80039b0:	f3c2 08c1 	ubfx	r8, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 80039b4:	2700      	movs	r7, #0

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80039b6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80039ba:	f04f 0b0f 	mov.w	fp, #15
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80039be:	f04f 0a01 	mov.w	sl, #1
 80039c2:	e00f      	b.n	80039e4 <_pal_lld_setgroupmode+0x44>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80039c4:	6a04      	ldr	r4, [r0, #32]
 80039c6:	ea24 0303 	bic.w	r3, r4, r3
 80039ca:	431d      	orrs	r5, r3
 80039cc:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80039ce:	0849      	lsrs	r1, r1, #1
 80039d0:	d039      	beq.n	8003a46 <_pal_lld_setgroupmode+0xa6>
      return;
    otyper <<= 1;
 80039d2:	ea4f 0949 	mov.w	r9, r9, lsl #1
    ospeedr <<= 2;
 80039d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
    pupdr <<= 2;
 80039da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 80039de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    bit++;
 80039e2:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80039e4:	07cb      	lsls	r3, r1, #31
 80039e6:	d5f2      	bpl.n	80039ce <_pal_lld_setgroupmode+0x2e>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80039e8:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80039ea:	fa0a f407 	lsl.w	r4, sl, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80039ee:	ea23 0304 	bic.w	r3, r3, r4
 80039f2:	ea43 0309 	orr.w	r3, r3, r9
 80039f6:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80039f8:	2503      	movs	r5, #3
 80039fa:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80039fc:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80039fe:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8003a02:	43e4      	mvns	r4, r4
 8003a04:	4023      	ands	r3, r4
 8003a06:	ea43 0308 	orr.w	r3, r3, r8
 8003a0a:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003a0c:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003a0e:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003a12:	4025      	ands	r5, r4
 8003a14:	ea45 050c 	orr.w	r5, r5, ip
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003a18:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8003a1a:	f1be 0f02 	cmp.w	lr, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8003a1e:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8003a20:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8003a24:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
 8003a28:	d00f      	beq.n	8003a4a <_pal_lld_setgroupmode+0xaa>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8003a2a:	6806      	ldr	r6, [r0, #0]
 8003a2c:	4034      	ands	r4, r6
 8003a2e:	ea44 040e 	orr.w	r4, r4, lr
        if (bit < 8)
 8003a32:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8003a34:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 8003a36:	d9c5      	bls.n	80039c4 <_pal_lld_setgroupmode+0x24>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003a38:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003a3a:	ea24 0303 	bic.w	r3, r4, r3
 8003a3e:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 8003a40:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003a42:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8003a44:	d1c5      	bne.n	80039d2 <_pal_lld_setgroupmode+0x32>
 8003a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if (moder == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8003a4a:	2f07      	cmp	r7, #7
 8003a4c:	d80a      	bhi.n	8003a64 <_pal_lld_setgroupmode+0xc4>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8003a4e:	6a06      	ldr	r6, [r0, #32]
 8003a50:	ea26 0303 	bic.w	r3, r6, r3
 8003a54:	431d      	orrs	r5, r3
 8003a56:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8003a58:	6803      	ldr	r3, [r0, #0]
 8003a5a:	401c      	ands	r4, r3
 8003a5c:	f044 0402 	orr.w	r4, r4, #2
 8003a60:	6004      	str	r4, [r0, #0]
 8003a62:	e7b4      	b.n	80039ce <_pal_lld_setgroupmode+0x2e>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8003a64:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a66:	ea26 0303 	bic.w	r3, r6, r3
 8003a6a:	431d      	orrs	r5, r3
 8003a6c:	6245      	str	r5, [r0, #36]	; 0x24
 8003a6e:	e7f3      	b.n	8003a58 <_pal_lld_setgroupmode+0xb8>

08003a70 <i2c_lld_serve_tx_end_irq>:
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003a70:	f011 0f0c 	tst.w	r1, #12
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_tx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4605      	mov	r5, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8003a78:	6b44      	ldr	r4, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003a7a:	d112      	bne.n	8003aa2 <i2c_lld_serve_tx_end_irq+0x32>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmatx);
 8003a7c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003a7e:	680a      	ldr	r2, [r1, #0]
 8003a80:	6813      	ldr	r3, [r2, #0]
 8003a82:	f023 031f 	bic.w	r3, r3, #31
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	6813      	ldr	r3, [r2, #0]
 8003a8a:	07db      	lsls	r3, r3, #31
 8003a8c:	d4fc      	bmi.n	8003a88 <i2c_lld_serve_tx_end_irq+0x18>
 8003a8e:	7a08      	ldrb	r0, [r1, #8]
 8003a90:	684a      	ldr	r2, [r1, #4]
 8003a92:	233d      	movs	r3, #61	; 0x3d
 8003a94:	4083      	lsls	r3, r0
 8003a96:	6013      	str	r3, [r2, #0]
  /* Enables interrupts to catch BTF event meaning transmission part complete.
     Interrupt handler will decide to generate STOP or to begin receiving part
     of R/W transaction itself.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003a98:	6863      	ldr	r3, [r4, #4]
 8003a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8003aa2:	4802      	ldr	r0, [pc, #8]	; (8003aac <i2c_lld_serve_tx_end_irq+0x3c>)
 8003aa4:	f7fd fa64 	bl	8000f70 <chSysHalt>
 8003aa8:	e7e8      	b.n	8003a7c <i2c_lld_serve_tx_end_irq+0xc>
 8003aaa:	bf00      	nop
 8003aac:	08007940 	.word	0x08007940

08003ab0 <i2c_lld_serve_rx_end_irq>:
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
  I2C_TypeDef *dp = i2cp->i2c;

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003ab0:	f011 0f0c 	tst.w	r1, #12
 * @param[in] i2cp      pointer to the @p I2CDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 *
 * @notapi
 */
static void i2c_lld_serve_rx_end_irq(I2CDriver *i2cp, uint32_t flags) {
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4606      	mov	r6, r0
  I2C_TypeDef *dp = i2cp->i2c;
 8003ab8:	6b45      	ldr	r5, [r0, #52]	; 0x34

  /* DMA errors handling.*/
#if defined(STM32_I2C_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8003aba:	d125      	bne.n	8003b08 <i2c_lld_serve_rx_end_irq+0x58>
  }
#else
  (void)flags;
#endif

  dmaStreamDisable(i2cp->dmarx);
 8003abc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003abe:	6813      	ldr	r3, [r2, #0]
 8003ac0:	6819      	ldr	r1, [r3, #0]
 8003ac2:	f021 011f 	bic.w	r1, r1, #31
 8003ac6:	6019      	str	r1, [r3, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	f011 0401 	ands.w	r4, r1, #1
 8003ace:	d1fb      	bne.n	8003ac8 <i2c_lld_serve_rx_end_irq+0x18>
 8003ad0:	7a11      	ldrb	r1, [r2, #8]
 8003ad2:	6852      	ldr	r2, [r2, #4]
 8003ad4:	233d      	movs	r3, #61	; 0x3d
 8003ad6:	408b      	lsls	r3, r1
 8003ad8:	6013      	str	r3, [r2, #0]

  dp->CR2 &= ~I2C_CR2_LAST;
 8003ada:	686b      	ldr	r3, [r5, #4]
 8003adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ae0:	606b      	str	r3, [r5, #4]
  dp->CR1 &= ~I2C_CR1_ACK;
 8003ae2:	682b      	ldr	r3, [r5, #0]
 8003ae4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ae8:	602b      	str	r3, [r5, #0]
  dp->CR1 |= I2C_CR1_STOP;
 8003aea:	682b      	ldr	r3, [r5, #0]
 8003aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af0:	602b      	str	r3, [r5, #0]
 8003af2:	2320      	movs	r3, #32
 8003af4:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003af8:	f106 001c 	add.w	r0, r6, #28
 8003afc:	4621      	mov	r1, r4
 8003afe:	f7fd fd07 	bl	8001510 <chThdResumeI>
 8003b02:	f384 8811 	msr	BASEPRI, r4
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8003b08:	4801      	ldr	r0, [pc, #4]	; (8003b10 <i2c_lld_serve_rx_end_irq+0x60>)
 8003b0a:	f7fd fa31 	bl	8000f70 <chSysHalt>
 8003b0e:	e7d5      	b.n	8003abc <i2c_lld_serve_rx_end_irq+0xc>
 8003b10:	08007940 	.word	0x08007940
	...

08003b20 <VectorBC>:
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003b20:	483a      	ldr	r0, [pc, #232]	; (8003c0c <VectorBC+0xec>)
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003b22:	4a3b      	ldr	r2, [pc, #236]	; (8003c10 <VectorBC+0xf0>)
/**
 * @brief   I2C1 event interrupt handler.
 *
 * @notapi
 */
OSAL_IRQ_HANDLER(STM32_I2C1_EVENT_HANDLER) {
 8003b24:	b570      	push	{r4, r5, r6, lr}
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
static void i2c_lld_serve_event_interrupt(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003b26:	6b44      	ldr	r4, [r0, #52]	; 0x34
  uint32_t regSR2 = dp->SR2;
 8003b28:	69a3      	ldr	r3, [r4, #24]
  uint32_t event = dp->SR1;
 8003b2a:	6965      	ldr	r5, [r4, #20]

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003b2c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8003b30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d04c      	beq.n	8003bd2 <VectorBC+0xb2>
 8003b38:	d81e      	bhi.n	8003b78 <VectorBC+0x58>
 8003b3a:	3a07      	subs	r2, #7
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d03c      	beq.n	8003bba <VectorBC+0x9a>
 8003b40:	3201      	adds	r2, #1
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d110      	bne.n	8003b68 <VectorBC+0x48>
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b46:	6862      	ldr	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003b48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b4a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    dmaStreamEnable(i2cp->dmarx);
 8003b4e:	681b      	ldr	r3, [r3, #0]
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
    break;
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003b50:	6062      	str	r2, [r4, #4]
    dmaStreamEnable(i2cp->dmarx);
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	f042 0201 	orr.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
 8003b5a:	6862      	ldr	r2, [r4, #4]
 8003b5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b60:	6062      	str	r2, [r4, #4]
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d94b      	bls.n	8003c00 <VectorBC+0xe0>
    break;
  default:
    break;
  }
  /* Clear ADDR flag. */
  if (event & (I2C_SR1_ADDR | I2C_SR1_ADD10))
 8003b68:	f015 0f0a 	tst.w	r5, #10
    (void)dp->SR2;
 8003b6c:	bf18      	it	ne
 8003b6e:	69a3      	ldrne	r3, [r4, #24]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8003b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8003b74:	f7fd bf14 	b.w	80019a0 <_port_irq_epilogue>
  uint32_t event = dp->SR1;

  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
 8003b78:	4a26      	ldr	r2, [pc, #152]	; (8003c14 <VectorBC+0xf4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d012      	beq.n	8003ba4 <VectorBC+0x84>
 8003b7e:	3202      	adds	r2, #2
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d1f1      	bne.n	8003b68 <VectorBC+0x48>
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmatx);
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
 8003b84:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685e      	ldr	r6, [r3, #4]
 8003b8a:	b33e      	cbz	r6, 8003bdc <VectorBC+0xbc>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003b8c:	6823      	ldr	r3, [r4, #0]
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8003b8e:	8c02      	ldrh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003b90:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    break;
  case I2C_EV8_2_MASTER_BYTE_TRANSMITTED:
    /* Catches BTF event after the end of transmission.*/
    if (dmaStreamGetTransactionSize(i2cp->dmarx) > 0) {
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
 8003b94:	f042 0201 	orr.w	r2, r2, #1
 8003b98:	8402      	strh	r2, [r0, #32]
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
 8003b9a:	6023      	str	r3, [r4, #0]
  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
}
 8003b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  OSAL_IRQ_PROLOGUE();

  i2c_lld_serve_event_interrupt(&I2CD1);

  OSAL_IRQ_EPILOGUE();
 8003ba0:	f7fd befe 	b.w	80019a0 <_port_irq_epilogue>
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003ba4:	6863      	ldr	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003ba6:	6b02      	ldr	r2, [r0, #48]	; 0x30
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    dmaStreamEnable(i2cp->dmatx);
 8003bac:	6812      	ldr	r2, [r2, #0]
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
    break;
  case I2C_EV6_MASTER_TRA_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003bae:	6063      	str	r3, [r4, #4]
    dmaStreamEnable(i2cp->dmatx);
 8003bb0:	6813      	ldr	r3, [r2, #0]
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	e7d6      	b.n	8003b68 <VectorBC+0x48>
  /* Interrupts are disabled just before dmaStreamEnable() because there
     is no need of interrupts until next transaction begin. All the work is
     done by the DMA.*/
  switch (I2C_EV_MASK & (event | (regSR2 << 16))) {
  case I2C_EV5_MASTER_MODE_SELECT:
    if ((i2cp->addr >> 8) > 0) { 
 8003bba:	8c03      	ldrh	r3, [r0, #32]
 8003bbc:	0a1a      	lsrs	r2, r3, #8
 8003bbe:	d00b      	beq.n	8003bd8 <VectorBC+0xb8>
      /* 10-bit address: 1 1 1 1 0 X X R/W */
      dp->DR = 0xF0 | (0x6 & (i2cp->addr >> 8)) | (0x1 & i2cp->addr);
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003bc8:	f002 0206 	and.w	r2, r2, #6
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	6123      	str	r3, [r4, #16]
 8003bd0:	e7ca      	b.n	8003b68 <VectorBC+0x48>
      dp->DR = i2cp->addr;
    }
    break;
  case I2C_EV9_MASTER_ADD10:
    /* Set second addr byte (10-bit addressing)*/
    dp->DR = (0xFF & (i2cp->addr >> 1));
 8003bd2:	8c03      	ldrh	r3, [r0, #32]
 8003bd4:	f3c3 0347 	ubfx	r3, r3, #1, #8
 8003bd8:	6123      	str	r3, [r4, #16]
 8003bda:	e7c5      	b.n	8003b68 <VectorBC+0x48>
      /* Starts "read after write" operation, LSB = 1 -> receive.*/
      i2cp->addr |= 0x01;
      dp->CR1 |= I2C_CR1_START | I2C_CR1_ACK;
      return;
    }
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
 8003bdc:	6863      	ldr	r3, [r4, #4]
 8003bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be2:	6063      	str	r3, [r4, #4]
    dp->CR1 |= I2C_CR1_STOP;
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	2320      	movs	r3, #32
 8003bee:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8003bf2:	301c      	adds	r0, #28
 8003bf4:	4631      	mov	r1, r6
 8003bf6:	f7fd fc8b 	bl	8001510 <chThdResumeI>
 8003bfa:	f386 8811 	msr	BASEPRI, r6
 8003bfe:	e7b3      	b.n	8003b68 <VectorBC+0x48>
  case I2C_EV6_MASTER_REC_MODE_SELECTED:
    dp->CR2 &= ~I2C_CR2_ITEVTEN;
    dmaStreamEnable(i2cp->dmarx);
    dp->CR2 |= I2C_CR2_LAST;                 /* Needed in receiver mode. */
    if (dmaStreamGetTransactionSize(i2cp->dmarx) < 2)
      dp->CR1 &= ~I2C_CR1_ACK;
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c06:	6023      	str	r3, [r4, #0]
 8003c08:	e7ae      	b.n	8003b68 <VectorBC+0x48>
 8003c0a:	bf00      	nop
 8003c0c:	20001018 	.word	0x20001018
 8003c10:	00030008 	.word	0x00030008
 8003c14:	00070082 	.word	0x00070082
	...

08003c20 <VectorC0>:

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003c20:	4834      	ldr	r0, [pc, #208]	; (8003cf4 <VectorC0+0xd4>)
}

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
 8003c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint16_t sr = I2CD1.i2c->SR1;
 8003c24:	6b44      	ldr	r4, [r0, #52]	; 0x34
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003c26:	6b07      	ldr	r7, [r0, #48]	; 0x30

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003c28:	6966      	ldr	r6, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003c2a:	683a      	ldr	r2, [r7, #0]

/**
 * @brief   I2C1 error interrupt handler.
 */
OSAL_IRQ_HANDLER(STM32_I2C1_ERROR_HANDLER) {
  uint16_t sr = I2CD1.i2c->SR1;
 8003c2c:	b2b1      	uxth	r1, r6

  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
 8003c2e:	f401 435f 	and.w	r3, r1, #57088	; 0xdf00
 8003c32:	43db      	mvns	r3, r3
 8003c34:	6163      	str	r3, [r4, #20]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003c36:	6813      	ldr	r3, [r2, #0]
 8003c38:	f023 031f 	bic.w	r3, r3, #31
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	6813      	ldr	r3, [r2, #0]
 8003c40:	07db      	lsls	r3, r3, #31
 8003c42:	d4fc      	bmi.n	8003c3e <VectorC0+0x1e>
 8003c44:	f897 e008 	ldrb.w	lr, [r7, #8]
  dmaStreamDisable(i2cp->dmarx);
 8003c48:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003c4a:	687f      	ldr	r7, [r7, #4]
  dmaStreamDisable(i2cp->dmarx);
 8003c4c:	682a      	ldr	r2, [r5, #0]
 * @notapi
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
 8003c4e:	233d      	movs	r3, #61	; 0x3d
 8003c50:	fa03 f30e 	lsl.w	r3, r3, lr
 8003c54:	603b      	str	r3, [r7, #0]
  dmaStreamDisable(i2cp->dmarx);
 8003c56:	6813      	ldr	r3, [r2, #0]
 8003c58:	f023 031f 	bic.w	r3, r3, #31
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	f013 0301 	ands.w	r3, r3, #1
 8003c64:	d1fb      	bne.n	8003c5e <VectorC0+0x3e>
 8003c66:	7a2f      	ldrb	r7, [r5, #8]
 8003c68:	686d      	ldr	r5, [r5, #4]
 8003c6a:	223d      	movs	r2, #61	; 0x3d
 8003c6c:	40ba      	lsls	r2, r7

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
 8003c6e:	05cf      	lsls	r7, r1, #23
 */
static void i2c_lld_serve_error_interrupt(I2CDriver *i2cp, uint16_t sr) {

  /* Clears interrupt flags just to be safe.*/
  dmaStreamDisable(i2cp->dmatx);
  dmaStreamDisable(i2cp->dmarx);
 8003c70:	602a      	str	r2, [r5, #0]

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8003c72:	bf48      	it	mi
 8003c74:	2301      	movmi	r3, #1

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
 8003c76:	058d      	lsls	r5, r1, #22
  dmaStreamDisable(i2cp->dmarx);

  i2cp->errors = I2C_NO_ERROR;

  if (sr & I2C_SR1_BERR)                            /* Bus error.           */
    i2cp->errors |= I2C_BUS_ERROR;
 8003c78:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;
 8003c7a:	bf44      	itt	mi
 8003c7c:	f043 0302 	orrmi.w	r3, r3, #2
 8003c80:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
 8003c82:	054a      	lsls	r2, r1, #21
 8003c84:	d50a      	bpl.n	8003c9c <VectorC0+0x7c>
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
 8003c86:	6862      	ldr	r2, [r4, #4]
 8003c88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c8c:	6062      	str	r2, [r4, #4]
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003c8e:	6822      	ldr	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003c90:	f043 0304 	orr.w	r3, r3, #4
  if (sr & I2C_SR1_ARLO)                            /* Arbitration lost.    */
    i2cp->errors |= I2C_ARBITRATION_LOST;

  if (sr & I2C_SR1_AF) {                            /* Acknowledge fail.    */
    i2cp->i2c->CR2 &= ~I2C_CR2_ITEVTEN;
    i2cp->i2c->CR1 |= I2C_CR1_STOP;                 /* Setting stop bit.    */
 8003c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c98:	6022      	str	r2, [r4, #0]
    i2cp->errors |= I2C_ACK_FAILURE;
 8003c9a:	6083      	str	r3, [r0, #8]
  }

  if (sr & I2C_SR1_OVR)                             /* Overrun.             */
 8003c9c:	050f      	lsls	r7, r1, #20
    i2cp->errors |= I2C_OVERRUN;
 8003c9e:	bf44      	itt	mi
 8003ca0:	f043 0308 	orrmi.w	r3, r3, #8
 8003ca4:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
 8003ca6:	044d      	lsls	r5, r1, #17
    i2cp->errors |= I2C_TIMEOUT;
 8003ca8:	bf44      	itt	mi
 8003caa:	f043 0320 	orrmi.w	r3, r3, #32
 8003cae:	6083      	strmi	r3, [r0, #8]

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
 8003cb0:	04cc      	lsls	r4, r1, #19
 8003cb2:	d513      	bpl.n	8003cdc <VectorC0+0xbc>
    i2cp->errors |= I2C_PEC_ERROR;
 8003cb4:	f043 0310 	orr.w	r3, r3, #16

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003cb8:	0431      	lsls	r1, r6, #16

  if (sr & I2C_SR1_TIMEOUT)                         /* SMBus Timeout.       */
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;
 8003cba:	6083      	str	r3, [r0, #8]

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003cbc:	d416      	bmi.n	8003cec <VectorC0+0xcc>
 8003cbe:	2320      	movs	r3, #32
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	480c      	ldr	r0, [pc, #48]	; (8003cf8 <VectorC0+0xd8>)
 8003cc6:	f06f 0101 	mvn.w	r1, #1
 8003cca:	f7fd fc21 	bl	8001510 <chThdResumeI>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f383 8811 	msr	BASEPRI, r3

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003cd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003cd8:	f7fd be62 	b.w	80019a0 <_port_irq_epilogue>
    i2cp->errors |= I2C_TIMEOUT;

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
 8003cdc:	0432      	lsls	r2, r6, #16
 8003cde:	d405      	bmi.n	8003cec <VectorC0+0xcc>
    i2cp->errors |= I2C_SMB_ALERT;

  /* If some error has been identified then sends wakes the waiting thread.*/
  if (i2cp->errors != I2C_NO_ERROR)
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1ec      	bne.n	8003cbe <VectorC0+0x9e>

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
}
 8003ce4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  OSAL_IRQ_PROLOGUE();

  I2CD1.i2c->SR1 = ~(sr & I2C_ERROR_MASK);
  i2c_lld_serve_error_interrupt(&I2CD1, sr);

  OSAL_IRQ_EPILOGUE();
 8003ce8:	f7fd be5a 	b.w	80019a0 <_port_irq_epilogue>

  if (sr & I2C_SR1_PECERR)                          /* PEC error.           */
    i2cp->errors |= I2C_PEC_ERROR;

  if (sr & I2C_SR1_SMBALERT)                        /* SMBus alert.         */
    i2cp->errors |= I2C_SMB_ALERT;
 8003cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cf0:	6083      	str	r3, [r0, #8]
 8003cf2:	e7e4      	b.n	8003cbe <VectorC0+0x9e>
 8003cf4:	20001018 	.word	0x20001018
 8003cf8:	20001034 	.word	0x20001034
 8003cfc:	00000000 	.word	0x00000000

08003d00 <i2c_lld_init>:
/**
 * @brief   Low level I2C driver initialization.
 *
 * @notapi
 */
void i2c_lld_init(void) {
 8003d00:	b510      	push	{r4, lr}

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
 8003d02:	4c07      	ldr	r4, [pc, #28]	; (8003d20 <i2c_lld_init+0x20>)
 8003d04:	4620      	mov	r0, r4
 8003d06:	f7fe f973 	bl	8001ff0 <i2cObjectInit>
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003d0a:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <i2c_lld_init+0x24>)
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
  I2CD1.i2c    = I2C1;
 8003d0c:	4a06      	ldr	r2, [pc, #24]	; (8003d28 <i2c_lld_init+0x28>)
 8003d0e:	6362      	str	r2, [r4, #52]	; 0x34
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003d10:	2100      	movs	r1, #0
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003d12:	f103 0248 	add.w	r2, r3, #72	; 0x48
 */
void i2c_lld_init(void) {

#if STM32_I2C_USE_I2C1
  i2cObjectInit(&I2CD1);
  I2CD1.thread = NULL;
 8003d16:	61e1      	str	r1, [r4, #28]
  I2CD1.i2c    = I2C1;
  I2CD1.dmarx  = STM32_DMA_STREAM(STM32_I2C_I2C1_RX_DMA_STREAM);
 8003d18:	62e3      	str	r3, [r4, #44]	; 0x2c
  I2CD1.dmatx  = STM32_DMA_STREAM(STM32_I2C_I2C1_TX_DMA_STREAM);
 8003d1a:	6322      	str	r2, [r4, #48]	; 0x30
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	bf00      	nop
 8003d20:	20001018 	.word	0x20001018
 8003d24:	08007880 	.word	0x08007880
 8003d28:	40005400 	.word	0x40005400
 8003d2c:	00000000 	.word	0x00000000

08003d30 <i2c_lld_start>:
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003d34:	7803      	ldrb	r3, [r0, #0]
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003d36:	6b45      	ldr	r5, [r0, #52]	; 0x34

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003d38:	f240 4256 	movw	r2, #1110	; 0x456
 8003d3c:	6282      	str	r2, [r0, #40]	; 0x28
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003d3e:	2b01      	cmp	r3, #1

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003d40:	f240 4216 	movw	r2, #1046	; 0x416
 *
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
 8003d44:	4604      	mov	r4, r0

  i2cp->txdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_M2P;
  i2cp->rxdmamode = STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE |
 8003d46:	6242      	str	r2, [r0, #36]	; 0x24
                    STM32_DMA_CR_MINC       | STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE       | STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DIR_P2M;

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {
 8003d48:	d043      	beq.n	8003dd2 <i2c_lld_start+0xa2>
 * @param[in] i2cp      pointer to the @p I2CDriver object
 *
 * @notapi
 */
void i2c_lld_start(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003d4a:	462b      	mov	r3, r5
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003d4c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003d4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003d50:	6860      	ldr	r0, [r4, #4]
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003d52:	f8d1 9000 	ldr.w	r9, [r1]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003d56:	f8d2 8000 	ldr.w	r8, [r2]
 * @notapi
 */
static void i2c_lld_set_clock(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  uint16_t regCCR, clock_div;
  int32_t clock_speed = i2cp->config->clock_speed;
 8003d5a:	6844      	ldr	r4, [r0, #4]
  i2cdutycycle_t duty = i2cp->config->duty_cycle;
 8003d5c:	f890 e008 	ldrb.w	lr, [r0, #8]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003d60:	4e4c      	ldr	r6, [pc, #304]	; (8003e94 <i2c_lld_start+0x164>)
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003d62:	f105 0110 	add.w	r1, r5, #16
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
  dp->CR1 = 0;
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003d66:	f44f 6710 	mov.w	r7, #2304	; 0x900
  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8003d6a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
  dp->CR1 = 0;
 8003d6e:	2200      	movs	r2, #0
    }
#endif /* STM32_I2C_USE_I2C3 */
  }

  /* I2C registers pointed by the DMA.*/
  dmaStreamSetPeripheral(i2cp->dmarx, &dp->DR);
 8003d70:	f8c9 1008 	str.w	r1, [r9, #8]
  dmaStreamSetPeripheral(i2cp->dmatx, &dp->DR);
 8003d74:	f8c8 1008 	str.w	r1, [r8, #8]

  /* Reset i2c peripheral.*/
  dp->CR1 = I2C_CR1_SWRST;
 8003d78:	f8c5 c000 	str.w	ip, [r5]
  dp->CR1 = 0;
 8003d7c:	602a      	str	r2, [r5, #0]
  dp->CR2 = I2C_CR2_ITERREN | I2C_CR2_DMAEN;
 8003d7e:	606f      	str	r7, [r5, #4]
  osalDbgCheck((i2cp != NULL) &&
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
 8003d80:	685f      	ldr	r7, [r3, #4]
 8003d82:	f64f 71c0 	movw	r1, #65472	; 0xffc0
 8003d86:	4039      	ands	r1, r7
 8003d88:	6059      	str	r1, [r3, #4]
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8003d8a:	6859      	ldr	r1, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003d8c:	42b4      	cmp	r4, r6
               (clock_speed > 0) &&
               (clock_speed <= 4000000));

  /* CR2 Configuration.*/
  dp->CR2 &= (uint16_t)~I2C_CR2_FREQ;
  dp->CR2 |= (uint16_t)I2C_CLK_FREQ;
 8003d8e:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 8003d92:	6059      	str	r1, [r3, #4]

  /* CCR Configuration.*/
  regCCR = 0;
  clock_div = I2C_CCR_CCR;

  if (clock_speed <= 100000) {
 8003d94:	dd51      	ble.n	8003e3a <i2c_lld_start+0x10a>
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
  }
  else if (clock_speed <= 400000) {
 8003d96:	4940      	ldr	r1, [pc, #256]	; (8003e98 <i2c_lld_start+0x168>)
 8003d98:	428c      	cmp	r4, r1
 8003d9a:	dc09      	bgt.n	8003db0 <i2c_lld_start+0x80>
    /* Configure clock_div in fast mode.*/
    osalDbgAssert((duty == FAST_DUTY_CYCLE_2) ||
                  (duty == FAST_DUTY_CYCLE_16_9),
                  "invalid fast mode duty cycle");

    if (duty == FAST_DUTY_CYCLE_2) {
 8003d9c:	f1be 0f02 	cmp.w	lr, #2
 8003da0:	d06a      	beq.n	8003e78 <i2c_lld_start+0x148>
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
 8003da2:	f1be 0f03 	cmp.w	lr, #3
 8003da6:	d05a      	beq.n	8003e5e <i2c_lld_start+0x12e>
 8003da8:	f648 72ff 	movw	r2, #36863	; 0x8fff
    osalDbgAssert(clock_div >= 0x01,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (I2C_CCR_FS | (clock_div & I2C_CCR_CCR));

    /* Sets the Maximum Rise Time for fast mode.*/
    dp->TRISE = (I2C_CLK_FREQ * 300 / 1000) + 1;
 8003dac:	210d      	movs	r1, #13
 8003dae:	6219      	str	r1, [r3, #32]
  }

  osalDbgAssert((clock_div <= I2C_CCR_CCR), "the selected clock is too low");

  dp->CCR = regCCR;
 8003db0:	61da      	str	r2, [r3, #28]
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
 8003db2:	7801      	ldrb	r1, [r0, #0]
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003db4:	681a      	ldr	r2, [r3, #0]
  switch (opmode) {
 8003db6:	2902      	cmp	r1, #2
static void i2c_lld_set_opmode(I2CDriver *i2cp) {
  I2C_TypeDef *dp = i2cp->i2c;
  i2copmode_t opmode = i2cp->config->op_mode;
  uint16_t regCR1;

  regCR1 = dp->CR1;
 8003db8:	b292      	uxth	r2, r2
  switch (opmode) {
 8003dba:	d04a      	beq.n	8003e52 <i2c_lld_start+0x122>
 8003dbc:	2903      	cmp	r1, #3
 8003dbe:	d045      	beq.n	8003e4c <i2c_lld_start+0x11c>
 8003dc0:	2901      	cmp	r1, #1
 8003dc2:	d036      	beq.n	8003e32 <i2c_lld_start+0x102>
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  }
  dp->CR1 = regCR1;
 8003dc4:	601a      	str	r2, [r3, #0]
  /* Setup I2C parameters.*/
  i2c_lld_set_clock(i2cp);
  i2c_lld_set_opmode(i2cp);

  /* Ready to go.*/
  dp->CR1 |= I2C_CR1_PE;
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  /* If in stopped state then enables the I2C and DMA clocks.*/
  if (i2cp->state == I2C_STOP) {

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
 8003dd2:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <i2c_lld_start+0x16c>)
 8003dd4:	4298      	cmp	r0, r3
 8003dd6:	d1b8      	bne.n	8003d4a <i2c_lld_start+0x1a>
      bool b;

      rccResetI2C1();
 8003dd8:	4e31      	ldr	r6, [pc, #196]	; (8003ea0 <i2c_lld_start+0x170>)
      b = dmaStreamAllocate(i2cp->dmarx,
 8003dda:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003ddc:	6a33      	ldr	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003dde:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <i2c_lld_start+0x174>)

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003de4:	2700      	movs	r7, #0
 8003de6:	6233      	str	r3, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003de8:	2104      	movs	r1, #4
 8003dea:	4623      	mov	r3, r4

#if STM32_I2C_USE_I2C1
    if (&I2CD1 == i2cp) {
      bool b;

      rccResetI2C1();
 8003dec:	6237      	str	r7, [r6, #32]
      b = dmaStreamAllocate(i2cp->dmarx,
 8003dee:	f7ff f967 	bl	80030c0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_rx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(i2cp->dmatx,
 8003df2:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <i2c_lld_start+0x178>)
 8003df4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003df6:	2104      	movs	r1, #4
 8003df8:	4623      	mov	r3, r4
 8003dfa:	f7ff f961 	bl	80030c0 <dmaStreamAllocate>
                            STM32_I2C_I2C1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)i2c_lld_serve_tx_end_irq,
                            (void *)i2cp);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
 8003dfe:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003e00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e04:	6433      	str	r3, [r6, #64]	; 0x40
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8003e06:	201f      	movs	r0, #31
 8003e08:	2104      	movs	r1, #4
 8003e0a:	f7fe fee9 	bl	8002be0 <nvicEnableVector>
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
 8003e0e:	2104      	movs	r1, #4
 8003e10:	2020      	movs	r0, #32
 8003e12:	f7fe fee5 	bl	8002be0 <nvicEnableVector>

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003e16:	6a61      	ldr	r1, [r4, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003e18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003e1c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003e20:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003e24:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003e28:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
      osalDbgAssert(!b, "stream already allocated");
      rccEnableI2C1(FALSE);
      nvicEnableVector(I2C1_EV_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);
      nvicEnableVector(I2C1_ER_IRQn, STM32_I2C_I2C1_IRQ_PRIORITY);

      i2cp->rxdmamode |= STM32_DMA_CR_CHSEL(I2C1_RX_DMA_CHANNEL) |
 8003e2c:	6261      	str	r1, [r4, #36]	; 0x24
                       STM32_DMA_CR_PL(STM32_I2C_I2C1_DMA_PRIORITY);
      i2cp->txdmamode |= STM32_DMA_CR_CHSEL(I2C1_TX_DMA_CHANNEL) |
 8003e2e:	62a2      	str	r2, [r4, #40]	; 0x28
 8003e30:	e78c      	b.n	8003d4c <i2c_lld_start+0x1c>
  uint16_t regCR1;

  regCR1 = dp->CR1;
  switch (opmode) {
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003e32:	f022 020a 	bic.w	r2, r2, #10
 8003e36:	b292      	uxth	r2, r2
 8003e38:	e7c4      	b.n	8003dc4 <i2c_lld_start+0x94>
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8003e3a:	212b      	movs	r1, #43	; 0x2b
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8003e3c:	0064      	lsls	r4, r4, #1
 8003e3e:	4a1b      	ldr	r2, [pc, #108]	; (8003eac <i2c_lld_start+0x17c>)
    osalDbgAssert(clock_div >= 0x04,
                  "clock divider less then 0x04 not allowed");
    regCCR |= (clock_div & I2C_CCR_CCR);

    /* Sets the Maximum Rise Time for standard mode.*/
    dp->TRISE = I2C_CLK_FREQ + 1;
 8003e40:	6219      	str	r1, [r3, #32]
    osalDbgAssert(duty == STD_DUTY_CYCLE, "invalid standard mode duty cycle");

    /* Standard mode clock_div calculate: Tlow/Thigh = 1/1.*/
    osalDbgAssert((STM32_PCLK1 % (clock_speed * 2)) == 0,
                  "PCLK1 must be divisible without remainder");
    clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 2));
 8003e42:	fbb2 f2f4 	udiv	r2, r2, r4
 8003e46:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003e4a:	e7b1      	b.n	8003db0 <i2c_lld_start+0x80>
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_HOST:
    regCR1 |= (I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
 8003e4c:	f042 020a 	orr.w	r2, r2, #10
 8003e50:	e7b8      	b.n	8003dc4 <i2c_lld_start+0x94>
  case OPMODE_I2C:
    regCR1 &= (uint16_t)~(I2C_CR1_SMBUS|I2C_CR1_SMBTYPE);
    break;
  case OPMODE_SMBUS_DEVICE:
    regCR1 |= I2C_CR1_SMBUS;
    regCR1 &= (uint16_t)~(I2C_CR1_SMBTYPE);
 8003e52:	f022 0208 	bic.w	r2, r2, #8
 8003e56:	b292      	uxth	r2, r2
 8003e58:	f042 0202 	orr.w	r2, r2, #2
 8003e5c:	e7b2      	b.n	8003dc4 <i2c_lld_start+0x94>
    }
    else if (duty == FAST_DUTY_CYCLE_16_9) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 16/9.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 25)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 25));
 8003e5e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8003e62:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <i2c_lld_start+0x17c>)
 8003e68:	fbb2 f2f4 	udiv	r2, r2, r4
 8003e6c:	ea6f 4282 	mvn.w	r2, r2, lsl #18
 8003e70:	ea6f 4292 	mvn.w	r2, r2, lsr #18
 8003e74:	b292      	uxth	r2, r2
 8003e76:	e799      	b.n	8003dac <i2c_lld_start+0x7c>

    if (duty == FAST_DUTY_CYCLE_2) {
      /* Fast mode clock_div calculate: Tlow/Thigh = 2/1.*/
      osalDbgAssert((STM32_PCLK1 % (clock_speed * 3)) == 0,
                    "PCLK1 must be divided without remainder");
      clock_div = (uint16_t)(STM32_PCLK1 / (clock_speed * 3));
 8003e78:	f101 711e 	add.w	r1, r1, #41418752	; 0x2780000
 8003e7c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8003e80:	f501 3131 	add.w	r1, r1, #181248	; 0x2c400
 8003e84:	fbb1 f2f2 	udiv	r2, r1, r2
 8003e88:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003e8c:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8003e90:	b292      	uxth	r2, r2
 8003e92:	e78b      	b.n	8003dac <i2c_lld_start+0x7c>
 8003e94:	000186a0 	.word	0x000186a0
 8003e98:	00061a80 	.word	0x00061a80
 8003e9c:	20001018 	.word	0x20001018
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	08003ab1 	.word	0x08003ab1
 8003ea8:	08003a71 	.word	0x08003a71
 8003eac:	0280de80 	.word	0x0280de80

08003eb0 <i2c_lld_master_transmit_timeout>:
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003eb4:	0049      	lsls	r1, r1, #1
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8003eb6:	2500      	movs	r5, #0
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003eb8:	4694      	mov	ip, r2
 8003eba:	aa08      	add	r2, sp, #32
 8003ebc:	4698      	mov	r8, r3

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;

  /* Initializes driver fields, LSB = 0 -> transmit.*/
  i2cp->addr = (addr << 1);
 8003ebe:	8401      	strh	r1, [r0, #32]
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
  I2C_TypeDef *dp = i2cp->i2c;
 8003ec0:	6b44      	ldr	r4, [r0, #52]	; 0x34
#if defined(STM32F1XX_I2C)
  osalDbgCheck((rxbytes == 0) || ((rxbytes > 1) && (rxbuf != NULL)));
#endif

  /* Resetting error flags for this transfer.*/
  i2cp->errors = I2C_NO_ERROR;
 8003ec2:	6085      	str	r5, [r0, #8]
 * @notapi
 */
msg_t i2c_lld_master_transmit_timeout(I2CDriver *i2cp, i2caddr_t addr,
                                      const uint8_t *txbuf, size_t txbytes,
                                      uint8_t *rxbuf, size_t rxbytes,
                                      systime_t timeout) {
 8003ec4:	e892 040c 	ldmia.w	r2, {r2, r3, sl}
 8003ec8:	f385 8811 	msr	BASEPRI, r5

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003ecc:	6b07      	ldr	r7, [r0, #48]	; 0x30
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003ece:	6ac6      	ldr	r6, [r0, #44]	; 0x2c

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003ed0:	f8d7 e000 	ldr.w	lr, [r7]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003ed4:	6837      	ldr	r7, [r6, #0]
 8003ed6:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24

  /* Releases the lock from high level driver.*/
  osalSysUnlock();

  /* TX DMA setup.*/
  dmaStreamSetMode(i2cp->dmatx, i2cp->txdmamode);
 8003eda:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003edc:	4e17      	ldr	r6, [pc, #92]	; (8003f3c <i2c_lld_master_transmit_timeout+0x8c>)
 8003ede:	f8ce 1000 	str.w	r1, [lr]
  dmaStreamSetMemory0(i2cp->dmatx, txbuf);
 8003ee2:	f8ce c00c 	str.w	ip, [lr, #12]
  dmaStreamSetTransactionSize(i2cp->dmatx, txbytes);
 8003ee6:	f8ce 8004 	str.w	r8, [lr, #4]

  /* RX DMA setup.*/
  dmaStreamSetMode(i2cp->dmarx, i2cp->rxdmamode);
 8003eea:	f8c7 9000 	str.w	r9, [r7]
  dmaStreamSetMemory0(i2cp->dmarx, rxbuf);
 8003eee:	60fa      	str	r2, [r7, #12]
  dmaStreamSetTransactionSize(i2cp->dmarx, rxbytes);
 8003ef0:	607b      	str	r3, [r7, #4]
 8003ef2:	462a      	mov	r2, r5
 8003ef4:	6ab7      	ldr	r7, [r6, #40]	; 0x28
 8003ef6:	2520      	movs	r5, #32
 8003ef8:	e001      	b.n	8003efe <i2c_lld_master_transmit_timeout+0x4e>
 8003efa:	f382 8811 	msr	BASEPRI, r2
 8003efe:	f385 8811 	msr	BASEPRI, r5
  while (true) {
    osalSysLock();

    /* If the bus is not busy then the operation can continue, note, the
       loop is exited in the locked state.*/
    if (!(dp->SR2 & I2C_SR2_BUSY) && !(dp->CR1 & I2C_CR1_STOP))
 8003f02:	69a3      	ldr	r3, [r4, #24]
 8003f04:	0799      	lsls	r1, r3, #30
 8003f06:	d402      	bmi.n	8003f0e <i2c_lld_master_transmit_timeout+0x5e>
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	059b      	lsls	r3, r3, #22
 8003f0c:	d508      	bpl.n	8003f20 <i2c_lld_master_transmit_timeout+0x70>
 8003f0e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 */
static inline bool chVTIsTimeWithinX(systime_t time,
                                     systime_t start,
                                     systime_t end) {

  return (bool)((systime_t)(time - start) < (systime_t)(end - start));
 8003f10:	1bdb      	subs	r3, r3, r7
      break;

    /* If the system time went outside the allowed window then a timeout
       condition is returned.*/
    if (!osalOsIsTimeWithinX(osalOsGetSystemTimeX(), start, end))
 8003f12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f16:	d3f0      	bcc.n	8003efa <i2c_lld_master_transmit_timeout+0x4a>
  dp->CR2 |= I2C_CR2_ITEVTEN;
  dp->CR1 |= I2C_CR1_START;

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    osalSysUnlock();
  }

  /* Starts the operation.*/
  dp->CR2 |= I2C_CR2_ITEVTEN;
 8003f20:	6863      	ldr	r3, [r4, #4]
 8003f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f26:	6063      	str	r3, [r4, #4]
  dp->CR1 |= I2C_CR1_START;
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 * @sclass
 */
static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
                                              systime_t timeout) {

  return chThdSuspendTimeoutS(trp, timeout);
 8003f2e:	4651      	mov	r1, sl
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	301c      	adds	r0, #28

  /* Waits for the operation completion or a timeout.*/
  return osalThreadSuspendTimeoutS(&i2cp->thread, timeout);
}
 8003f34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	f7fd bada 	b.w	80014f0 <chThdSuspendTimeoutS>
 8003f3c:	20000c70 	.word	0x20000c70

08003f40 <usb_lld_pump>:
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8003f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.r_current->p_name = name;
 8003f44:	4b7c      	ldr	r3, [pc, #496]	; (8004138 <usb_lld_pump+0x1f8>)
 8003f46:	497d      	ldr	r1, [pc, #500]	; (800413c <usb_lld_pump+0x1fc>)
 8003f48:	699a      	ldr	r2, [r3, #24]
  USBDriver *usbp = (USBDriver *)p;
  stm32_otg_t *otgp = usbp->otg;
 8003f4a:	f8d0 a050 	ldr.w	sl, [r0, #80]	; 0x50
 8003f4e:	6191      	str	r1, [r2, #24]
 *
 * @param[in] p         pointer to the @p USBDriver object
 *
 * @special
 */
void usb_lld_pump(void *p) {
 8003f50:	b083      	sub	sp, #12
 8003f52:	4683      	mov	fp, r0
 8003f54:	2320      	movs	r3, #32
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f100 0360 	add.w	r3, r0, #96	; 0x60
 8003f5e:	9301      	str	r3, [sp, #4]
  while (true) {
    usbep_t ep;
    uint32_t epmask;

    /* Nothing to do, going to sleep.*/
    if ((usbp->state == USB_STOP) ||
 8003f60:	f89b 3000 	ldrb.w	r3, [fp]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d006      	beq.n	8003f76 <usb_lld_pump+0x36>
 8003f68:	f8db 305c 	ldr.w	r3, [fp, #92]	; 0x5c
 8003f6c:	b963      	cbnz	r3, 8003f88 <usb_lld_pump+0x48>
        ((usbp->txpending == 0) && !(otgp->GINTSTS & GINTSTS_RXFLVL))) {
 8003f6e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003f72:	06de      	lsls	r6, r3, #27
 8003f74:	d408      	bmi.n	8003f88 <usb_lld_pump+0x48>
      otgp->GINTMSK |= GINTMSK_RXFLVLM;
 8003f76:	f8da 3018 	ldr.w	r3, [sl, #24]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendS(trp);
 8003f7a:	9801      	ldr	r0, [sp, #4]
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
 8003f80:	f8ca 3018 	str.w	r3, [sl, #24]
 8003f84:	f7fd faa4 	bl	80014d0 <chThdSuspendS>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	469e      	mov	lr, r3

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8003f90:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003f94:	f013 0310 	ands.w	r3, r3, #16
 8003f98:	d050      	beq.n	800403c <usb_lld_pump+0xfc>
 * @notapi
 */
static void otg_rxfifo_handler(USBDriver *usbp) {
  uint32_t sts, cnt, ep;

  sts = usbp->otg->GRXSTSP;
 8003f9a:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 8003f9e:	6a1a      	ldr	r2, [r3, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003fa0:	f402 11f0 	and.w	r1, r2, #1966080	; 0x1e0000
 8003fa4:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8003fa8:	d01e      	beq.n	8003fe8 <usb_lld_pump+0xa8>
 8003faa:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8003fae:	d1ef      	bne.n	8003f90 <usb_lld_pump+0x50>
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8003fb0:	f002 010f 	and.w	r1, r2, #15
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003fb4:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
  sts = usbp->otg->GRXSTSP;
  switch (sts & GRXSTSP_PKTSTS_MASK) {
  case GRXSTSP_SETUP_COMP:
    break;
  case GRXSTSP_SETUP_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003fb8:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003fbc:	68c9      	ldr	r1, [r1, #12]
 8003fbe:	6a0c      	ldr	r4, [r1, #32]
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d0e5      	beq.n	8003f90 <usb_lld_pump+0x50>
 8003fc4:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8003fc6:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8003fca:	460b      	mov	r3, r1
 8003fcc:	e001      	b.n	8003fd2 <usb_lld_pump+0x92>
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d0de      	beq.n	8003f90 <usb_lld_pump+0x50>
    if ((i & 3) == 0){
 8003fd2:	079d      	lsls	r5, r3, #30
      w = *fifop;
 8003fd4:	bf08      	it	eq
 8003fd6:	6801      	ldreq	r1, [r0, #0]
    }
    if (i < max) {
 8003fd8:	2b07      	cmp	r3, #7
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 8003fda:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 8003fde:	d8f6      	bhi.n	8003fce <usb_lld_pump+0x8e>
      *buf++ = (uint8_t)w;
 8003fe0:	7021      	strb	r1, [r4, #0]
      w >>= 8;
 8003fe2:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 8003fe4:	3401      	adds	r4, #1
 8003fe6:	e7f2      	b.n	8003fce <usb_lld_pump+0x8e>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8003fe8:	f002 060f 	and.w	r6, r2, #15
 8003fec:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003ff0:	f3c2 120a 	ubfx	r2, r2, #4, #11
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
 8003ff4:	68f1      	ldr	r1, [r6, #12]
 8003ff6:	6989      	ldr	r1, [r1, #24]
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
 8003ff8:	684c      	ldr	r4, [r1, #4]
                            cnt, 8);
    break;
  case GRXSTSP_OUT_DATA:
    cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
    ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8003ffa:	680d      	ldr	r5, [r1, #0]
 8003ffc:	6888      	ldr	r0, [r1, #8]
 8003ffe:	1b2d      	subs	r5, r5, r4
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8004000:	b38a      	cbz	r2, 8004066 <usb_lld_pump+0x126>
 8004002:	2100      	movs	r1, #0
    if ((i & 3) == 0){
      w = *fifop;
 8004004:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8004008:	460b      	mov	r3, r1
    if ((i & 3) == 0){
 800400a:	079f      	lsls	r7, r3, #30
      w = *fifop;
 800400c:	bf08      	it	eq
 800400e:	6821      	ldreq	r1, [r4, #0]
    }
    if (i < max) {
 8004010:	429d      	cmp	r5, r3
      *buf++ = (uint8_t)w;
      w >>= 8;
    }
    i++;
 8004012:	f103 0301 	add.w	r3, r3, #1

  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
 8004016:	d902      	bls.n	800401e <usb_lld_pump+0xde>
      *buf++ = (uint8_t)w;
 8004018:	7001      	strb	r1, [r0, #0]
      w >>= 8;
 800401a:	0a09      	lsrs	r1, r1, #8
  while (i < n) {
    if ((i & 3) == 0){
      w = *fifop;
    }
    if (i < max) {
      *buf++ = (uint8_t)w;
 800401c:	3001      	adds	r0, #1
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 800401e:	4293      	cmp	r3, r2
 8004020:	d1f3      	bne.n	800400a <usb_lld_pump+0xca>
 8004022:	68f3      	ldr	r3, [r6, #12]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	6898      	ldr	r0, [r3, #8]
 8004028:	685c      	ldr	r4, [r3, #4]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800402a:	4410      	add	r0, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 800402c:	4422      	add	r2, r4
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
                            usbp->epc[ep]->out_state->rxbuf,
                            cnt,
                            usbp->epc[ep]->out_state->rxsize -
                            usbp->epc[ep]->out_state->rxcnt);
    usbp->epc[ep]->out_state->rxbuf += cnt;
 800402e:	6098      	str	r0, [r3, #8]
    usbp->epc[ep]->out_state->rxcnt += cnt;
 8004030:	605a      	str	r2, [r3, #4]

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {

      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
 8004032:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004036:	f013 0310 	ands.w	r3, r3, #16
 800403a:	d1ae      	bne.n	8003f9a <usb_lld_pump+0x5a>
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
      if (usbp->txpending & epmask) {
 800403c:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f10e 	lsl.w	r1, r1, lr
      if (usbp->txpending & epmask) {
 8004046:	4211      	tst	r1, r2
      /* Empties the RX FIFO.*/
      while (otgp->GINTSTS & GINTSTS_RXFLVL) {
        otg_rxfifo_handler(usbp);
      }

      epmask = (1 << ep);
 8004048:	9100      	str	r1, [sp, #0]
      if (usbp->txpending & epmask) {
 800404a:	d10e      	bne.n	800406a <usb_lld_pump+0x12a>
 800404c:	f10e 0e01 	add.w	lr, lr, #1
      osalThreadSuspendS(&usbp->wait);
    }
    osalSysUnlock();

    /* Checks if there are TXFIFOs to be filled.*/
    for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8004050:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	fa5f fe8e 	uxtb.w	lr, lr
 800405a:	459e      	cmp	lr, r3
 800405c:	d998      	bls.n	8003f90 <usb_lld_pump+0x50>
 800405e:	2320      	movs	r3, #32
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	e77c      	b.n	8003f60 <usb_lld_pump+0x20>
                                    size_t n,
                                    size_t max) {
  uint32_t w = 0;
  size_t i = 0;

  while (i < n) {
 8004066:	460b      	mov	r3, r1
 8004068:	e7df      	b.n	800402a <usb_lld_pump+0xea>
 800406a:	2220      	movs	r2, #32
 800406c:	f382 8811 	msr	BASEPRI, r2
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8004070:	f8da 1008 	ldr.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8004074:	f8db 205c 	ldr.w	r2, [fp, #92]	; 0x5c
 8004078:	9800      	ldr	r0, [sp, #0]
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 800407a:	f021 0101 	bic.w	r1, r1, #1
        usbp->txpending &= ~epmask;
 800407e:	ea22 0200 	bic.w	r2, r2, r0
           operation.
           Synopsys document: DesignWare Cores USB 2.0 Hi-Speed On-The-Go (OTG)
             "The application has to finish writing one complete packet before
              switching to a different channel/endpoint FIFO. Violating this
              rule results in an error.".*/
        otgp->GAHBCFG &= ~GAHBCFG_GINTMSK;
 8004082:	f8ca 1008 	str.w	r1, [sl, #8]
        usbp->txpending &= ~epmask;
 8004086:	f8cb 205c 	str.w	r2, [fp, #92]	; 0x5c
 800408a:	f383 8811 	msr	BASEPRI, r3
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 800408e:	eb0b 038e 	add.w	r3, fp, lr, lsl #2
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	695f      	ldr	r7, [r3, #20]
 8004096:	687d      	ldr	r5, [r7, #4]
 8004098:	f8d7 c000 	ldr.w	ip, [r7]
 800409c:	45ac      	cmp	ip, r5
 800409e:	d947      	bls.n	8004130 <usb_lld_pump+0x1f0>
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80040a0:	f8db 0050 	ldr.w	r0, [fp, #80]	; 0x50
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
    if (n > usbp->epc[ep]->in_maxsize)
 80040a4:	f8b3 9010 	ldrh.w	r9, [r3, #16]
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80040a8:	eb00 184e 	add.w	r8, r0, lr, lsl #5
    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80040ac:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80040b0:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 80040b4:	454c      	cmp	r4, r9
 80040b6:	bf28      	it	cs
 80040b8:	464c      	movcs	r4, r9
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 80040c0:	f10e 0e01 	add.w	lr, lr, #1
 80040c4:	d81f      	bhi.n	8004106 <usb_lld_pump+0x1c6>
 80040c6:	68be      	ldr	r6, [r7, #8]
 80040c8:	eb00 300e 	add.w	r0, r0, lr, lsl #12
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 80040cc:	6833      	ldr	r3, [r6, #0]
 80040ce:	6003      	str	r3, [r0, #0]
    if (n <= 4) {
 80040d0:	2c04      	cmp	r4, #4
 80040d2:	d907      	bls.n	80040e4 <usb_lld_pump+0x1a4>
 80040d4:	4623      	mov	r3, r4
 80040d6:	4632      	mov	r2, r6
      break;
    }
    n -= 4;
 80040d8:	3b04      	subs	r3, #4
                                       size_t n) {

  osalDbgAssert(n > 0, "is zero");

  while (true) {
    *fifop = *((uint32_t *)buf);
 80040da:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80040de:	6001      	str	r1, [r0, #0]
    if (n <= 4) {
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d8f9      	bhi.n	80040d8 <usb_lld_pump+0x198>
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80040e4:	4425      	add	r5, r4
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 80040e6:	4426      	add	r6, r4
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80040e8:	4565      	cmp	r5, ip
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
 80040ea:	60be      	str	r6, [r7, #8]
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
    usbp->epc[ep]->in_state->txcnt += n;
 80040ec:	607d      	str	r5, [r7, #4]
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
 80040ee:	d221      	bcs.n	8004134 <usb_lld_pump+0x1f4>
      return true;

    /* Number of bytes remaining in current transaction.*/
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 80040f0:	ebc5 040c 	rsb	r4, r5, ip
    if (n > usbp->epc[ep]->in_maxsize)
      n = usbp->epc[ep]->in_maxsize;

    /* Checks if in the TXFIFO there is enough space to accommodate the
       next packet.*/
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 80040f4:	f8d8 3918 	ldr.w	r3, [r8, #2328]	; 0x918
 80040f8:	454c      	cmp	r4, r9
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	bf28      	it	cs
 80040fe:	464c      	movcs	r4, r9
 8004100:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004104:	d9e2      	bls.n	80040cc <usb_lld_pump+0x18c>
      return false;
 8004106:	2200      	movs	r2, #0
 8004108:	2320      	movs	r3, #32
 800410a:	f383 8811 	msr	BASEPRI, r3
        osalSysUnlock();

        done = otg_txfifo_handler(usbp, ep);

        osalSysLock();
        otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800410e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	f8ca 3008 	str.w	r3, [sl, #8]
        if (!done)
 800411a:	b92a      	cbnz	r2, 8004128 <usb_lld_pump+0x1e8>
          otgp->DIEPEMPMSK |= epmask;
 800411c:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
 8004120:	9a00      	ldr	r2, [sp, #0]
 8004122:	431a      	orrs	r2, r3
 8004124:	f8ca 2834 	str.w	r2, [sl, #2100]	; 0x834
 8004128:	2300      	movs	r3, #0
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	e78f      	b.n	8004050 <usb_lld_pump+0x110>
 8004130:	f10e 0e01 	add.w	lr, lr, #1
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize)
      return true;
 8004134:	2201      	movs	r2, #1
 8004136:	e7e7      	b.n	8004108 <usb_lld_pump+0x1c8>
 8004138:	20000c70 	.word	0x20000c70
 800413c:	08007960 	.word	0x08007960

08004140 <usb_lld_init>:
/**
 * @brief   Low level USB driver initialization.
 *
 * @notapi
 */
void usb_lld_init(void) {
 8004140:	b510      	push	{r4, lr}

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
 8004142:	4c06      	ldr	r4, [pc, #24]	; (800415c <usb_lld_init+0x1c>)
 8004144:	4620      	mov	r0, r4
 8004146:	f7fe fa83 	bl	8002650 <usbObjectInit>
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 800414a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  USBD1.otgparams = &fsparams;
 800414e:	4a04      	ldr	r2, [pc, #16]	; (8004160 <usb_lld_init+0x20>)

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
  USBD1.otg       = OTG_FS;
 8004150:	6523      	str	r3, [r4, #80]	; 0x50
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8004152:	2300      	movs	r3, #0
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;
 8004154:	6562      	str	r2, [r4, #84]	; 0x54
void usb_lld_init(void) {

  /* Driver initialization.*/
#if STM32_USB_USE_OTG1
  usbObjectInit(&USBD1);
  USBD1.wait      = NULL;
 8004156:	6623      	str	r3, [r4, #96]	; 0x60
  USBD1.otg       = OTG_FS;
  USBD1.otgparams = &fsparams;

#if defined(_CHIBIOS_RT_)
  USBD1.tr = NULL;
 8004158:	6663      	str	r3, [r4, #100]	; 0x64
 800415a:	bd10      	pop	{r4, pc}
 800415c:	20001050 	.word	0x20001050
 8004160:	08007950 	.word	0x08007950
	...

08004170 <usb_lld_start>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 8004170:	b5f0      	push	{r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 8004172:	7803      	ldrb	r3, [r0, #0]
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004174:	6d06      	ldr	r6, [r0, #80]	; 0x50

  if (usbp->state == USB_STOP) {
 8004176:	2b01      	cmp	r3, #1
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
 8004178:	b083      	sub	sp, #12
  stm32_otg_t *otgp = usbp->otg;

  if (usbp->state == USB_STOP) {
 800417a:	d001      	beq.n	8004180 <usb_lld_start+0x10>
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
  }
}
 800417c:	b003      	add	sp, #12
 800417e:	bdf0      	pop	{r4, r5, r6, r7, pc}

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 8004180:	4b3d      	ldr	r3, [pc, #244]	; (8004278 <usb_lld_start+0x108>)
 8004182:	4298      	cmp	r0, r3
 8004184:	4605      	mov	r5, r0
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_start(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004186:	bf18      	it	ne
 8004188:	4634      	movne	r4, r6

  if (usbp->state == USB_STOP) {
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
 800418a:	d050      	beq.n	800422e <usb_lld_start+0xbe>
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 800418c:	2300      	movs	r3, #0

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800418e:	21c0      	movs	r1, #192	; 0xc0
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8004190:	f44f 1234 	mov.w	r2, #2949120	; 0x2d0000
#endif
    }
#endif

    /* Clearing mask of TXFIFOs to be filled.*/
    usbp->txpending = 0;
 8004194:	65eb      	str	r3, [r5, #92]	; 0x5c
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 8004196:	2020      	movs	r0, #32

    /* PHY enabled.*/
    otgp->PCGCCTL = 0;
 8004198:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00

    /* VBUS sensing and transceiver enabled.*/
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 800419c:	6031      	str	r1, [r6, #0]
    if (&USBD2 == usbp) {
      otgp->GCCFG = 0;
    }
#endif
#else
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800419e:	63b2      	str	r2, [r6, #56]	; 0x38
 80041a0:	f7fc ff1e 	bl	8000fe0 <chSysPolledDelayX>
  stm32_otg_t *otgp = usbp->otg;

  osalSysPolledDelayX(32);

  /* Core reset and delay of at least 3 PHY cycles.*/
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80041a4:	2301      	movs	r3, #1
 80041a6:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80041a8:	6923      	ldr	r3, [r4, #16]
 80041aa:	07db      	lsls	r3, r3, #31
 80041ac:	d4fc      	bmi.n	80041a8 <usb_lld_start+0x38>
 80041ae:	2012      	movs	r0, #18
 80041b0:	f7fc ff16 	bl	8000fe0 <chSysPolledDelayX>
    ;

  osalSysPolledDelayX(18);

  /* Wait AHB idle condition.*/
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80041b4:	6923      	ldr	r3, [r4, #16]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	dafc      	bge.n	80041b4 <usb_lld_start+0x44>
 80041ba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80041bc:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80041be:	f8d3 e008 	ldr.w	lr, [r3, #8]

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 80041c2:	2300      	movs	r3, #0

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80041c4:	461a      	mov	r2, r3

    /* Soft core reset.*/
    otg_core_reset(usbp);

    /* Interrupts on TXFIFOs half empty.*/
    otgp->GAHBCFG = 0;
 80041c6:	60b3      	str	r3, [r6, #8]
static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
    otgp->ie[i].DIEPCTL = 0;
 80041c8:	4619      	mov	r1, r3
    otgp->ie[i].DIEPTSIZ = 0;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80041ca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80041ce:	eb07 1342 	add.w	r3, r7, r2, lsl #5

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80041d2:	3201      	adds	r2, #1
 80041d4:	4596      	cmp	lr, r2
    otgp->ie[i].DIEPCTL = 0;
 80041d6:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
 80041da:	f04f 0000 	mov.w	r0, #0
    otgp->ie[i].DIEPTSIZ = 0;
 80041de:	f8c3 1910 	str.w	r1, [r3, #2320]	; 0x910
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80041e2:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

    otgp->oe[i].DOEPCTL = 0;
 80041e6:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    otgp->oe[i].DOEPTSIZ = 0;
 80041ea:	f8c3 1b10 	str.w	r1, [r3, #2832]	; 0xb10
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80041ee:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

static void otg_disable_ep(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
  unsigned i;

  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80041f2:	d2ec      	bcs.n	80041ce <usb_lld_start+0x5e>
    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
 80041f4:	686b      	ldr	r3, [r5, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]

    otgp->oe[i].DOEPCTL = 0;
    otgp->oe[i].DOEPTSIZ = 0;
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
  }
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80041f8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80041fc:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
    /* Endpoints re-initialization.*/
    otg_disable_ep(usbp);

    /* Clear all pending Device Interrupts, only the USB Reset interrupt
       is required initially.*/
    otgp->DIEPMSK  = 0;
 8004200:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8004204:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8004208:	f8c6 081c 	str.w	r0, [r6, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800420c:	b163      	cbz	r3, 8004228 <usb_lld_start+0xb8>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM;
    else
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800420e:	4b1b      	ldr	r3, [pc, #108]	; (800427c <usb_lld_start+0x10c>)
 8004210:	61b3      	str	r3, [r6, #24]
    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 8004212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
                       GINTMSK_ESUSPM | GINTMSK_SRQM | GINTMSK_WKUM |
                       GINTMSK_IISOIXFRM | GINTMSK_IISOOXFRM |
                       GINTMSK_SOFM;

    /* Clears all pending IRQs, if any. */
    otgp->GINTSTS  = 0xFFFFFFFF;
 8004214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004218:	6172      	str	r2, [r6, #20]

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
 800421a:	b1f3      	cbz	r3, 800425a <usb_lld_start+0xea>
      chSchRescheduleS();
  }
#endif

    /* Global interrupts enable.*/
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 800421c:	68b3      	ldr	r3, [r6, #8]
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	60b3      	str	r3, [r6, #8]
  }
}
 8004224:	b003      	add	sp, #12
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
       is required initially.*/
    otgp->DIEPMSK  = 0;
    otgp->DOEPMSK  = 0;
    otgp->DAINTMSK = 0;
    if (usbp->config->sof_cb == NULL)
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8004228:	4b15      	ldr	r3, [pc, #84]	; (8004280 <usb_lld_start+0x110>)
 800422a:	61b3      	str	r3, [r6, #24]
 800422c:	e7f1      	b.n	8004212 <usb_lld_start+0xa2>
    /* Clock activation.*/

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
 800422e:	4b15      	ldr	r3, [pc, #84]	; (8004284 <usb_lld_start+0x114>)
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004236:	635a      	str	r2, [r3, #52]	; 0x34
      rccResetOTG_FS();
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	2100      	movs	r1, #0
 800423c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004240:	615a      	str	r2, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004242:	2043      	movs	r0, #67	; 0x43

#if STM32_USB_USE_OTG1
    if (&USBD1 == usbp) {
      /* OTG FS clock enable and reset.*/
      rccEnableOTG_FS(false);
      rccResetOTG_FS();
 8004244:	6159      	str	r1, [r3, #20]

      /* Enables IRQ vector.*/
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);
 8004246:	210e      	movs	r1, #14
 8004248:	f7fe fcca 	bl	8002be0 <nvicEnableVector>

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <usb_lld_start+0x118>)
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <usb_lld_start+0x11c>)
      nvicEnableVector(STM32_OTG1_NUMBER, STM32_USB_OTG1_IRQ_PRIORITY);

      /* - Forced device mode.
         - USB turn-around time = TRDT_VALUE_FS.
         - Full Speed 1.1 PHY.*/
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8004250:	60f2      	str	r2, [r6, #12]
 8004252:	6d2c      	ldr	r4, [r5, #80]	; 0x50
                      GUSBCFG_PHYSEL;

      /* 48MHz 1.1 PHY.*/
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 8004254:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
 8004258:	e798      	b.n	800418c <usb_lld_start+0x1c>
    otgp->GINTSTS  = 0xFFFFFFFF;

#if defined(_CHIBIOS_RT_)
    /* Creates the data pump thread. Note, it is created only once.*/
    if (usbp->tr == NULL) {
      usbp->tr = chThdCreateI(usbp->wa_pump, sizeof usbp->wa_pump,
 800425a:	f44f 7106 	mov.w	r1, #536	; 0x218
 800425e:	2202      	movs	r2, #2
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <usb_lld_start+0x120>)
 8004262:	9500      	str	r5, [sp, #0]
 8004264:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8004268:	f7fd f882 	bl	8001370 <chThdCreateI>
 800426c:	6668      	str	r0, [r5, #100]	; 0x64
 */
static inline thread_t *chThdStartI(thread_t *tp) {

  chDbgAssert(tp->p_state == CH_STATE_WTSTART, "wrong state");

  return chSchReadyI(tp);
 800426e:	f7fc ff57 	bl	8001120 <chSchReadyI>
                              STM32_USB_OTG_THREAD_PRIO,
                              usb_lld_pump, usbp);
      chThdStartI(usbp->tr);
      chSchRescheduleS();
 8004272:	f7fd f835 	bl	80012e0 <chSchRescheduleS>
 8004276:	e7d1      	b.n	800421c <usb_lld_start+0xac>
 8004278:	20001050 	.word	0x20001050
 800427c:	c0303c08 	.word	0xc0303c08
 8004280:	c0303c00 	.word	0xc0303c00
 8004284:	40023800 	.word	0x40023800
 8004288:	40001440 	.word	0x40001440
 800428c:	02200003 	.word	0x02200003
 8004290:	08003f41 	.word	0x08003f41
	...

080042a0 <usb_lld_reset>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80042a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  unsigned i;
  stm32_otg_t *otgp = usbp->otg;
 80042a2:	6d05      	ldr	r5, [r0, #80]	; 0x50
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80042a4:	2320      	movs	r3, #32
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_reset(USBDriver *usbp) {
 80042a6:	4607      	mov	r7, r0
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80042a8:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80042aa:	692b      	ldr	r3, [r5, #16]
 80042ac:	f013 0420 	ands.w	r4, r3, #32
 80042b0:	d1fb      	bne.n	80042aa <usb_lld_reset+0xa>
 80042b2:	2012      	movs	r0, #18
 80042b4:	f7fc fe94 	bl	8000fe0 <chSysPolledDelayX>
 80042b8:	f8d7 e054 	ldr.w	lr, [r7, #84]	; 0x54

  /* Flush the Tx FIFO.*/
  otg_txfifo_flush(usbp, 0);

  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
 80042bc:	f8c5 4834 	str.w	r4, [r5, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 80042c0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80042c4:	f8de 6008 	ldr.w	r6, [lr, #8]
 80042c8:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80042cc:	4623      	mov	r3, r4
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80042ce:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80042d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042d6:	eb05 1243 	add.w	r2, r5, r3, lsl #5
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80042da:	3301      	adds	r3, #1
 80042dc:	42b3      	cmp	r3, r6
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 80042de:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 80042e2:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80042e6:	f8c2 1908 	str.w	r1, [r2, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 80042ea:	f8c2 1b08 	str.w	r1, [r2, #2824]	; 0xb08
  /* Endpoint interrupts all disabled and cleared.*/
  otgp->DIEPEMPMSK = 0;
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);

  /* All endpoints in NAK mode, interrupts cleared.*/
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80042ee:	d9f2      	bls.n	80042d6 <usb_lld_reset+0x36>
 *
 * @notapi
 */
static void otg_ram_reset(USBDriver *usbp) {

  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80042f0:	f8de 3000 	ldr.w	r3, [lr]
 80042f4:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Resets the FIFO memory allocator.*/
  otg_ram_reset(usbp);

  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 80042f6:	f8de 3000 	ldr.w	r3, [lr]
 80042fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042fc:	626b      	str	r3, [r5, #36]	; 0x24
}

static void otg_rxfifo_flush(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 80042fe:	2310      	movs	r3, #16
 8004300:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8004302:	6913      	ldr	r3, [r2, #16]
 8004304:	f013 0410 	ands.w	r4, r3, #16
 8004308:	d1fb      	bne.n	8004302 <usb_lld_reset+0x62>
 800430a:	2012      	movs	r0, #18
 800430c:	f7fc fe68 	bl	8000fe0 <chSysPolledDelayX>
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8004310:	f8d5 3800 	ldr.w	r3, [r5, #2048]	; 0x800
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
  otgp->oe[0].DOEPTSIZ = 0;
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 8004314:	4a10      	ldr	r2, [pc, #64]	; (8004358 <usb_lld_reset+0xb8>)
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8004316:	4811      	ldr	r0, [pc, #68]	; (800435c <usb_lld_reset+0xbc>)
  /* Receive FIFO size initialization, the address is always zero.*/
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
  otg_rxfifo_flush(usbp);

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8004318:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800431c:	f8c5 3800 	str.w	r3, [r5, #2048]	; 0x800

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8004320:	69ab      	ldr	r3, [r5, #24]
 8004322:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8004326:	f043 0310 	orr.w	r3, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800432a:	2109      	movs	r1, #9

  /* Resets the device address to zero.*/
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);

  /* Enables also EP-related interrupt sources.*/
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 800432c:	61ab      	str	r3, [r5, #24]
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 800432e:	f8c5 1810 	str.w	r1, [r5, #2064]	; 0x810
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 8004332:	f8c5 1814 	str.w	r1, [r5, #2068]	; 0x814

  /* EP0 initialization, it is a special case.*/
  usbp->epc[0] = &ep0config;
 8004336:	60f8      	str	r0, [r7, #12]
  otgp->oe[0].DOEPTSIZ = 0;
 8004338:	f8c5 4b10 	str.w	r4, [r5, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800433c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
 8004340:	f8c5 4910 	str.w	r4, [r5, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8004344:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8004348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
  usbp->pmnext += size;
 800434a:	f103 0210 	add.w	r2, r3, #16
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800434e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8004352:	65ba      	str	r2, [r7, #88]	; 0x58
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
                        DOEPCTL_MPSIZ(ep0config.out_maxsize);
  otgp->ie[0].DIEPTSIZ = 0;
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
                        DIEPCTL_TXFNUM(0) | DIEPCTL_MPSIZ(ep0config.in_maxsize);
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 8004354:	62ab      	str	r3, [r5, #40]	; 0x28
 8004356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004358:	10008040 	.word	0x10008040
 800435c:	08007970 	.word	0x08007970

08004360 <usb_lld_set_address>:
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 8004360:	6d02      	ldr	r2, [r0, #80]	; 0x50

  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 8004362:	f890 104e 	ldrb.w	r1, [r0, #78]	; 0x4e
 8004366:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
 800436a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800436e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004372:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 8004376:	4770      	bx	lr
	...

08004380 <usb_lld_init_endpoint>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8004380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	fa0f f881 	sxth.w	r8, r1
 8004388:	eb00 0788 	add.w	r7, r0, r8, lsl #2
 800438c:	460d      	mov	r5, r1
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 800438e:	68fb      	ldr	r3, [r7, #12]
 *
 * @notapi
 */
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl, fsize;
  stm32_otg_t *otgp = usbp->otg;
 8004390:	6d04      	ldr	r4, [r0, #80]	; 0x50

  /* IN and OUT common parameters.*/
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	f002 0203 	and.w	r2, r2, #3
 8004398:	2a02      	cmp	r2, #2
 800439a:	d05c      	beq.n	8004456 <usb_lld_init_endpoint+0xd6>
 800439c:	2a03      	cmp	r2, #3
 800439e:	d05c      	beq.n	800445a <usb_lld_init_endpoint+0xda>
  case USB_EP_MODE_TYPE_CTRL:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL;
 80043a0:	4e4a      	ldr	r6, [pc, #296]	; (80044cc <usb_lld_init_endpoint+0x14c>)
 80043a2:	494b      	ldr	r1, [pc, #300]	; (80044d0 <usb_lld_init_endpoint+0x150>)
 80043a4:	2a01      	cmp	r2, #1
 80043a6:	bf18      	it	ne
 80043a8:	460e      	movne	r6, r1
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 80043aa:	016a      	lsls	r2, r5, #5
  if (usbp->epc[ep]->out_state != NULL) {
 80043ac:	6999      	ldr	r1, [r3, #24]
  default:
    return;
  }

  /* OUT endpoint activation or deactivation.*/
  otgp->oe[ep].DOEPTSIZ = 0;
 80043ae:	eb04 0e02 	add.w	lr, r4, r2
 80043b2:	f04f 0c00 	mov.w	ip, #0
 80043b6:	f8ce cb10 	str.w	ip, [lr, #2832]	; 0xb10
  if (usbp->epc[ep]->out_state != NULL) {
 80043ba:	2900      	cmp	r1, #0
 80043bc:	d071      	beq.n	80044a2 <usb_lld_init_endpoint+0x122>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 80043be:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80043c2:	f105 0158 	add.w	r1, r5, #88	; 0x58
 80043c6:	0149      	lsls	r1, r1, #5
 80043c8:	ea46 0e0e 	orr.w	lr, r6, lr
 80043cc:	f844 e001 	str.w	lr, [r4, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 80043d0:	f105 0c10 	add.w	ip, r5, #16
 80043d4:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 80043d8:	f04f 0e01 	mov.w	lr, #1
 80043dc:	fa0e fe0c 	lsl.w	lr, lr, ip
 80043e0:	ea4e 0101 	orr.w	r1, lr, r1
 80043e4:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 80043e8:	4422      	add	r2, r4
  if (usbp->epc[ep]->in_state != NULL) {
 80043ea:	6959      	ldr	r1, [r3, #20]
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
  }

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
 80043ec:	f04f 0e00 	mov.w	lr, #0
 80043f0:	f8c2 e910 	str.w	lr, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 80043f4:	b399      	cbz	r1, 800445e <usb_lld_init_endpoint+0xde>
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
 80043f6:	8b99      	ldrh	r1, [r3, #28]

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80043f8:	8a1a      	ldrh	r2, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 80043fa:	2901      	cmp	r1, #1

  /* IN endpoint activation or deactivation.*/
  otgp->ie[ep].DIEPTSIZ = 0;
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
 80043fc:	ea4f 0392 	mov.w	r3, r2, lsr #2
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
 8004400:	bf88      	it	hi
 8004402:	434b      	mulhi	r3, r1
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004404:	f105 0e3f 	add.w	lr, r5, #63	; 0x3f
 * @notapi
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
 8004408:	6d81      	ldr	r1, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800440a:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800440e:	01aa      	lsls	r2, r5, #6
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 8004410:	eb03 0c01 	add.w	ip, r3, r1
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004414:	f042 0220 	orr.w	r2, r2, #32
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004418:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 */
static uint32_t otg_ram_alloc(USBDriver *usbp, size_t size) {
  uint32_t next;

  next = usbp->pmnext;
  usbp->pmnext += size;
 800441c:	f8c0 c058 	str.w	ip, [r0, #88]	; 0x58
  if (usbp->epc[ep]->in_state != NULL) {
    /* FIFO allocation for the IN endpoint.*/
    fsize = usbp->epc[ep]->in_maxsize / 4;
    if (usbp->epc[ep]->in_multiplier > 1)
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8004420:	f8ce 3004 	str.w	r3, [lr, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004424:	6122      	str	r2, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004426:	6923      	ldr	r3, [r4, #16]
 8004428:	069a      	lsls	r2, r3, #26
 800442a:	d4fc      	bmi.n	8004426 <usb_lld_init_endpoint+0xa6>
 800442c:	2012      	movs	r0, #18
 800442e:	f7fc fdd7 	bl	8000fe0 <chSysPolledDelayX>
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8004432:	68fb      	ldr	r3, [r7, #12]
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
                           DIEPCTL_TXFNUM(ep) |
 8004434:	8a1a      	ldrh	r2, [r3, #16]
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8004436:	f105 0348 	add.w	r3, r5, #72	; 0x48
 800443a:	015b      	lsls	r3, r3, #5
 800443c:	ea42 5285 	orr.w	r2, r2, r5, lsl #22
                           DIEPCTL_TXFNUM(ep) |
 8004440:	4332      	orrs	r2, r6
      fsize *= usbp->epc[ep]->in_multiplier;
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
                            DIEPTXF_INEPTXSA(otg_ram_alloc(usbp, fsize));
    otg_txfifo_flush(usbp, ep);

    otgp->ie[ep].DIEPCTL = ctl |
 8004442:	50e2      	str	r2, [r4, r3]
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8004444:	2301      	movs	r3, #1
 8004446:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 800444a:	40ab      	lsls	r3, r5
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 8004452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    break;
  case USB_EP_MODE_TYPE_ISOC:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_ISO;
    break;
  case USB_EP_MODE_TYPE_BULK:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_BULK;
 8004456:	4e1f      	ldr	r6, [pc, #124]	; (80044d4 <usb_lld_init_endpoint+0x154>)
    break;
 8004458:	e7a7      	b.n	80043aa <usb_lld_init_endpoint+0x2a>
  case USB_EP_MODE_TYPE_INTR:
    ctl = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_INTR;
 800445a:	4e1f      	ldr	r6, [pc, #124]	; (80044d8 <usb_lld_init_endpoint+0x158>)
    break;
 800445c:	e7a5      	b.n	80043aa <usb_lld_init_endpoint+0x2a>
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 800445e:	f105 023f 	add.w	r2, r5, #63	; 0x3f
 8004462:	eb04 0282 	add.w	r2, r4, r2, lsl #2
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8004466:	01ab      	lsls	r3, r5, #6
                           DIEPCTL_TXFNUM(ep) |
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 8004468:	491c      	ldr	r1, [pc, #112]	; (80044dc <usb_lld_init_endpoint+0x15c>)
 800446a:	6051      	str	r1, [r2, #4]
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 800446c:	f043 0320 	orr.w	r3, r3, #32
 8004470:	6123      	str	r3, [r4, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	069b      	lsls	r3, r3, #26
 8004476:	d4fc      	bmi.n	8004472 <usb_lld_init_endpoint+0xf2>
 8004478:	eb04 1848 	add.w	r8, r4, r8, lsl #5
 800447c:	2012      	movs	r0, #18
 800447e:	f7fc fdaf 	bl	8000fe0 <chSysPolledDelayX>
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
  }
  else {
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
    otg_txfifo_flush(usbp, ep);
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 8004482:	f8d8 2900 	ldr.w	r2, [r8, #2304]	; 0x900
 8004486:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800448a:	f8c8 2900 	str.w	r2, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 800448e:	f8d4 281c 	ldr.w	r2, [r4, #2076]	; 0x81c
 8004492:	2301      	movs	r3, #1
 8004494:	40ab      	lsls	r3, r5
 8004496:	ea22 0303 	bic.w	r3, r2, r3
 800449a:	f8c4 381c 	str.w	r3, [r4, #2076]	; 0x81c
 800449e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044a2:	eb04 1148 	add.w	r1, r4, r8, lsl #5
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80044a6:	f105 0c10 	add.w	ip, r5, #16
  if (usbp->epc[ep]->out_state != NULL) {
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
  }
  else {
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80044aa:	f8d1 eb00 	ldr.w	lr, [r1, #2816]	; 0xb00
 80044ae:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 80044b2:	f8c1 eb00 	str.w	lr, [r1, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80044b6:	f8d4 181c 	ldr.w	r1, [r4, #2076]	; 0x81c
 80044ba:	f04f 0e01 	mov.w	lr, #1
 80044be:	fa0e fe0c 	lsl.w	lr, lr, ip
 80044c2:	ea21 010e 	bic.w	r1, r1, lr
 80044c6:	f8c4 181c 	str.w	r1, [r4, #2076]	; 0x81c
 80044ca:	e78d      	b.n	80043e8 <usb_lld_init_endpoint+0x68>
 80044cc:	10048000 	.word	0x10048000
 80044d0:	10008000 	.word	0x10008000
 80044d4:	10088000 	.word	0x10088000
 80044d8:	100c8000 	.word	0x100c8000
 80044dc:	02000400 	.word	0x02000400

080044e0 <usb_lld_get_status_out>:
usbepstatus_t usb_lld_get_status_out(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->oe[ep].DOEPCTL;
 80044e0:	3158      	adds	r1, #88	; 0x58
 80044e2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80044e4:	0149      	lsls	r1, r1, #5
 80044e6:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 80044e8:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 80044ec:	d004      	beq.n	80044f8 <usb_lld_get_status_out+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DOEPCTL_STALL)
 80044ee:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 80044f2:	bf14      	ite	ne
 80044f4:	2001      	movne	r0, #1
 80044f6:	2002      	moveq	r0, #2
}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	0000      	movs	r0, r0
	...

08004500 <usb_lld_get_status_in>:
usbepstatus_t usb_lld_get_status_in(USBDriver *usbp, usbep_t ep) {
  uint32_t ctl;

  (void)usbp;

  ctl = usbp->otg->ie[ep].DIEPCTL;
 8004500:	3148      	adds	r1, #72	; 0x48
 8004502:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004504:	0149      	lsls	r1, r1, #5
 8004506:	585b      	ldr	r3, [r3, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 8004508:	f413 4000 	ands.w	r0, r3, #32768	; 0x8000
 800450c:	d004      	beq.n	8004518 <usb_lld_get_status_in+0x18>
    return EP_STATUS_DISABLED;
  if (ctl & DIEPCTL_STALL)
 800450e:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
    return EP_STATUS_STALLED;
  return EP_STATUS_ACTIVE;
 8004512:	bf14      	ite	ne
 8004514:	2001      	movne	r0, #1
 8004516:	2002      	moveq	r0, #2
}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	0000      	movs	r0, r0
	...

08004520 <usb_lld_read_setup>:
 *
 * @notapi
 */
void usb_lld_read_setup(USBDriver *usbp, usbep_t ep, uint8_t *buf) {

  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8004520:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004524:	68cb      	ldr	r3, [r1, #12]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	6819      	ldr	r1, [r3, #0]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	6011      	str	r1, [r2, #0]
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
	...

08004540 <usb_lld_start_out>:
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004540:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8004544:	b430      	push	{r4, r5}
  uint32_t pcnt, rxsize;
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8004546:	68dc      	ldr	r4, [r3, #12]
 8004548:	69a2      	ldr	r2, [r4, #24]

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
 800454a:	6813      	ldr	r3, [r2, #0]
 800454c:	60d3      	str	r3, [r2, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 800454e:	b909      	cbnz	r1, 8004554 <usb_lld_start_out+0x14>
 8004550:	2b40      	cmp	r3, #64	; 0x40
 8004552:	d822      	bhi.n	800459a <usb_lld_start_out+0x5a>
 8004554:	3b01      	subs	r3, #1
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8004556:	8a62      	ldrh	r2, [r4, #18]
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004558:	6d00      	ldr	r0, [r0, #80]	; 0x50
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800455a:	6824      	ldr	r4, [r4, #0]
  /* Transaction size is rounded to a multiple of packet size because the
     following requirement in the RM:
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 800455c:	4413      	add	r3, r2
 800455e:	fbb3 f3f2 	udiv	r3, r3, r2
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8004562:	fb02 f203 	mul.w	r2, r2, r3
 8004566:	3203      	adds	r2, #3

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004568:	04db      	lsls	r3, r3, #19
     "For OUT transfers, the transfer size field in the endpoint's transfer
     size register must be a multiple of the maximum packet size of the
     endpoint, adjusted to the Word boundary".*/
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 800456a:	f022 0203 	bic.w	r2, r2, #3
 800456e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8004572:	4313      	orrs	r3, r2
 8004574:	eb00 1541 	add.w	r5, r0, r1, lsl #5
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004578:	f004 0203 	and.w	r2, r4, #3
 800457c:	2a01      	cmp	r2, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
           usbp->epc[ep]->out_maxsize;
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;

  /*Setting up transaction parameters in DOEPTSIZ.*/
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 800457e:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8004582:	d00e      	beq.n	80045a2 <usb_lld_start_out+0x62>
 8004584:	b209      	sxth	r1, r1
 8004586:	eb00 1141 	add.w	r1, r0, r1, lsl #5
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
}
 800458a:	bc30      	pop	{r4, r5}
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 800458c:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004590:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004594:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8004598:	4770      	bx	lr
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  osp->totsize = osp->rxsize;
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
      osp->rxsize = EP0_MAX_OUTSIZE;
 800459a:	2340      	movs	r3, #64	; 0x40
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	233f      	movs	r3, #63	; 0x3f
 80045a0:	e7d9      	b.n	8004556 <usb_lld_start_out+0x16>
 80045a2:	b209      	sxth	r1, r1
                               DOEPTSIZ_XFRSIZ(rxsize);

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
    /* Odd/even bit toggling for isochronous endpoint.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80045a4:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80045a8:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 80045ac:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 80045b0:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 80045b4:	bf14      	ite	ne
 80045b6:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
    else
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 80045ba:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 80045be:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 80045c2:	e7e0      	b.n	8004586 <usb_lld_start_out+0x46>
	...

080045d0 <otg_epout_handler.constprop.9>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80045d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 80045d4:	4d24      	ldr	r5, [pc, #144]	; (8004668 <otg_epout_handler.constprop.9+0x98>)
 80045d6:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80045d8:	eb07 1340 	add.w	r3, r7, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 80045dc:	4606      	mov	r6, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->oe[ep].DOEPINT;
 80045de:	f8d3 4b08 	ldr.w	r4, [r3, #2824]	; 0xb08

  /* Resets all EP IRQ sources.*/
  otgp->oe[ep].DOEPINT = epint;
 80045e2:	f8c3 4b08 	str.w	r4, [r3, #2824]	; 0xb08

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 80045e6:	0720      	lsls	r0, r4, #28
 80045e8:	d503      	bpl.n	80045f2 <otg_epout_handler.constprop.9+0x22>
 80045ea:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80045ee:	0719      	lsls	r1, r3, #28
 80045f0:	d431      	bmi.n	8004656 <otg_epout_handler.constprop.9+0x86>
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);

  }
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 80045f2:	07e2      	lsls	r2, r4, #31
 80045f4:	d51b      	bpl.n	800462e <otg_epout_handler.constprop.9+0x5e>
 80045f6:	f8d7 3814 	ldr.w	r3, [r7, #2068]	; 0x814
 80045fa:	07db      	lsls	r3, r3, #31
 80045fc:	d517      	bpl.n	800462e <otg_epout_handler.constprop.9+0x5e>
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 80045fe:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	6991      	ldr	r1, [r2, #24]

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8004606:	8a50      	ldrh	r0, [r2, #18]
 8004608:	684c      	ldr	r4, [r1, #4]
 800460a:	fbb4 f3f0 	udiv	r3, r4, r0
 800460e:	fb00 4413 	mls	r4, r0, r3, r4
 8004612:	b174      	cbz	r4, 8004632 <otg_epout_handler.constprop.9+0x62>
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 8004614:	8969      	ldrh	r1, [r5, #10]
 8004616:	68d2      	ldr	r2, [r2, #12]
 8004618:	2301      	movs	r3, #1
 800461a:	40b3      	lsls	r3, r6
 800461c:	ea21 0303 	bic.w	r3, r1, r3
 8004620:	816b      	strh	r3, [r5, #10]
 8004622:	b122      	cbz	r2, 800462e <otg_epout_handler.constprop.9+0x5e>
 8004624:	4631      	mov	r1, r6
 8004626:	4810      	ldr	r0, [pc, #64]	; (8004668 <otg_epout_handler.constprop.9+0x98>)
    }
  }
}
 8004628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      usb_lld_start_out(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on OUT transfer.*/
      _usb_isr_invoke_out_cb(usbp, ep);
 800462c:	4710      	bx	r2
 800462e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
        (osp->rxsize < osp->totsize)) {
 8004632:	6808      	ldr	r0, [r1, #0]
 8004634:	68cb      	ldr	r3, [r1, #12]
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
    /* Receive transfer complete.*/
    USBOutEndpointState *osp = usbp->epc[ep]->out_state;

    /* A short packet always terminates a transaction.*/
    if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8004636:	4298      	cmp	r0, r3
 8004638:	d2ec      	bcs.n	8004614 <otg_epout_handler.constprop.9+0x44>
        (osp->rxsize < osp->totsize)) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      osp->rxsize = osp->totsize - osp->rxsize;
 800463a:	1a1b      	subs	r3, r3, r0
      osp->rxcnt  = 0;
 800463c:	e881 0018 	stmia.w	r1, {r3, r4}
 8004640:	2320      	movs	r3, #32
 8004642:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_out(usbp, ep);
 8004646:	4808      	ldr	r0, [pc, #32]	; (8004668 <otg_epout_handler.constprop.9+0x98>)
 8004648:	4631      	mov	r1, r6
 800464a:	f7ff ff79 	bl	8004540 <usb_lld_start_out>
 800464e:	f384 8811 	msr	BASEPRI, r4
 8004652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  otgp->oe[ep].DOEPINT = epint;

  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
    /* Setup packets handling, setup packets are handled using a
       specific callback.*/
    _usb_isr_invoke_setup_cb(usbp, ep);
 8004656:	eb05 0386 	add.w	r3, r5, r6, lsl #2
 800465a:	4628      	mov	r0, r5
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4631      	mov	r1, r6
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4798      	blx	r3
 8004664:	e7c5      	b.n	80045f2 <otg_epout_handler.constprop.9+0x22>
 8004666:	bf00      	nop
 8004668:	20001050 	.word	0x20001050
 800466c:	00000000 	.word	0x00000000

08004670 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004670:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8004674:	b4f0      	push	{r4, r5, r6, r7}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004676:	68dc      	ldr	r4, [r3, #12]
 8004678:	6965      	ldr	r5, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 800467a:	682b      	ldr	r3, [r5, #0]
 800467c:	60eb      	str	r3, [r5, #12]
  if (isp->txsize == 0) {
 800467e:	b9f3      	cbnz	r3, 80046be <usb_lld_start_in+0x4e>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8004680:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8004682:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004686:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800468a:	f8c3 2910 	str.w	r2, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	f003 0303 	and.w	r3, r3, #3
 8004694:	2b01      	cmp	r3, #1
 8004696:	d026      	beq.n	80046e6 <usb_lld_start_in+0x76>
 8004698:	b20b      	sxth	r3, r1
 800469a:	eb00 1343 	add.w	r3, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 800469e:	2401      	movs	r4, #1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 80046a0:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 80046a4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80046a8:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 80046ac:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80046b0:	fa04 f301 	lsl.w	r3, r4, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
}
 80046ba:	bcf0      	pop	{r4, r5, r6, r7}
 80046bc:	4770      	bx	lr
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 80046be:	b319      	cbz	r1, 8004708 <usb_lld_start_in+0x98>
 80046c0:	1e5d      	subs	r5, r3, #1
 80046c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80046c6:	6d00      	ldr	r0, [r0, #80]	; 0x50
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80046c8:	8a26      	ldrh	r6, [r4, #16]
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80046ca:	eb00 1741 	add.w	r7, r0, r1, lsl #5
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
      isp->txsize = EP0_MAX_INSIZE;

    /* Normal case.*/
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 80046ce:	19ab      	adds	r3, r5, r6
 80046d0:	fbb3 f3f6 	udiv	r3, r3, r6
                    usbp->epc[ep]->in_maxsize;
    /* TODO: Support more than one packet per frame for isochronous transfers.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 80046d4:	ea42 43c3 	orr.w	r3, r2, r3, lsl #19
 80046d8:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d1d8      	bne.n	8004698 <usb_lld_start_in+0x28>
    /* Odd/even bit toggling.*/
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 80046e6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80046ea:	f413 7f80 	tst.w	r3, #256	; 0x100
 80046ee:	b20b      	sxth	r3, r1
 80046f0:	eb00 1443 	add.w	r4, r0, r3, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 80046f4:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
 80046f8:	bf14      	ite	ne
 80046fa:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 80046fe:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
 8004702:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
 8004706:	e7c8      	b.n	800469a <usb_lld_start_in+0x2a>
  if (isp->txsize == 0) {
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
  }
  else {
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	d9d9      	bls.n	80046c0 <usb_lld_start_in+0x50>
      isp->txsize = EP0_MAX_INSIZE;
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	602b      	str	r3, [r5, #0]
 8004710:	4a01      	ldr	r2, [pc, #4]	; (8004718 <usb_lld_start_in+0xa8>)
 8004712:	253f      	movs	r5, #63	; 0x3f
 8004714:	e7d7      	b.n	80046c6 <usb_lld_start_in+0x56>
 8004716:	bf00      	nop
 8004718:	20000040 	.word	0x20000040
 800471c:	00000000 	.word	0x00000000

08004720 <otg_epin_handler.constprop.10>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8004720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8004724:	4e29      	ldr	r6, [pc, #164]	; (80047cc <otg_epin_handler.constprop.10+0xac>)
 8004726:	6d35      	ldr	r5, [r6, #80]	; 0x50
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8004728:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 800472c:	4607      	mov	r7, r0
  stm32_otg_t *otgp = usbp->otg;
  uint32_t epint = otgp->ie[ep].DIEPINT;
 800472e:	f8d3 4908 	ldr.w	r4, [r3, #2312]	; 0x908

  otgp->ie[ep].DIEPINT = epint;
 8004732:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908

  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8004736:	07e1      	lsls	r1, r4, #31
 8004738:	d503      	bpl.n	8004742 <otg_epin_handler.constprop.10+0x22>
 800473a:	f8d5 3810 	ldr.w	r3, [r5, #2064]	; 0x810
 800473e:	07da      	lsls	r2, r3, #31
 8004740:	d409      	bmi.n	8004756 <otg_epin_handler.constprop.10+0x36>
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 8004742:	0623      	lsls	r3, r4, #24
 8004744:	d505      	bpl.n	8004752 <otg_epin_handler.constprop.10+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8004746:	2301      	movs	r3, #1
 8004748:	f8d5 2834 	ldr.w	r2, [r5, #2100]	; 0x834
 800474c:	40bb      	lsls	r3, r7
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
    }
  }
  if ((epint & DIEPINT_TXFE) &&
 800474e:	4213      	tst	r3, r2
 8004750:	d118      	bne.n	8004784 <otg_epin_handler.constprop.10+0x64>
 8004752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (epint & DIEPINT_TOC) {
    /* Timeouts not handled yet, not sure how to handle.*/
  }
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
    /* Transmit transfer complete.*/
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8004756:	eb06 0380 	add.w	r3, r6, r0, lsl #2
 800475a:	68d9      	ldr	r1, [r3, #12]
 800475c:	694b      	ldr	r3, [r1, #20]

    if (isp->txsize < isp->totsize) {
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	4290      	cmp	r0, r2
 8004764:	d323      	bcc.n	80047ae <otg_epin_handler.constprop.10+0x8e>
      usb_lld_start_in(usbp, ep);
      osalSysUnlockFromISR();
    }
    else {
      /* End on IN transfer.*/
      _usb_isr_invoke_in_cb(usbp, ep);
 8004766:	8932      	ldrh	r2, [r6, #8]
 8004768:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800476c:	2301      	movs	r3, #1
 800476e:	40bb      	lsls	r3, r7
 8004770:	ea22 0303 	bic.w	r3, r2, r3
 8004774:	8133      	strh	r3, [r6, #8]
 8004776:	f1bc 0f00 	cmp.w	ip, #0
 800477a:	d0e2      	beq.n	8004742 <otg_epin_handler.constprop.10+0x22>
 800477c:	4630      	mov	r0, r6
 800477e:	4639      	mov	r1, r7
 8004780:	47e0      	blx	ip
 8004782:	e7de      	b.n	8004742 <otg_epin_handler.constprop.10+0x22>
 8004784:	2220      	movs	r2, #32
 8004786:	f382 8811 	msr	BASEPRI, r2
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
    otgp->DIEPEMPMSK &= ~(1 << ep);
 800478a:	f8d5 1834 	ldr.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800478e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004790:	480f      	ldr	r0, [pc, #60]	; (80047d0 <otg_epin_handler.constprop.10+0xb0>)
    otgp->DIEPEMPMSK &= ~(1 << ep);
 8004792:	ea21 0103 	bic.w	r1, r1, r3
 8004796:	f8c5 1834 	str.w	r1, [r5, #2100]	; 0x834
  }
  if ((epint & DIEPINT_TXFE) &&
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
    /* The thread is made ready, it will be scheduled on ISR exit.*/
    osalSysLockFromISR();
    usbp->txpending |= (1 << ep);
 800479a:	4313      	orrs	r3, r2
 800479c:	2100      	movs	r1, #0
 800479e:	65f3      	str	r3, [r6, #92]	; 0x5c
 80047a0:	f7fc feb6 	bl	8001510 <chThdResumeI>
 80047a4:	2300      	movs	r3, #0
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

    if (isp->txsize < isp->totsize) {
      /* In case the transaction covered only part of the total transfer
         then another transaction is immediately started in order to
         cover the remaining.*/
      isp->txsize = isp->totsize - isp->txsize;
 80047ae:	1a12      	subs	r2, r2, r0
      isp->txcnt  = 0;
 80047b0:	f04f 0800 	mov.w	r8, #0
 80047b4:	e883 0104 	stmia.w	r3, {r2, r8}
 80047b8:	2320      	movs	r3, #32
 80047ba:	f383 8811 	msr	BASEPRI, r3
      osalSysLockFromISR();
      usb_lld_start_in(usbp, ep);
 80047be:	4630      	mov	r0, r6
 80047c0:	4639      	mov	r1, r7
 80047c2:	f7ff ff55 	bl	8004670 <usb_lld_start_in>
 80047c6:	f388 8811 	msr	BASEPRI, r8
 80047ca:	e7ba      	b.n	8004742 <otg_epin_handler.constprop.10+0x22>
 80047cc:	20001050 	.word	0x20001050
 80047d0:	200010b0 	.word	0x200010b0
	...

080047e0 <Vector14C>:
/**
 * @brief   OTG1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 80047e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @param[in] usbp      pointer to the @p USBDriver object
 *
 * @notapi
 */
static void usb_lld_serve_interrupt(USBDriver *usbp) {
  stm32_otg_t *otgp = usbp->otg;
 80047e4:	4e98      	ldr	r6, [pc, #608]	; (8004a48 <Vector14C+0x268>)
 80047e6:	6d37      	ldr	r7, [r6, #80]	; 0x50
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
 80047e8:	697b      	ldr	r3, [r7, #20]
  sts &= otgp->GINTMSK;
 80047ea:	69bd      	ldr	r5, [r7, #24]
 80047ec:	401d      	ands	r5, r3
  otgp->GINTSTS = sts;

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 80047ee:	f415 5980 	ands.w	r9, r5, #4096	; 0x1000
  stm32_otg_t *otgp = usbp->otg;
  uint32_t sts, src;

  sts  = otgp->GINTSTS;
  sts &= otgp->GINTMSK;
  otgp->GINTSTS = sts;
 80047f2:	617d      	str	r5, [r7, #20]

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {
 80047f4:	f040 80f3 	bne.w	80049de <Vector14C+0x1fe>
    /* Preventing execution of more handlers, the core has been reset.*/
    return;
  }

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	f2c0 80dc 	blt.w	80049b6 <Vector14C+0x1d6>

    _usb_wakeup(usbp);
  }

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {
 80047fe:	052b      	lsls	r3, r5, #20
 8004800:	f100 80d3 	bmi.w	80049aa <Vector14C+0x1ca>
    /* Default suspend action.*/
    _usb_suspend(usbp);
  }

  /* Enumeration done.*/
  if (sts & GINTSTS_ENUMDNE) {
 8004804:	04ac      	lsls	r4, r5, #18
 8004806:	d50c      	bpl.n	8004822 <Vector14C+0x42>
    /* Full or High speed timing selection.*/
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8004808:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800480c:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8004816:	bf0c      	ite	eq
 8004818:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
                      GUSBCFG_TRDT(TRDT_VALUE_HS);
    }
    else {
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 800481c:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8004820:	60fb      	str	r3, [r7, #12]
                      GUSBCFG_TRDT(TRDT_VALUE_FS);
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
 8004822:	0728      	lsls	r0, r5, #28
 8004824:	d429      	bmi.n	800487a <Vector14C+0x9a>
    _usb_isr_invoke_sof_cb(usbp);
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 8004826:	02ea      	lsls	r2, r5, #11
 8004828:	d42f      	bmi.n	800488a <Vector14C+0xaa>
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 800482a:	02aa      	lsls	r2, r5, #10
 800482c:	f100 8093 	bmi.w	8004956 <Vector14C+0x176>
    otg_isoc_out_failed_handler(usbp);
  }

  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
 8004830:	06eb      	lsls	r3, r5, #27
 8004832:	f100 8081 	bmi.w	8004938 <Vector14C+0x158>
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
 8004836:	036e      	lsls	r6, r5, #13
    osalThreadResumeI(&usbp->wait, MSG_OK);
    osalSysUnlockFromISR();
  }

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
 8004838:	f8d7 4818 	ldr.w	r4, [r7, #2072]	; 0x818
  if (sts & GINTSTS_IEPINT) {
 800483c:	d50b      	bpl.n	8004856 <Vector14C+0x76>
    if (src & (1 << 0))
 800483e:	07e0      	lsls	r0, r4, #31
 8004840:	f100 80f8 	bmi.w	8004a34 <Vector14C+0x254>
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
 8004844:	07a1      	lsls	r1, r4, #30
 8004846:	f100 80f1 	bmi.w	8004a2c <Vector14C+0x24c>
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
 800484a:	0762      	lsls	r2, r4, #29
 800484c:	f100 80ea 	bmi.w	8004a24 <Vector14C+0x244>
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
 8004850:	0723      	lsls	r3, r4, #28
 8004852:	f100 80d4 	bmi.w	80049fe <Vector14C+0x21e>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8004856:	032f      	lsls	r7, r5, #12
 8004858:	d50b      	bpl.n	8004872 <Vector14C+0x92>
    if (src & (1 << 16))
 800485a:	03e6      	lsls	r6, r4, #15
 800485c:	f100 80de 	bmi.w	8004a1c <Vector14C+0x23c>
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
 8004860:	03a5      	lsls	r5, r4, #14
 8004862:	f100 80d7 	bmi.w	8004a14 <Vector14C+0x234>
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
 8004866:	0360      	lsls	r0, r4, #13
 8004868:	f100 80d0 	bmi.w	8004a0c <Vector14C+0x22c>
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
 800486c:	0321      	lsls	r1, r4, #12
 800486e:	f100 80bf 	bmi.w	80049f0 <Vector14C+0x210>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 8004872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 8004876:	f7fd b893 	b.w	80019a0 <_port_irq_epilogue>
    }
  }

  /* SOF interrupt handling.*/
  if (sts & GINTSTS_SOF) {
    _usb_isr_invoke_sof_cb(usbp);
 800487a:	6873      	ldr	r3, [r6, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0d1      	beq.n	8004826 <Vector14C+0x46>
 8004882:	4871      	ldr	r0, [pc, #452]	; (8004a48 <Vector14C+0x268>)
 8004884:	4798      	blx	r3
  }

  /* Isochronous IN failed handling */
  if (sts & GINTSTS_IISOIXFR) {
 8004886:	02ea      	lsls	r2, r5, #11
 8004888:	d5cf      	bpl.n	800482a <Vector14C+0x4a>
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800488a:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 800488e:	2400      	movs	r4, #0
 8004890:	e008      	b.n	80048a4 <Vector14C+0xc4>

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8004892:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004894:	4a6c      	ldr	r2, [pc, #432]	; (8004a48 <Vector14C+0x268>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	3401      	adds	r4, #1
 800489a:	b2e4      	uxtb	r4, r4
 800489c:	429c      	cmp	r4, r3
 800489e:	46a1      	mov	r9, r4
 80048a0:	f200 80cc 	bhi.w	8004a3c <Vector14C+0x25c>
 80048a4:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80048a8:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80048ac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80048b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048b4:	d1ed      	bne.n	8004892 <Vector14C+0xb2>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 80048b6:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	dae9      	bge.n	8004892 <Vector14C+0xb2>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
      /* Endpoint enabled -> ISOC IN transfer failed */
      /* Disable endpoint */
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 80048be:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80048c2:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 80048c6:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 80048ca:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dbfb      	blt.n	80048ca <Vector14C+0xea>
}

static void otg_txfifo_flush(USBDriver *usbp, uint32_t fifo) {
  stm32_otg_t *otgp = usbp->otg;

  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80048d2:	ea4f 1989 	mov.w	r9, r9, lsl #6
 80048d6:	6d32      	ldr	r2, [r6, #80]	; 0x50
 80048d8:	f049 0320 	orr.w	r3, r9, #32
 80048dc:	6113      	str	r3, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80048de:	6913      	ldr	r3, [r2, #16]
 80048e0:	0699      	lsls	r1, r3, #26
 80048e2:	d4fc      	bmi.n	80048de <Vector14C+0xfe>
 * @xclass
 */
#if PORT_SUPPORTS_RT || defined(__DOXYGEN__)
static inline void osalSysPolledDelayX(rtcnt_t cycles) {

  chSysPolledDelayX(cycles);
 80048e4:	2012      	movs	r0, #18
 80048e6:	f7fc fb7b 	bl	8000fe0 <chSysPolledDelayX>

      /* Flush FIFO */
      otg_txfifo_flush(usbp, ep);

      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);
 80048ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048ee:	f04f 0901 	mov.w	r9, #1
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	8933      	ldrh	r3, [r6, #8]
 80048f6:	6892      	ldr	r2, [r2, #8]
 80048f8:	fa09 f904 	lsl.w	r9, r9, r4
 80048fc:	ea6f 0a09 	mvn.w	sl, r9
 8004900:	ea0a 0303 	and.w	r3, sl, r3
 8004904:	8133      	strh	r3, [r6, #8]
 8004906:	b112      	cbz	r2, 800490e <Vector14C+0x12e>
 8004908:	484f      	ldr	r0, [pc, #316]	; (8004a48 <Vector14C+0x268>)
 800490a:	4621      	mov	r1, r4
 800490c:	4790      	blx	r2
 800490e:	2320      	movs	r3, #32
 8004910:	f383 8811 	msr	BASEPRI, r3

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8004914:	f8d8 2834 	ldr.w	r2, [r8, #2100]	; 0x834
      usbp->txpending |= (1 << ep);
 8004918:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800491a:	484c      	ldr	r0, [pc, #304]	; (8004a4c <Vector14C+0x26c>)
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 800491c:	ea0a 0202 	and.w	r2, sl, r2
      usbp->txpending |= (1 << ep);
 8004920:	ea49 0303 	orr.w	r3, r9, r3
      /* Prepare data for next frame */
      _usb_isr_invoke_in_cb(usbp, ep);

      /* Pump out data for next frame */
      osalSysLockFromISR();
      otgp->DIEPEMPMSK &= ~(1 << ep);
 8004924:	f8c8 2834 	str.w	r2, [r8, #2100]	; 0x834
 8004928:	2100      	movs	r1, #0
      usbp->txpending |= (1 << ep);
 800492a:	65f3      	str	r3, [r6, #92]	; 0x5c
 800492c:	f7fc fdf0 	bl	8001510 <chThdResumeI>
 8004930:	2300      	movs	r3, #0
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	e7ac      	b.n	8004892 <Vector14C+0xb2>
 8004938:	2320      	movs	r3, #32
 800493a:	f383 8811 	msr	BASEPRI, r3
  /* RX FIFO not empty handling.*/
  if (sts & GINTSTS_RXFLVL) {
    /* The interrupt is masked while the thread has control or it would
       be triggered again.*/
    osalSysLockFromISR();
    otgp->GINTMSK &= ~GINTMSK_RXFLVLM;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	4842      	ldr	r0, [pc, #264]	; (8004a4c <Vector14C+0x26c>)
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	61bb      	str	r3, [r7, #24]
 8004948:	2100      	movs	r1, #0
 800494a:	f7fc fde1 	bl	8001510 <chThdResumeI>
 800494e:	2300      	movs	r3, #0
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	e76f      	b.n	8004836 <Vector14C+0x56>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8004956:	f8d6 8050 	ldr.w	r8, [r6, #80]	; 0x50
 *
 * @notapi
 */
static void otg_isoc_in_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 800495a:	2400      	movs	r4, #0
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800495c:	f04f 0901 	mov.w	r9, #1
 8004960:	e006      	b.n	8004970 <Vector14C+0x190>
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8004962:	6d73      	ldr	r3, [r6, #84]	; 0x54
 8004964:	3401      	adds	r4, #1
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	b2e4      	uxtb	r4, r4
 800496a:	429c      	cmp	r4, r3
 800496c:	f63f af60 	bhi.w	8004830 <Vector14C+0x50>
 8004970:	eb08 1244 	add.w	r2, r8, r4, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8004974:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8004978:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800497c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004980:	d1ef      	bne.n	8004962 <Vector14C+0x182>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8004982:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;

  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	daeb      	bge.n	8004962 <Vector14C+0x182>
      /* FIXME: Core stucks here */
      /*otgp->oe[ep].DOEPCTL |= (DOEPCTL_EPDIS | DOEPCTL_SNAK);
      while (otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA)
        ;*/
      /* Prepare transfer for next frame */
      _usb_isr_invoke_out_cb(usbp, ep);
 800498a:	eb06 0284 	add.w	r2, r6, r4, lsl #2
 800498e:	8973      	ldrh	r3, [r6, #10]
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	482d      	ldr	r0, [pc, #180]	; (8004a48 <Vector14C+0x268>)
 8004994:	68d2      	ldr	r2, [r2, #12]
 8004996:	fa09 f104 	lsl.w	r1, r9, r4
 800499a:	ea23 0301 	bic.w	r3, r3, r1
 800499e:	8173      	strh	r3, [r6, #10]
 80049a0:	4621      	mov	r1, r4
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d0dd      	beq.n	8004962 <Vector14C+0x182>
 80049a6:	4790      	blx	r2
 80049a8:	e7db      	b.n	8004962 <Vector14C+0x182>

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80049aa:	2300      	movs	r3, #0

    /* Default suspend action.*/
    _usb_suspend(usbp);
 80049ac:	4826      	ldr	r0, [pc, #152]	; (8004a48 <Vector14C+0x268>)

  /* Suspend handling.*/
  if (sts & GINTSTS_USBSUSP) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80049ae:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default suspend action.*/
    _usb_suspend(usbp);
 80049b0:	f7fd fee6 	bl	8002780 <_usb_suspend>
 80049b4:	e726      	b.n	8004804 <Vector14C+0x24>

  /* Wake-up handling.*/
  if (sts & GINTSTS_WKUPINT) {
    /* If clocks are gated off, turn them back on (may be the case if
       coming out of suspend mode).*/
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 80049b6:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 80049ba:	079a      	lsls	r2, r3, #30
 80049bc:	d005      	beq.n	80049ca <Vector14C+0x1ea>
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 80049be:	f8d7 3e00 	ldr.w	r3, [r7, #3584]	; 0xe00
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	f8c7 3e00 	str.w	r3, [r7, #3584]	; 0xe00
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 80049ca:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 80049ce:	481e      	ldr	r0, [pc, #120]	; (8004a48 <Vector14C+0x268>)
      /* Set to zero to un-gate the USB core clocks.*/
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
    }

    /* Clear the Remote Wake-up Signaling.*/
    otgp->DCTL |= DCTL_RWUSIG;
 80049d0:	f043 0301 	orr.w	r3, r3, #1
 80049d4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804

    _usb_wakeup(usbp);
 80049d8:	f7fd feda 	bl	8002790 <_usb_wakeup>
 80049dc:	e70f      	b.n	80047fe <Vector14C+0x1e>

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80049de:	2300      	movs	r3, #0

    /* Default reset action.*/
    _usb_reset(usbp);
 80049e0:	4630      	mov	r0, r6

  /* Reset interrupt handling.*/
  if (sts & GINTSTS_USBRST) {

    /* Resetting pending operations.*/
    usbp->txpending = 0;
 80049e2:	65f3      	str	r3, [r6, #92]	; 0x5c

    /* Default reset action.*/
    _usb_reset(usbp);
 80049e4:	f7fd feac 	bl	8002740 <_usb_reset>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 80049e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 80049ec:	f7fc bfd8 	b.w	80019a0 <_port_irq_epilogue>
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
    if (src & (1 << 19))
      otg_epout_handler(usbp, 3);
 80049f0:	2003      	movs	r0, #3
 80049f2:	f7ff fded 	bl	80045d0 <otg_epout_handler.constprop.9>
  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
}
 80049f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  OSAL_IRQ_PROLOGUE();

  usb_lld_serve_interrupt(&USBD1);

  OSAL_IRQ_EPILOGUE();
 80049fa:	f7fc bfd1 	b.w	80019a0 <_port_irq_epilogue>
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
    if (src & (1 << 3))
      otg_epin_handler(usbp, 3);
 80049fe:	2003      	movs	r0, #3
 8004a00:	f7ff fe8e 	bl	8004720 <otg_epin_handler.constprop.10>
      otg_epin_handler(usbp, 4);
    if (src & (1 << 5))
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
 8004a04:	032f      	lsls	r7, r5, #12
 8004a06:	f57f af34 	bpl.w	8004872 <Vector14C+0x92>
 8004a0a:	e726      	b.n	800485a <Vector14C+0x7a>
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
    if (src & (1 << 18))
      otg_epout_handler(usbp, 2);
 8004a0c:	2002      	movs	r0, #2
 8004a0e:	f7ff fddf 	bl	80045d0 <otg_epout_handler.constprop.9>
 8004a12:	e72b      	b.n	800486c <Vector14C+0x8c>
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
    if (src & (1 << 17))
      otg_epout_handler(usbp, 1);
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7ff fddb 	bl	80045d0 <otg_epout_handler.constprop.9>
 8004a1a:	e724      	b.n	8004866 <Vector14C+0x86>
      otg_epin_handler(usbp, 5);
#endif
  }
  if (sts & GINTSTS_OEPINT) {
    if (src & (1 << 16))
      otg_epout_handler(usbp, 0);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f7ff fdd7 	bl	80045d0 <otg_epout_handler.constprop.9>
 8004a22:	e71d      	b.n	8004860 <Vector14C+0x80>
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
    if (src & (1 << 2))
      otg_epin_handler(usbp, 2);
 8004a24:	2002      	movs	r0, #2
 8004a26:	f7ff fe7b 	bl	8004720 <otg_epin_handler.constprop.10>
 8004a2a:	e711      	b.n	8004850 <Vector14C+0x70>
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
    if (src & (1 << 1))
      otg_epin_handler(usbp, 1);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f7ff fe77 	bl	8004720 <otg_epin_handler.constprop.10>
 8004a32:	e70a      	b.n	800484a <Vector14C+0x6a>

  /* IN/OUT endpoints event handling.*/
  src = otgp->DAINT;
  if (sts & GINTSTS_IEPINT) {
    if (src & (1 << 0))
      otg_epin_handler(usbp, 0);
 8004a34:	2000      	movs	r0, #0
 8004a36:	f7ff fe73 	bl	8004720 <otg_epin_handler.constprop.10>
 8004a3a:	e703      	b.n	8004844 <Vector14C+0x64>
  if (sts & GINTSTS_IISOIXFR) {
    otg_isoc_in_failed_handler(usbp);
  }

  /* Isochronous OUT failed handling */
  if (sts & GINTSTS_IISOOXFR) {
 8004a3c:	02ab      	lsls	r3, r5, #10
 8004a3e:	f57f aef7 	bpl.w	8004830 <Vector14C+0x50>
 *
 * @notapi
 */
static void otg_isoc_out_failed_handler(USBDriver *usbp) {
  usbep_t ep;
  stm32_otg_t *otgp = usbp->otg;
 8004a42:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
 8004a46:	e788      	b.n	800495a <Vector14C+0x17a>
 8004a48:	20001050 	.word	0x20001050
 8004a4c:	200010b0 	.word	0x200010b0

08004a50 <usb_lld_stall_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_out(USBDriver *usbp, usbep_t ep) {
 8004a50:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a52:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8004a56:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004a5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a5e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004a62:	4770      	bx	lr
	...

08004a70 <usb_lld_stall_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {
 8004a70:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a72:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8004a76:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a7e:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004a82:	4770      	bx	lr
	...

08004a90 <usb_lld_clear_out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {
 8004a90:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004a92:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 8004a96:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8004a9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a9e:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
 8004aa2:	4770      	bx	lr
	...

08004ab0 <usb_lld_clear_in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {
 8004ab0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004ab2:	eb03 1141 	add.w	r1, r3, r1, lsl #5

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8004ab6:	f8d1 3900 	ldr.w	r3, [r1, #2304]	; 0x900
 8004aba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004abe:	f8c1 3900 	str.w	r3, [r1, #2304]	; 0x900
 8004ac2:	4770      	bx	lr
	...

08004ad0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004ad0:	f011 0f0c 	tst.w	r1, #12
 8004ad4:	d100      	bne.n	8004ad8 <spi_lld_serve_tx_interrupt+0x8>
 8004ad6:	4770      	bx	lr
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <spi_lld_serve_tx_interrupt+0x10>)
 8004ada:	f7fc ba49 	b.w	8000f70 <chSysHalt>
 8004ade:	bf00      	nop
 8004ae0:	08007940 	.word	0x08007940
	...

08004af0 <spi_lld_serve_rx_interrupt>:
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004af0:	f011 0f0c 	tst.w	r1, #12
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004af4:	b538      	push	{r3, r4, r5, lr}
 8004af6:	4604      	mov	r4, r0

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004af8:	d134      	bne.n	8004b64 <spi_lld_serve_rx_interrupt+0x74>
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004afa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004afc:	6802      	ldr	r2, [r0, #0]
 8004afe:	6813      	ldr	r3, [r2, #0]
 8004b00:	f023 031f 	bic.w	r3, r3, #31
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	6813      	ldr	r3, [r2, #0]
 8004b08:	07d9      	lsls	r1, r3, #31
 8004b0a:	d4fc      	bmi.n	8004b06 <spi_lld_serve_rx_interrupt+0x16>
 8004b0c:	7a05      	ldrb	r5, [r0, #8]
  dmaStreamDisable(spip->dmarx);
 8004b0e:	6a21      	ldr	r1, [r4, #32]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004b10:	6840      	ldr	r0, [r0, #4]
  dmaStreamDisable(spip->dmarx);
 8004b12:	680a      	ldr	r2, [r1, #0]
#else
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
 8004b14:	233d      	movs	r3, #61	; 0x3d
 8004b16:	40ab      	lsls	r3, r5
 8004b18:	6003      	str	r3, [r0, #0]
  dmaStreamDisable(spip->dmarx);
 8004b1a:	6813      	ldr	r3, [r2, #0]
 8004b1c:	f023 031f 	bic.w	r3, r3, #31
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	6813      	ldr	r3, [r2, #0]
 8004b24:	07db      	lsls	r3, r3, #31
 8004b26:	d4fc      	bmi.n	8004b22 <spi_lld_serve_rx_interrupt+0x32>

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004b28:	6863      	ldr	r3, [r4, #4]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004b2a:	7a08      	ldrb	r0, [r1, #8]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004b2c:	681a      	ldr	r2, [r3, #0]
  (void)flags;
#endif

  /* Stop everything.*/
  dmaStreamDisable(spip->dmatx);
  dmaStreamDisable(spip->dmarx);
 8004b2e:	6849      	ldr	r1, [r1, #4]
 8004b30:	233d      	movs	r3, #61	; 0x3d
 8004b32:	4083      	lsls	r3, r0
 8004b34:	600b      	str	r3, [r1, #0]

  /* Portable SPI ISR code defined in the high level driver, note, it is
     a macro.*/
  _spi_isr_code(spip);
 8004b36:	b192      	cbz	r2, 8004b5e <spi_lld_serve_rx_interrupt+0x6e>
 8004b38:	2304      	movs	r3, #4
 8004b3a:	7023      	strb	r3, [r4, #0]
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4790      	blx	r2
 8004b40:	7823      	ldrb	r3, [r4, #0]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00b      	beq.n	8004b5e <spi_lld_serve_rx_interrupt+0x6e>
 8004b46:	2320      	movs	r3, #32
 8004b48:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	f104 0008 	add.w	r0, r4, #8
 8004b52:	f7fc fcdd 	bl	8001510 <chThdResumeI>
 8004b56:	2300      	movs	r3, #0
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	bd38      	pop	{r3, r4, r5, pc}
 8004b5e:	2302      	movs	r3, #2
 8004b60:	7023      	strb	r3, [r4, #0]
 8004b62:	e7f0      	b.n	8004b46 <spi_lld_serve_rx_interrupt+0x56>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004b64:	4801      	ldr	r0, [pc, #4]	; (8004b6c <spi_lld_serve_rx_interrupt+0x7c>)
 8004b66:	f7fc fa03 	bl	8000f70 <chSysHalt>
 8004b6a:	e7c6      	b.n	8004afa <spi_lld_serve_rx_interrupt+0xa>
 8004b6c:	08007940 	.word	0x08007940

08004b70 <spi_lld_init>:
/**
 * @brief   Low level SPI driver initialization.
 *
 * @notapi
 */
void spi_lld_init(void) {
 8004b70:	b510      	push	{r4, lr}

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004b72:	4c0a      	ldr	r4, [pc, #40]	; (8004b9c <spi_lld_init+0x2c>)
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	; (8004ba0 <spi_lld_init+0x30>)
 8004b76:	f64f 72ff 	movw	r2, #65535	; 0xffff

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004b7a:	4620      	mov	r0, r4
 *
 * @notapi
 */
void spi_lld_init(void) {

  dummytx = 0xFFFF;
 8004b7c:	801a      	strh	r2, [r3, #0]

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
 8004b7e:	f7fd fcdf 	bl	8002540 <spiObjectInit>
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <spi_lld_init+0x34>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8004b84:	4808      	ldr	r0, [pc, #32]	; (8004ba8 <spi_lld_init+0x38>)
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004b86:	4909      	ldr	r1, [pc, #36]	; (8004bac <spi_lld_init+0x3c>)
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <spi_lld_init+0x40>)

  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8004b8a:	61e0      	str	r0, [r4, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004b8c:	f103 0024 	add.w	r0, r3, #36	; 0x24
  dummytx = 0xFFFF;

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8004b90:	6223      	str	r3, [r4, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8004b92:	6260      	str	r0, [r4, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8004b94:	62a1      	str	r1, [r4, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8004b96:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004b98:	bd10      	pop	{r4, pc}
 8004b9a:	bf00      	nop
 8004b9c:	200012ec 	.word	0x200012ec
 8004ba0:	200012e8 	.word	0x200012e8
 8004ba4:	080078e0 	.word	0x080078e0
 8004ba8:	40013000 	.word	0x40013000
 8004bac:	06010016 	.word	0x06010016
 8004bb0:	06010046 	.word	0x06010046
	...

08004bc0 <spi_lld_start>:
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004bc0:	7803      	ldrb	r3, [r0, #0]
 8004bc2:	2b01      	cmp	r3, #1
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @notapi
 */
void spi_lld_start(SPIDriver *spip) {
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4604      	mov	r4, r0

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8004bc8:	d01d      	beq.n	8004c06 <spi_lld_start+0x46>
 8004bca:	69c3      	ldr	r3, [r0, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004bcc:	6862      	ldr	r2, [r4, #4]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004bce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004bd0:	8952      	ldrh	r2, [r2, #10]
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004bd2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004bd4:	f420 40f0 	bic.w	r0, r0, #30720	; 0x7800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8004bd8:	f421 41f0 	bic.w	r1, r1, #30720	; 0x7800
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  if ((spip->config->cr1 & SPI_CR1_DFF) == 0) {
 8004bdc:	f412 6f00 	tst.w	r2, #2048	; 0x800
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004be0:	bf1c      	itt	ne
 8004be2:	f440 5020 	orrne.w	r0, r0, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8004be6:	f441 5120 	orrne.w	r1, r1, #10240	; 0x2800
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004bea:	62a0      	str	r0, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8004bec:	62e1      	str	r1, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004bee:	f442 7241 	orr.w	r2, r2, #772	; 0x304
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004bf2:	2000      	movs	r0, #0
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004bf4:	2107      	movs	r1, #7
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }
  /* SPI setup and enable.*/
  spip->spi->CR1  = 0;
 8004bf6:	6018      	str	r0, [r3, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR | SPI_CR1_SSM |
 8004bf8:	601a      	str	r2, [r3, #0]
                    SPI_CR1_SSI;
  spip->spi->CR2  = SPI_CR2_SSOE | SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8004bfa:	6059      	str	r1, [r3, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	bd10      	pop	{r4, pc}
void spi_lld_start(SPIDriver *spip) {

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <spi_lld_start+0x84>)
 8004c08:	4298      	cmp	r0, r3
 8004c0a:	d009      	beq.n	8004c20 <spi_lld_start+0x60>
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004c0c:	6a21      	ldr	r1, [r4, #32]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004c0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004c10:	69e3      	ldr	r3, [r4, #28]
 8004c12:	6808      	ldr	r0, [r1, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004c14:	6811      	ldr	r1, [r2, #0]
      rccEnableSPI6(FALSE);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8004c16:	f103 020c 	add.w	r2, r3, #12
 8004c1a:	6082      	str	r2, [r0, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8004c1c:	608a      	str	r2, [r1, #8]
 8004c1e:	e7d5      	b.n	8004bcc <spi_lld_start+0xc>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8004c20:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <spi_lld_start+0x88>)
 8004c22:	6a00      	ldr	r0, [r0, #32]
 8004c24:	210a      	movs	r1, #10
 8004c26:	4623      	mov	r3, r4
 8004c28:	f7fe fa4a 	bl	80030c0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      b = dmaStreamAllocate(spip->dmatx,
 8004c2c:	4a07      	ldr	r2, [pc, #28]	; (8004c4c <spi_lld_start+0x8c>)
 8004c2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c30:	4623      	mov	r3, r4
 8004c32:	210a      	movs	r1, #10
 8004c34:	f7fe fa44 	bl	80030c0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(FALSE);
 8004c38:	4a05      	ldr	r2, [pc, #20]	; (8004c50 <spi_lld_start+0x90>)
 8004c3a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c40:	6453      	str	r3, [r2, #68]	; 0x44
 8004c42:	e7e3      	b.n	8004c0c <spi_lld_start+0x4c>
 8004c44:	200012ec 	.word	0x200012ec
 8004c48:	08004af1 	.word	0x08004af1
 8004c4c:	08004ad1 	.word	0x08004ad1
 8004c50:	40023800 	.word	0x40023800
	...

08004c60 <spi_lld_select>:
 *
 * @notapi
 */
void spi_lld_select(SPIDriver *spip) {

  palClearPad(spip->config->ssport, spip->config->sspad);
 8004c60:	6843      	ldr	r3, [r0, #4]
 8004c62:	8919      	ldrh	r1, [r3, #8]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	2301      	movs	r3, #1
 8004c68:	408b      	lsls	r3, r1
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	8353      	strh	r3, [r2, #26]
 8004c6e:	4770      	bx	lr

08004c70 <spi_lld_unselect>:
 *
 * @notapi
 */
void spi_lld_unselect(SPIDriver *spip) {

  palSetPad(spip->config->ssport, spip->config->sspad);
 8004c70:	6843      	ldr	r3, [r0, #4]
 8004c72:	8919      	ldrh	r1, [r3, #8]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	2301      	movs	r3, #1
 8004c78:	408b      	lsls	r3, r1
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	8313      	strh	r3, [r2, #24]
 8004c7e:	4770      	bx	lr

08004c80 <spi_lld_exchange>:
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {
 8004c80:	b4f0      	push	{r4, r5, r6, r7}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c82:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c84:	6a47      	ldr	r7, [r0, #36]	; 0x24
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004c86:	6a86      	ldr	r6, [r0, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c88:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c8a:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c8c:	6838      	ldr	r0, [r7, #0]
 * @notapi
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004c8e:	60e3      	str	r3, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004c90:	f446 6680 	orr.w	r6, r6, #1024	; 0x400

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004c94:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 */
void spi_lld_exchange(SPIDriver *spip, size_t n,
                      const void *txbuf, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004c98:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode| STM32_DMA_CR_MINC);
 8004c9a:	6026      	str	r6, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004c9c:	60c2      	str	r2, [r0, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004c9e:	6041      	str	r1, [r0, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004ca0:	6005      	str	r5, [r0, #0]

  dmaStreamEnable(spip->dmarx);
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	6023      	str	r3, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004caa:	6803      	ldr	r3, [r0, #0]
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6003      	str	r3, [r0, #0]
}
 8004cb2:	bcf0      	pop	{r4, r5, r6, r7}
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
	...

08004cc0 <spi_lld_send>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {
 8004cc0:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004cc2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004cc4:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004cc6:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004cc8:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004cca:	681b      	ldr	r3, [r3, #0]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004ccc:	6a80      	ldr	r0, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8004cce:	4e09      	ldr	r6, [pc, #36]	; (8004cf4 <spi_lld_send+0x34>)
 8004cd0:	60e6      	str	r6, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004cd2:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004cd6:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8004cd8:	6020      	str	r0, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8004cda:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004cdc:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8004cde:	601d      	str	r5, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	601a      	str	r2, [r3, #0]
}
 8004cf0:	bc70      	pop	{r4, r5, r6}
 8004cf2:	4770      	bx	lr
 8004cf4:	2000131c 	.word	0x2000131c
	...

08004d00 <spi_lld_receive>:
 * @param[in] n         number of words to receive
 * @param[out] rxbuf    the pointer to the receive buffer
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {
 8004d00:	b470      	push	{r4, r5, r6}

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004d02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004d04:	6a04      	ldr	r4, [r0, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004d06:	6a85      	ldr	r5, [r0, #40]	; 0x28
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004d08:	6824      	ldr	r4, [r4, #0]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004d0a:	681b      	ldr	r3, [r3, #0]
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8004d0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004d0e:	4e09      	ldr	r6, [pc, #36]	; (8004d34 <spi_lld_receive+0x34>)
 *
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8004d10:	60e2      	str	r2, [r4, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004d12:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 * @notapi
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8004d16:	6061      	str	r1, [r4, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8004d18:	6025      	str	r5, [r4, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8004d1a:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8004d1c:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8004d1e:	6018      	str	r0, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8004d20:	6822      	ldr	r2, [r4, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	6022      	str	r2, [r4, #0]
  dmaStreamEnable(spip->dmatx);
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
}
 8004d30:	bc70      	pop	{r4, r5, r6}
 8004d32:	4770      	bx	lr
 8004d34:	200012e8 	.word	0x200012e8
	...

08004d40 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
 8004d40:	b510      	push	{r4, lr}
  PWMD4.tim = STM32_TIM4;
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
 8004d42:	4c04      	ldr	r4, [pc, #16]	; (8004d54 <pwm_lld_init+0x14>)
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fd f9a3 	bl	8002090 <pwmObjectInit>
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8004d4a:	2204      	movs	r2, #4
  PWMD5.tim = STM32_TIM5;
 8004d4c:	4b02      	ldr	r3, [pc, #8]	; (8004d58 <pwm_lld_init+0x18>)
#endif

#if STM32_PWM_USE_TIM5
  /* Driver initialization.*/
  pwmObjectInit(&PWMD5);
  PWMD5.channels = STM32_TIM5_CHANNELS;
 8004d4e:	7422      	strb	r2, [r4, #16]
  PWMD5.tim = STM32_TIM5;
 8004d50:	61a3      	str	r3, [r4, #24]
 8004d52:	bd10      	pop	{r4, pc}
 8004d54:	20001320 	.word	0x20001320
 8004d58:	40000c00 	.word	0x40000c00
 8004d5c:	00000000 	.word	0x00000000

08004d60 <pwm_lld_start>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004d62:	7803      	ldrb	r3, [r0, #0]
 8004d64:	2b01      	cmp	r3, #1
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_start(PWMDriver *pwmp) {
 8004d66:	4604      	mov	r4, r0
  uint32_t psc;
  uint32_t ccer;

  if (pwmp->state == PWM_STOP) {
 8004d68:	d04b      	beq.n	8004e02 <pwm_lld_start+0xa2>
                       STM32_TIM_CCMR3_OC6M(6) | STM32_TIM_CCMR3_OC6PE;
#endif
  }
  else {
    /* Driver re-configuration scenario, it must be stopped first.*/
    pwmp->tim->CR1    = 0;                  /* Timer disabled.              */
 8004d6a:	6983      	ldr	r3, [r0, #24]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
    pwmp->tim->CCR[0] = 0;                  /* Comparator 1 disabled.       */
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
    pwmp->tim->CCR[1] = 0;                  /* Comparator 2 disabled.       */
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
    pwmp->tim->CCR[2] = 0;                  /* Comparator 3 disabled.       */
 8004d74:	63da      	str	r2, [r3, #60]	; 0x3c
    pwmp->tim->CCR[3] = 0;                  /* Comparator 4 disabled.       */
 8004d76:	641a      	str	r2, [r3, #64]	; 0x40
    if (pwmp->channels > 4) {
      pwmp->tim->CCXR[0] = 0;               /* Comparator 5 disabled.       */
      pwmp->tim->CCXR[1] = 0;               /* Comparator 6 disabled.       */
    }
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
 8004d78:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004d7a:	6861      	ldr	r1, [r4, #4]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004d7c:	68a5      	ldr	r5, [r4, #8]
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d7e:	68ca      	ldr	r2, [r1, #12]
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004d80:	6960      	ldr	r0, [r4, #20]
 8004d82:	680f      	ldr	r7, [r1, #0]
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004d84:	6ace      	ldr	r6, [r1, #44]	; 0x2c
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004d86:	fbb0 f0f7 	udiv	r0, r0, r7
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d8a:	f002 020f 	and.w	r2, r2, #15
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
 8004d8e:	1e6c      	subs	r4, r5, #1
#endif
    pwmp->tim->CNT  = 0;                    /* Counter reset to zero.       */
  }

  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
 8004d90:	3801      	subs	r0, #1
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d92:	2a01      	cmp	r2, #1
  /* Timer configuration.*/
  psc = (pwmp->clock / pwmp->config->frequency) - 1;
  osalDbgAssert((psc <= 0xFFFF) &&
                ((psc + 1) * pwmp->config->frequency) == pwmp->clock,
                "invalid frequency");
  pwmp->tim->PSC  = psc;
 8004d94:	6298      	str	r0, [r3, #40]	; 0x28
  pwmp->tim->ARR  = pwmp->period - 1;
 8004d96:	62dc      	str	r4, [r3, #44]	; 0x2c
  pwmp->tim->CR2  = pwmp->config->cr2;
 8004d98:	605e      	str	r6, [r3, #4]

  /* Output enables and polarities setup.*/
  ccer = 0;
  switch (pwmp->config->channels[0].mode & PWM_OUTPUT_MASK) {
 8004d9a:	d003      	beq.n	8004da4 <pwm_lld_start+0x44>
  pwmp->tim->PSC  = psc;
  pwmp->tim->ARR  = pwmp->period - 1;
  pwmp->tim->CR2  = pwmp->config->cr2;

  /* Output enables and polarities setup.*/
  ccer = 0;
 8004d9c:	2a02      	cmp	r2, #2
 8004d9e:	bf0c      	ite	eq
 8004da0:	2203      	moveq	r2, #3
 8004da2:	2200      	movne	r2, #0
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC1E;
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
 8004da4:	6948      	ldr	r0, [r1, #20]
 8004da6:	f000 000f 	and.w	r0, r0, #15
 8004daa:	2801      	cmp	r0, #1
 8004dac:	d026      	beq.n	8004dfc <pwm_lld_start+0x9c>
 8004dae:	2802      	cmp	r0, #2
 8004db0:	d022      	beq.n	8004df8 <pwm_lld_start+0x98>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
 8004db2:	69c8      	ldr	r0, [r1, #28]
 8004db4:	f000 000f 	and.w	r0, r0, #15
 8004db8:	2801      	cmp	r0, #1
 8004dba:	d01a      	beq.n	8004df2 <pwm_lld_start+0x92>
 8004dbc:	2802      	cmp	r0, #2
 8004dbe:	d016      	beq.n	8004dee <pwm_lld_start+0x8e>
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
  default:
    ;
  }
  switch (pwmp->config->channels[3].mode & PWM_OUTPUT_MASK) {
 8004dc0:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8004dc2:	f000 000f 	and.w	r0, r0, #15
 8004dc6:	2801      	cmp	r0, #1
 8004dc8:	d003      	beq.n	8004dd2 <pwm_lld_start+0x72>
 8004dca:	2802      	cmp	r0, #2
 8004dcc:	d103      	bne.n	8004dd6 <pwm_lld_start+0x76>
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC4P;
 8004dce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC4E;
 8004dd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004dd6:	6b09      	ldr	r1, [r1, #48]	; 0x30
      ;
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
 8004dd8:	621a      	str	r2, [r3, #32]
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004dda:	2401      	movs	r4, #1
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004ddc:	f021 02ff 	bic.w	r2, r1, #255	; 0xff
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004de0:	2000      	movs	r0, #0
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004de2:	2185      	movs	r1, #133	; 0x85
    }
  }
#endif /* STM32_PWM_USE_ADVANCED*/

  pwmp->tim->CCER  = ccer;
  pwmp->tim->EGR   = STM32_TIM_EGR_UG;      /* Update event.                */
 8004de4:	615c      	str	r4, [r3, #20]
  pwmp->tim->SR    = 0;                     /* Clear pending IRQs.          */
 8004de6:	6118      	str	r0, [r3, #16]
  pwmp->tim->DIER  = pwmp->config->dier &   /* DMA-related DIER settings.   */
 8004de8:	60da      	str	r2, [r3, #12]
#else
  pwmp->tim->BDTR  = STM32_TIM_BDTR_MOE;
#endif
#endif
  /* Timer configured and started.*/
  pwmp->tim->CR1   = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS |
 8004dea:	6019      	str	r1, [r3, #0]
 8004dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
    ;
  }
  switch (pwmp->config->channels[2].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC3P;
 8004dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC3E;
 8004df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df6:	e7e3      	b.n	8004dc0 <pwm_lld_start+0x60>
  default:
    ;
  }
  switch (pwmp->config->channels[1].mode & PWM_OUTPUT_MASK) {
  case PWM_OUTPUT_ACTIVE_LOW:
    ccer |= STM32_TIM_CCER_CC2P;
 8004df8:	f042 0220 	orr.w	r2, r2, #32
  case PWM_OUTPUT_ACTIVE_HIGH:
    ccer |= STM32_TIM_CCER_CC2E;
 8004dfc:	f042 0210 	orr.w	r2, r2, #16
 8004e00:	e7d7      	b.n	8004db2 <pwm_lld_start+0x52>
#endif
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <pwm_lld_start+0xd8>)
 8004e04:	4298      	cmp	r0, r3
 8004e06:	d005      	beq.n	8004e14 <pwm_lld_start+0xb4>
    }
#endif

    /* All channels configured in PWM1 mode with preload enabled and will
       stay that way until the driver is stopped.*/
    pwmp->tim->CCMR1 = STM32_TIM_CCMR1_OC1M(6) | STM32_TIM_CCMR1_OC1PE |
 8004e08:	69a3      	ldr	r3, [r4, #24]
 8004e0a:	f646 0268 	movw	r2, #26728	; 0x6868
 8004e0e:	619a      	str	r2, [r3, #24]
                       STM32_TIM_CCMR1_OC2M(6) | STM32_TIM_CCMR1_OC2PE;
    pwmp->tim->CCMR2 = STM32_TIM_CCMR2_OC3M(6) | STM32_TIM_CCMR2_OC3PE |
 8004e10:	61da      	str	r2, [r3, #28]
 8004e12:	e7b2      	b.n	8004d7a <pwm_lld_start+0x1a>
    }
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
 8004e14:	4b09      	ldr	r3, [pc, #36]	; (8004e3c <pwm_lld_start+0xdc>)
 8004e16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40
      rccResetTIM5();
 8004e1e:	6a1a      	ldr	r2, [r3, #32]
 8004e20:	2100      	movs	r1, #0
 8004e22:	f042 0208 	orr.w	r2, r2, #8
 8004e26:	621a      	str	r2, [r3, #32]
#if !defined(STM32_TIM5_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 8004e28:	2032      	movs	r0, #50	; 0x32
#endif

#if STM32_PWM_USE_TIM5
    if (&PWMD5 == pwmp) {
      rccEnableTIM5(FALSE);
      rccResetTIM5();
 8004e2a:	6219      	str	r1, [r3, #32]
#if !defined(STM32_TIM5_SUPPRESS_ISR)
      nvicEnableVector(STM32_TIM5_NUMBER, STM32_PWM_TIM5_IRQ_PRIORITY);
 8004e2c:	2107      	movs	r1, #7
 8004e2e:	f7fd fed7 	bl	8002be0 <nvicEnableVector>
#endif
#if defined(STM32_TIM5CLK)
      pwmp->clock = STM32_TIM5CLK;
#else
      pwmp->clock = STM32_TIMCLK1;
 8004e32:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <pwm_lld_start+0xe0>)
 8004e34:	6163      	str	r3, [r4, #20]
 8004e36:	e7e7      	b.n	8004e08 <pwm_lld_start+0xa8>
 8004e38:	20001320 	.word	0x20001320
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	0501bd00 	.word	0x0501bd00
	...

08004e50 <pwm_lld_enable_channel>:
                            pwmchannel_t channel,
                            pwmcnt_t width) {

  /* Changing channel duty cycle on the fly.*/
#if STM32_TIM_MAX_CHANNELS <= 4
  pwmp->tim->CCR[channel] = width;
 8004e50:	6983      	ldr	r3, [r0, #24]
 8004e52:	310c      	adds	r1, #12
 8004e54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004e58:	605a      	str	r2, [r3, #4]
 8004e5a:	4770      	bx	lr
 8004e5c:	0000      	movs	r0, r0
	...

08004e60 <pwm_lld_serve_interrupt>:
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004e60:	6983      	ldr	r3, [r0, #24]
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8004e62:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr;

  sr  = pwmp->tim->SR;
 8004e64:	691a      	ldr	r2, [r3, #16]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
 8004e66:	68dc      	ldr	r4, [r3, #12]
 8004e68:	4014      	ands	r4, r2
 8004e6a:	b2e2      	uxtb	r2, r4
  pwmp->tim->SR = ~sr;
 8004e6c:	43d2      	mvns	r2, r2
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004e6e:	07a6      	lsls	r6, r4, #30
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
 8004e70:	4605      	mov	r5, r0
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
 8004e72:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004e74:	d503      	bpl.n	8004e7e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
 8004e76:	6843      	ldr	r3, [r0, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
 8004e7a:	b103      	cbz	r3, 8004e7e <pwm_lld_serve_interrupt+0x1e>
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
 8004e7c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004e7e:	0760      	lsls	r0, r4, #29
 8004e80:	d504      	bpl.n	8004e8c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
 8004e82:	686b      	ldr	r3, [r5, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  pwmp->tim->SR = ~sr;
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
 8004e86:	b10b      	cbz	r3, 8004e8c <pwm_lld_serve_interrupt+0x2c>
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
 8004e88:	4628      	mov	r0, r5
 8004e8a:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004e8c:	0721      	lsls	r1, r4, #28
 8004e8e:	d504      	bpl.n	8004e9a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
 8004e90:	686b      	ldr	r3, [r5, #4]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
      (pwmp->config->channels[0].callback != NULL))
    pwmp->config->channels[0].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
 8004e94:	b10b      	cbz	r3, 8004e9a <pwm_lld_serve_interrupt+0x3a>
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
 8004e96:	4628      	mov	r0, r5
 8004e98:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004e9a:	06e2      	lsls	r2, r4, #27
 8004e9c:	d504      	bpl.n	8004ea8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
 8004e9e:	686b      	ldr	r3, [r5, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      (pwmp->config->channels[1].callback != NULL))
    pwmp->config->channels[1].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
      (pwmp->config->channels[2].callback != NULL))
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
 8004ea2:	b10b      	cbz	r3, 8004ea8 <pwm_lld_serve_interrupt+0x48>
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
 8004ea8:	07e3      	lsls	r3, r4, #31
 8004eaa:	d506      	bpl.n	8004eba <pwm_lld_serve_interrupt+0x5a>
 8004eac:	686b      	ldr	r3, [r5, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	b11b      	cbz	r3, 8004eba <pwm_lld_serve_interrupt+0x5a>
    pwmp->config->callback(pwmp);
 8004eb2:	4628      	mov	r0, r5
}
 8004eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pwmp->config->channels[2].callback(pwmp);
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
      (pwmp->config->channels[3].callback != NULL))
    pwmp->config->channels[3].callback(pwmp);
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
    pwmp->config->callback(pwmp);
 8004eb8:	4718      	bx	r3
 8004eba:	bd70      	pop	{r4, r5, r6, pc}
 8004ebc:	0000      	movs	r0, r0
	...

08004ec0 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
 8004ec0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);
 8004ec2:	4803      	ldr	r0, [pc, #12]	; (8004ed0 <Vector108+0x10>)
 8004ec4:	f7ff ffcc 	bl	8004e60 <pwm_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
}
 8004ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  pwm_lld_serve_interrupt(&PWMD5);

  OSAL_IRQ_EPILOGUE();
 8004ecc:	f7fc bd68 	b.w	80019a0 <_port_irq_epilogue>
 8004ed0:	20001320 	.word	0x20001320
	...

08004ee0 <__early_init>:
 * @details This initialization must be performed just after stack setup
 *          and before any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
 8004ee0:	f7fd bede 	b.w	8002ca0 <stm32_clock_init>
	...

08004ef0 <boardInit>:

/**
 * @brief   Board-specific initialization code.
 * @todo    Add your board-specific code, if any.
 */
void boardInit(void) {
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
	...

08004f00 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8004f00:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004f02:	f100 070b 	add.w	r7, r0, #11
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf08      	it	eq
 8004f0a:	460b      	moveq	r3, r1
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8004f0c:	463d      	mov	r5, r7
  do {
    i = (int)(l % radix);
 8004f0e:	fbb1 f6f2 	udiv	r6, r1, r2
 8004f12:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8004f16:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 8004f1a:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 8004f1c:	bfc8      	it	gt
 8004f1e:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8004f22:	b2e4      	uxtb	r4, r4
 8004f24:	f805 4d01 	strb.w	r4, [r5, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8004f28:	fbb3 f3f2 	udiv	r3, r3, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8004f2c:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ed      	bne.n	8004f0e <long_to_string_with_divisor+0xe>

  i = (int)(p + MAX_FILLER - q);
 8004f32:	1b7b      	subs	r3, r7, r5
 8004f34:	4403      	add	r3, r0
 8004f36:	e001      	b.n	8004f3c <long_to_string_with_divisor+0x3c>
 8004f38:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  do
    *p++ = *q++;
 8004f3c:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8004f40:	4298      	cmp	r0, r3
 8004f42:	d1f9      	bne.n	8004f38 <long_to_string_with_divisor+0x38>

  return p;
}
 8004f44:	bcf0      	pop	{r4, r5, r6, r7}
 8004f46:	4770      	bx	lr
	...

08004f50 <chvprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	ed2d 8b02 	vpush	{d8}
 8004f58:	b08d      	sub	sp, #52	; 0x34
 8004f5a:	4617      	mov	r7, r2
 8004f5c:	f10d 0319 	add.w	r3, sp, #25
 8004f60:	aa06      	add	r2, sp, #24
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	9301      	str	r3, [sp, #4]
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004f66:	2300      	movs	r3, #0
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
 8004f68:	4606      	mov	r6, r0
 8004f6a:	460d      	mov	r5, r1
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4682      	mov	sl, r0
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f70:	7829      	ldrb	r1, [r5, #0]
 8004f72:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8004f74:	b171      	cbz	r1, 8004f94 <chvprintf+0x44>
      return n;
    if (c != '%') {
 8004f76:	2925      	cmp	r1, #37	; 0x25
 8004f78:	d012      	beq.n	8004fa0 <chvprintf+0x50>
      streamPut(chp, (uint8_t)c);
      n++;
 8004f7a:	9c00      	ldr	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004f7c:	f8da 2000 	ldr.w	r2, [sl]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f80:	461d      	mov	r5, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004f82:	6892      	ldr	r2, [r2, #8]
 8004f84:	4650      	mov	r0, sl
      n++;
 8004f86:	3401      	adds	r4, #1
 8004f88:	9400      	str	r4, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8004f8a:	4790      	blx	r2
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8004f8c:	7829      	ldrb	r1, [r5, #0]
 8004f8e:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8004f90:	2900      	cmp	r1, #0
 8004f92:	d1f0      	bne.n	8004f76 <chvprintf+0x26>
      streamPut(chp, (uint8_t)filler);
      n++;
      width--;
    }
  }
}
 8004f94:	9800      	ldr	r0, [sp, #0]
 8004f96:	b00d      	add	sp, #52	; 0x34
 8004f98:	ecbd 8b02 	vpop	{d8}
 8004f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8004fa0:	786a      	ldrb	r2, [r5, #1]
 8004fa2:	2a2d      	cmp	r2, #45	; 0x2d
 8004fa4:	bf03      	ittte	eq
 8004fa6:	78aa      	ldrbeq	r2, [r5, #2]
      fmt++;
 8004fa8:	1cab      	addeq	r3, r5, #2
      left_align = TRUE;
 8004faa:	2601      	moveq	r6, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8004fac:	2600      	movne	r6, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8004fae:	2a30      	cmp	r2, #48	; 0x30
 8004fb0:	bf03      	ittte	eq
 8004fb2:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8004fb4:	3301      	addeq	r3, #1
      filler = '0';
 8004fb6:	f04f 0930 	moveq.w	r9, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8004fba:	f04f 0920 	movne.w	r9, #32
 8004fbe:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8004fc0:	f04f 0800 	mov.w	r8, #0
 8004fc4:	e005      	b.n	8004fd2 <chvprintf+0x82>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8004fc6:	783b      	ldrb	r3, [r7, #0]
 8004fc8:	3704      	adds	r7, #4
 8004fca:	782a      	ldrb	r2, [r5, #0]
      else
        break;
      width = width * 10 + c;
 8004fcc:	eb03 0840 	add.w	r8, r3, r0, lsl #1
 8004fd0:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004fd2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8004fda:	460d      	mov	r5, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8004fdc:	eb08 0088 	add.w	r0, r8, r8, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8004fe0:	d9f3      	bls.n	8004fca <chvprintf+0x7a>
        c -= '0';
      else if (c == '*')
 8004fe2:	2a2a      	cmp	r2, #42	; 0x2a
 8004fe4:	d0ef      	beq.n	8004fc6 <chvprintf+0x76>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8004fe6:	2a2e      	cmp	r2, #46	; 0x2e
 8004fe8:	f04f 0b00 	mov.w	fp, #0
 8004fec:	d043      	beq.n	8005076 <chvprintf+0x126>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8004fee:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8004ff2:	2b4c      	cmp	r3, #76	; 0x4c
 8004ff4:	d04e      	beq.n	8005094 <chvprintf+0x144>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8004ff6:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8004ffa:	2934      	cmp	r1, #52	; 0x34
 8004ffc:	f200 816a 	bhi.w	80052d4 <chvprintf+0x384>
 8005000:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005004:	0168014f 	.word	0x0168014f
 8005008:	01680168 	.word	0x01680168
 800500c:	014f0168 	.word	0x014f0168
 8005010:	01680168 	.word	0x01680168
 8005014:	01680168 	.word	0x01680168
 8005018:	01220168 	.word	0x01220168
 800501c:	01680168 	.word	0x01680168
 8005020:	01680168 	.word	0x01680168
 8005024:	01570168 	.word	0x01570168
 8005028:	01680168 	.word	0x01680168
 800502c:	01680165 	.word	0x01680165
 8005030:	01680168 	.word	0x01680168
 8005034:	01680168 	.word	0x01680168
 8005038:	01680168 	.word	0x01680168
 800503c:	01680168 	.word	0x01680168
 8005040:	01590168 	.word	0x01590168
 8005044:	0168014f 	.word	0x0168014f
 8005048:	016800d4 	.word	0x016800d4
 800504c:	014f0168 	.word	0x014f0168
 8005050:	01680168 	.word	0x01680168
 8005054:	01680168 	.word	0x01680168
 8005058:	01220168 	.word	0x01220168
 800505c:	01680168 	.word	0x01680168
 8005060:	00890168 	.word	0x00890168
 8005064:	01570168 	.word	0x01570168
 8005068:	01680168 	.word	0x01680168
 800506c:	0165      	.short	0x0165
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 800506e:	783b      	ldrb	r3, [r7, #0]
 8005070:	3704      	adds	r7, #4
        else
          break;
        precision *= 10;
        precision += c;
 8005072:	eb03 0b41 	add.w	fp, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8005076:	f815 2b01 	ldrb.w	r2, [r5], #1
        if (c >= '0' && c <= '9')
 800507a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8005082:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8005086:	d9f4      	bls.n	8005072 <chvprintf+0x122>
          c -= '0';
        else if (c == '*')
 8005088:	2a2a      	cmp	r2, #42	; 0x2a
 800508a:	d0f0      	beq.n	800506e <chvprintf+0x11e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 800508c:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8005090:	2b4c      	cmp	r3, #76	; 0x4c
 8005092:	d1b0      	bne.n	8004ff6 <chvprintf+0xa6>
      is_long = TRUE;
      if (*fmt)
 8005094:	782b      	ldrb	r3, [r5, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 811c 	beq.w	80052d4 <chvprintf+0x384>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 800509c:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 80050a0:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80050a2:	2a34      	cmp	r2, #52	; 0x34
 80050a4:	f200 8115 	bhi.w	80052d2 <chvprintf+0x382>
 80050a8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80050ac:	011300fb 	.word	0x011300fb
 80050b0:	01130113 	.word	0x01130113
 80050b4:	00fb0113 	.word	0x00fb0113
 80050b8:	01130113 	.word	0x01130113
 80050bc:	01130113 	.word	0x01130113
 80050c0:	00ce0113 	.word	0x00ce0113
 80050c4:	01130113 	.word	0x01130113
 80050c8:	01130113 	.word	0x01130113
 80050cc:	01030113 	.word	0x01030113
 80050d0:	01130113 	.word	0x01130113
 80050d4:	01130111 	.word	0x01130111
 80050d8:	01130113 	.word	0x01130113
 80050dc:	01130113 	.word	0x01130113
 80050e0:	01130113 	.word	0x01130113
 80050e4:	01130113 	.word	0x01130113
 80050e8:	01050113 	.word	0x01050113
 80050ec:	011300fb 	.word	0x011300fb
 80050f0:	01130080 	.word	0x01130080
 80050f4:	00fb0113 	.word	0x00fb0113
 80050f8:	01130113 	.word	0x01130113
 80050fc:	01130113 	.word	0x01130113
 8005100:	00ce0113 	.word	0x00ce0113
 8005104:	01130113 	.word	0x01130113
 8005108:	00350113 	.word	0x00350113
 800510c:	01030113 	.word	0x01030113
 8005110:	01130113 	.word	0x01130113
 8005114:	0111      	.short	0x0111
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8005116:	683c      	ldr	r4, [r7, #0]
        s = "(null)";
 8005118:	4b8c      	ldr	r3, [pc, #560]	; (800534c <chvprintf+0x3fc>)
 800511a:	2c00      	cmp	r4, #0
 800511c:	bf08      	it	eq
 800511e:	461c      	moveq	r4, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8005120:	3704      	adds	r7, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005122:	7823      	ldrb	r3, [r4, #0]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8005124:	f1bb 0f00 	cmp.w	fp, #0
 8005128:	f000 80f1 	beq.w	800530e <chvprintf+0x3be>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80f3 	beq.w	8005318 <chvprintf+0x3c8>
 8005132:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005136:	4620      	mov	r0, r4
 8005138:	e002      	b.n	8005140 <chvprintf+0x1f0>
 800513a:	f1bb 0b01 	subs.w	fp, fp, #1
 800513e:	d403      	bmi.n	8005148 <chvprintf+0x1f8>
 8005140:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f8      	bne.n	800513a <chvprintf+0x1ea>
 8005148:	1b00      	subs	r0, r0, r4
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 800514a:	ebc0 0808 	rsb	r8, r0, r8
 800514e:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8005152:	f04f 0920 	mov.w	r9, #32
 8005156:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800515a:	2e00      	cmp	r6, #0
 800515c:	f000 8087 	beq.w	800526e <chvprintf+0x31e>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005160:	f1bb 0f00 	cmp.w	fp, #0
 8005164:	db11      	blt.n	800518a <chvprintf+0x23a>
 8005166:	465e      	mov	r6, fp
      streamPut(chp, (uint8_t)*s++);
 8005168:	f8da 3000 	ldr.w	r3, [sl]
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	689b      	ldr	r3, [r3, #8]
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005172:	3e01      	subs	r6, #1
      streamPut(chp, (uint8_t)*s++);
 8005174:	4650      	mov	r0, sl
 8005176:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005178:	1c73      	adds	r3, r6, #1
 800517a:	d1f5      	bne.n	8005168 <chvprintf+0x218>
 800517c:	9b00      	ldr	r3, [sp, #0]
 800517e:	3301      	adds	r3, #1
 8005180:	f1bb 0f00 	cmp.w	fp, #0
 8005184:	bfa8      	it	ge
 8005186:	445b      	addge	r3, fp
 8005188:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 800518a:	f1b8 0f00 	cmp.w	r8, #0
 800518e:	f43f aeef 	beq.w	8004f70 <chvprintf+0x20>
 8005192:	4644      	mov	r4, r8
      streamPut(chp, (uint8_t)filler);
 8005194:	f8da 3000 	ldr.w	r3, [sl]
 8005198:	4650      	mov	r0, sl
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4649      	mov	r1, r9
 800519e:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 80051a0:	3c01      	subs	r4, #1
 80051a2:	d1f7      	bne.n	8005194 <chvprintf+0x244>
 80051a4:	9b00      	ldr	r3, [sp, #0]
 80051a6:	4443      	add	r3, r8
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	e6e1      	b.n	8004f70 <chvprintf+0x20>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80051ac:	3707      	adds	r7, #7
 80051ae:	f027 0707 	bic.w	r7, r7, #7
 80051b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051b6:	f7fb fd43 	bl	8000c40 <__aeabi_d2f>
 80051ba:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 80051be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80051c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 80051c6:	f107 0708 	add.w	r7, r7, #8
      if (f < 0) {
 80051ca:	f100 80b4 	bmi.w	8005336 <chvprintf+0x3e6>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80051ce:	a806      	add	r0, sp, #24
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 80051d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 80051d4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80051d8:	f1bb 0f08 	cmp.w	fp, #8
 80051dc:	bf28      	it	cs
 80051de:	f04f 0b08 	movcs.w	fp, #8
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 80051e2:	4c5b      	ldr	r4, [pc, #364]	; (8005350 <chvprintf+0x400>)

  l = (long)num;
 80051e4:	edcd 7a02 	vstr	s15, [sp, #8]
  p = long_to_string_with_divisor(p, l, 10, 0);
 80051e8:	ee17 1a90 	vmov	r1, s15
 80051ec:	220a      	movs	r2, #10
 80051ee:	2300      	movs	r3, #0
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 80051f0:	f854 402b 	ldr.w	r4, [r4, fp, lsl #2]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
 80051f4:	f7ff fe84 	bl	8004f00 <long_to_string_with_divisor>
  *p++ = '.';
 80051f8:	4683      	mov	fp, r0
 80051fa:	232e      	movs	r3, #46	; 0x2e
 80051fc:	f80b 3b01 	strb.w	r3, [fp], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8005200:	ee18 0a10 	vmov	r0, s16
 8005204:	f7fb f9e0 	bl	80005c8 <__aeabi_f2d>
 8005208:	e9cd 0104 	strd	r0, r1, [sp, #16]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 800520c:	9802      	ldr	r0, [sp, #8]
 800520e:	f7fb f9c9 	bl	80005a4 <__aeabi_i2d>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800521a:	f7fb f875 	bl	8000308 <__aeabi_dsub>
 800521e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005222:	4620      	mov	r0, r4
 8005224:	f7fb f9ae 	bl	8000584 <__aeabi_ui2d>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005230:	f7fb fa1e 	bl	8000670 <__aeabi_dmul>
 8005234:	f7fb fcbc 	bl	8000bb0 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8005238:	4b46      	ldr	r3, [pc, #280]	; (8005354 <chvprintf+0x404>)
 800523a:	fba3 2304 	umull	r2, r3, r3, r4
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 800523e:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8005240:	08db      	lsrs	r3, r3, #3
 8005242:	4658      	mov	r0, fp
 8005244:	220a      	movs	r2, #10
 8005246:	e004      	b.n	8005252 <chvprintf+0x302>
 8005248:	2208      	movs	r2, #8
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800524a:	6839      	ldr	r1, [r7, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 800524c:	a806      	add	r0, sp, #24
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 800524e:	3704      	adds	r7, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005250:	2300      	movs	r3, #0
 8005252:	f7ff fe55 	bl	8004f00 <long_to_string_with_divisor>
 8005256:	ab06      	add	r3, sp, #24
 8005258:	1ac0      	subs	r0, r0, r3
 800525a:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 800525e:	461c      	mov	r4, r3
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8005260:	ebc0 0808 	rsb	r8, r0, r8
 8005264:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
      width = 0;
    if (left_align == FALSE)
 8005268:	2e00      	cmp	r6, #0
 800526a:	f47f af79 	bne.w	8005160 <chvprintf+0x210>
      width = -width;
 800526e:	f1c8 0600 	rsb	r6, r8, #0
    if (width < 0) {
 8005272:	2e00      	cmp	r6, #0
 8005274:	d036      	beq.n	80052e4 <chvprintf+0x394>
      if (*s == '-' && filler == '0') {
 8005276:	7821      	ldrb	r1, [r4, #0]
 8005278:	292d      	cmp	r1, #45	; 0x2d
 800527a:	d039      	beq.n	80052f0 <chvprintf+0x3a0>
        streamPut(chp, (uint8_t)*s++);
        n++;
 800527c:	46b0      	mov	r8, r6
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 800527e:	f8da 3000 	ldr.w	r3, [sl]
 8005282:	4650      	mov	r0, sl
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	4649      	mov	r1, r9
 8005288:	4798      	blx	r3
        n++;
      } while (++width != 0);
 800528a:	f118 0801 	adds.w	r8, r8, #1
 800528e:	d1f6      	bne.n	800527e <chvprintf+0x32e>
 8005290:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 8005292:	f1bb 0f00 	cmp.w	fp, #0
 8005296:	eba3 0306 	sub.w	r3, r3, r6
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	f6bf af63 	bge.w	8005166 <chvprintf+0x216>
 80052a0:	e666      	b.n	8004f70 <chvprintf+0x20>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80052a2:	6839      	ldr	r1, [r7, #0]
      if (l < 0) {
 80052a4:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 80052a6:	f107 0704 	add.w	r7, r7, #4
      if (l < 0) {
 80052aa:	db3d      	blt.n	8005328 <chvprintf+0x3d8>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 80052ac:	a806      	add	r0, sp, #24
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 80052ae:	220a      	movs	r2, #10
 80052b0:	e7ce      	b.n	8005250 <chvprintf+0x300>
      c = 16;
      goto unsigned_common;
    case 'U':
    case 'u':
      c = 10;
      goto unsigned_common;
 80052b2:	220a      	movs	r2, #10
 80052b4:	e7c9      	b.n	800524a <chvprintf+0x2fa>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	f88d 3018 	strb.w	r3, [sp, #24]
 80052bc:	9b01      	ldr	r3, [sp, #4]
 80052be:	3704      	adds	r7, #4
 80052c0:	4618      	mov	r0, r3
 80052c2:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 80052c6:	f04f 0920 	mov.w	r9, #32
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80052ca:	ac06      	add	r4, sp, #24
    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
 80052cc:	e7c8      	b.n	8005260 <chvprintf+0x310>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 80052ce:	2210      	movs	r2, #16
 80052d0:	e7bb      	b.n	800524a <chvprintf+0x2fa>
 80052d2:	461a      	mov	r2, r3
 80052d4:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 80052d6:	f88d 2018 	strb.w	r2, [sp, #24]
 80052da:	4618      	mov	r0, r3
 80052dc:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 80052e0:	ac06      	add	r4, sp, #24
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
      break;
 80052e2:	e7bd      	b.n	8005260 <chvprintf+0x310>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 80052e4:	f1bb 0f00 	cmp.w	fp, #0
 80052e8:	46b0      	mov	r8, r6
 80052ea:	f6bf af3c 	bge.w	8005166 <chvprintf+0x216>
 80052ee:	e63f      	b.n	8004f70 <chvprintf+0x20>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 80052f0:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80052f4:	d1c2      	bne.n	800527c <chvprintf+0x32c>
        streamPut(chp, (uint8_t)*s++);
 80052f6:	f8da 3000 	ldr.w	r3, [sl]
 80052fa:	4650      	mov	r0, sl
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4798      	blx	r3
        n++;
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8005304:	3401      	adds	r4, #1
        n++;
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800530c:	e7b6      	b.n	800527c <chvprintf+0x32c>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 800530e:	f647 7bfe 	movw	fp, #32766	; 0x7ffe
 8005312:	2b00      	cmp	r3, #0
 8005314:	f47f af0f 	bne.w	8005136 <chvprintf+0x1e6>
 8005318:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800531c:	b99e      	cbnz	r6, 8005346 <chvprintf+0x3f6>
 800531e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8005322:	f04f 0920 	mov.w	r9, #32
 8005326:	e7a2      	b.n	800526e <chvprintf+0x31e>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8005328:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800532a:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800532c:	f88d 3018 	strb.w	r3, [sp, #24]
 8005330:	f10d 0019 	add.w	r0, sp, #25
 8005334:	e7bb      	b.n	80052ae <chvprintf+0x35e>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8005336:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 8005338:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 800533c:	f88d 3018 	strb.w	r3, [sp, #24]
 8005340:	f10d 0019 	add.w	r0, sp, #25
 8005344:	e744      	b.n	80051d0 <chvprintf+0x280>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005346:	f04f 0920 	mov.w	r9, #32
 800534a:	e71e      	b.n	800518a <chvprintf+0x23a>
 800534c:	08007a80 	.word	0x08007a80
 8005350:	08007a90 	.word	0x08007a90
 8005354:	cccccccd 	.word	0xcccccccd
	...

08005360 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8005360:	b40e      	push	{r1, r2, r3}
 8005362:	b500      	push	{lr}
 8005364:	b082      	sub	sp, #8
 8005366:	aa03      	add	r2, sp, #12
 8005368:	f852 1b04 	ldr.w	r1, [r2], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800536c:	9201      	str	r2, [sp, #4]
  formatted_bytes = chvprintf(chp, fmt, ap);
 800536e:	f7ff fdef 	bl	8004f50 <chvprintf>
  va_end(ap);

  return formatted_bytes;
}
 8005372:	b002      	add	sp, #8
 8005374:	f85d eb04 	ldr.w	lr, [sp], #4
 8005378:	b003      	add	sp, #12
 800537a:	4770      	bx	lr
 800537c:	0000      	movs	r0, r0
	...

08005380 <main>:
#include "chprintf.h"
#include <stdio.h>
#include <string.h>
#include "math.h"

int main(void) {
 8005380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005384:	b087      	sub	sp, #28
	halInit();
 8005386:	f7fc fb3b 	bl	8001a00 <halInit>
	chSysInit();
 800538a:	f7fb fd99 	bl	8000ec0 <chSysInit>

	chThdSleepMilliseconds(1000);
 800538e:	f242 7010 	movw	r0, #10000	; 0x2710
 8005392:	f7fc f865 	bl	8001460 <chThdSleep>

	comm_usb_serial_init();
 8005396:	f000 f8fb 	bl	8005590 <comm_usb_serial_init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800539a:	2001      	movs	r0, #1
 800539c:	4601      	mov	r1, r0
 800539e:	f001 fa0f 	bl	80067c0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80053a2:	2002      	movs	r0, #2
 80053a4:	2101      	movs	r1, #1
 80053a6:	f001 fa0b 	bl	80067c0 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80053aa:	2004      	movs	r0, #4
 80053ac:	2101      	movs	r1, #1
 80053ae:	f001 fa07 	bl	80067c0 <RCC_AHB1PeriphClockCmd>
	palSetPadMode(GPIOC, 2, PAL_MODE_INPUT |
 80053b2:	4843      	ldr	r0, [pc, #268]	; (80054c0 <main+0x140>)
 80053b4:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80054d8 <main+0x158>
 80053b8:	2104      	movs	r1, #4
 80053ba:	2218      	movs	r2, #24
 80053bc:	f7fe faf0 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_STM32_OSPEED_HIGHEST);
	palSetPadMode(GPIOB, 9, PAL_MODE_INPUT |
 80053c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053c4:	2218      	movs	r2, #24
 80053c6:	483f      	ldr	r0, [pc, #252]	; (80054c4 <main+0x144>)
 80053c8:	f7fe faea 	bl	80039a0 <_pal_lld_setgroupmode>
 80053cc:	46e8      	mov	r8, sp
			PAL_STM32_OSPEED_HIGHEST);
	ws2812b_init();
 80053ce:	f000 f927 	bl	8005620 <ws2812b_init>
	uint32_t r = 0;
	uint32_t g = 85;
	uint32_t b = 170;
	bno055_init();
 80053d2:	f000 fb6d 	bl	8005ab0 <bno055_init>
	esc_init();
 80053d6:	f001 f8d3 	bl	8006580 <esc_init>
	initNRF24L01();
 80053da:	f000 fd99 	bl	8005f10 <initNRF24L01>
 80053de:	e057      	b.n	8005490 <main+0x110>
			uint8_t test[20] = "Hello world";
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
		}
		//uint8_t serialInBuf[32];
        //chnWriteTimeout(&nrf24l01.channels[0], serialInBuf, 32, MS2ST(1000));
        vector3 vector = bno055_get_vector(VECTOR_EULER);
 80053e0:	201a      	movs	r0, #26
 80053e2:	f000 fa85 	bl	80058f0 <bno055_get_vector>
 80053e6:	ec57 6b11 	vmov	r6, r7, d1
 80053ea:	ed8d 2b04 	vstr	d2, [sp, #16]
 80053ee:	ed8d 1b02 	vstr	d1, [sp, #8]
 80053f2:	ec55 4b10 	vmov	r4, r5, d0
 80053f6:	ed8d 0b00 	vstr	d0, [sp]
        uint8_t stat = bno055_get_status();
 80053fa:	f000 fa49 	bl	8005890 <bno055_get_status>
        uint8_t err = bno055_get_error();
 80053fe:	f000 fa4f 	bl	80058a0 <bno055_get_error>
        esc_set_all(1.0);
 8005402:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 80054b8 <main+0x138>
 8005406:	f001 f8b3 	bl	8006570 <esc_set_all>
        controller_update();
 800540a:	f001 f8e9 	bl	80065e0 <controller_update>
		ws2812b_set_led_color(0, (uint32_t)(128 + 3 * vector.y));
 800540e:	4630      	mov	r0, r6
 8005410:	4639      	mov	r1, r7
 8005412:	2200      	movs	r2, #0
 8005414:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <main+0x148>)
 8005416:	f7fb f92b 	bl	8000670 <__aeabi_dmul>
 800541a:	2200      	movs	r2, #0
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <main+0x14c>)
 800541e:	4606      	mov	r6, r0
 8005420:	460f      	mov	r7, r1
 8005422:	f7fa ff73 	bl	800030c <__adddf3>
 8005426:	f7fb fbeb 	bl	8000c00 <__aeabi_d2uiz>
 800542a:	4601      	mov	r1, r0
 800542c:	2000      	movs	r0, #0
 800542e:	f000 f9df 	bl	80057f0 <ws2812b_set_led_color>
		ws2812b_set_led_color(1, (uint32_t)(128 - 3 * vector.x));
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	2200      	movs	r2, #0
 8005438:	4b23      	ldr	r3, [pc, #140]	; (80054c8 <main+0x148>)
 800543a:	f7fb f919 	bl	8000670 <__aeabi_dmul>
 800543e:	4604      	mov	r4, r0
 8005440:	460d      	mov	r5, r1
 8005442:	4622      	mov	r2, r4
 8005444:	462b      	mov	r3, r5
 8005446:	2000      	movs	r0, #0
 8005448:	4920      	ldr	r1, [pc, #128]	; (80054cc <main+0x14c>)
 800544a:	f7fa ff5d 	bl	8000308 <__aeabi_dsub>
 800544e:	f7fb fbd7 	bl	8000c00 <__aeabi_d2uiz>
 8005452:	4601      	mov	r1, r0
 8005454:	2001      	movs	r0, #1
 8005456:	f000 f9cb 	bl	80057f0 <ws2812b_set_led_color>
		ws2812b_set_led_color(2, (uint32_t)(128 - 3 * vector.y));
 800545a:	4632      	mov	r2, r6
 800545c:	463b      	mov	r3, r7
 800545e:	2000      	movs	r0, #0
 8005460:	491a      	ldr	r1, [pc, #104]	; (80054cc <main+0x14c>)
 8005462:	f7fa ff51 	bl	8000308 <__aeabi_dsub>
 8005466:	f7fb fbcb 	bl	8000c00 <__aeabi_d2uiz>
 800546a:	4601      	mov	r1, r0
 800546c:	2002      	movs	r0, #2
 800546e:	f000 f9bf 	bl	80057f0 <ws2812b_set_led_color>
		ws2812b_set_led_color(3, (uint32_t)(128 + 3 * vector.x));
 8005472:	2200      	movs	r2, #0
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <main+0x14c>)
 8005476:	4620      	mov	r0, r4
 8005478:	4629      	mov	r1, r5
 800547a:	f7fa ff47 	bl	800030c <__adddf3>
 800547e:	f7fb fbbf 	bl	8000c00 <__aeabi_d2uiz>
 8005482:	4601      	mov	r1, r0
 8005484:	2003      	movs	r0, #3
 8005486:	f000 f9b3 	bl	80057f0 <ws2812b_set_led_color>
		chThdSleepMilliseconds(10);
 800548a:	2064      	movs	r0, #100	; 0x64
 800548c:	f7fb ffe8 	bl	8001460 <chThdSleep>
	bno055_init();
	esc_init();
	initNRF24L01();
	for(;;)
	{
		if (comm_usb_serial_is_active())
 8005490:	f000 f8b6 	bl	8005600 <comm_usb_serial_is_active>
 8005494:	2800      	cmp	r0, #0
 8005496:	d0a3      	beq.n	80053e0 <main+0x60>
		{
			uint8_t test[20] = "Hello world";
 8005498:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800549c:	2300      	movs	r3, #0
 800549e:	e888 0007 	stmia.w	r8, {r0, r1, r2}
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 80054a2:	490b      	ldr	r1, [pc, #44]	; (80054d0 <main+0x150>)
 80054a4:	480b      	ldr	r0, [pc, #44]	; (80054d4 <main+0x154>)
	initNRF24L01();
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 80054a6:	9303      	str	r3, [sp, #12]
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 80054a8:	4642      	mov	r2, r8
	initNRF24L01();
	for(;;)
	{
		if (comm_usb_serial_is_active())
		{
			uint8_t test[20] = "Hello world";
 80054aa:	9304      	str	r3, [sp, #16]
			chprintf((BaseSequentialStream *)&SDU1, "%s\n", test);
 80054ac:	f7ff ff58 	bl	8005360 <chprintf>
 80054b0:	e796      	b.n	80053e0 <main+0x60>
 80054b2:	bf00      	nop
 80054b4:	f3af 8000 	nop.w
 80054b8:	00000000 	.word	0x00000000
 80054bc:	3ff00000 	.word	0x3ff00000
 80054c0:	40020800 	.word	0x40020800
 80054c4:	40020400 	.word	0x40020400
 80054c8:	40080000 	.word	0x40080000
 80054cc:	40600000 	.word	0x40600000
 80054d0:	08007ac0 	.word	0x08007ac0
 80054d4:	2000134c 	.word	0x2000134c
 80054d8:	08007750 	.word	0x08007750
 80054dc:	00000000 	.word	0x00000000

080054e0 <get_descriptor>:
		uint8_t dindex,
		uint16_t lang) {

	(void)usbp;
	(void)lang;
	switch (dtype) {
 80054e0:	2902      	cmp	r1, #2
 80054e2:	d006      	beq.n	80054f2 <get_descriptor+0x12>
 80054e4:	2903      	cmp	r1, #3
 80054e6:	d006      	beq.n	80054f6 <get_descriptor+0x16>
 80054e8:	2901      	cmp	r1, #1
		return &vcom_configuration_descriptor;
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
			return &vcom_strings[dindex];
	}
	return NULL;
 80054ea:	4806      	ldr	r0, [pc, #24]	; (8005504 <get_descriptor+0x24>)
 80054ec:	bf18      	it	ne
 80054ee:	2000      	movne	r0, #0
 80054f0:	4770      	bx	lr
	(void)lang;
	switch (dtype) {
	case USB_DESCRIPTOR_DEVICE:
		return &vcom_device_descriptor;
	case USB_DESCRIPTOR_CONFIGURATION:
		return &vcom_configuration_descriptor;
 80054f2:	4805      	ldr	r0, [pc, #20]	; (8005508 <get_descriptor+0x28>)
 80054f4:	4770      	bx	lr
	case USB_DESCRIPTOR_STRING:
		if (dindex < 4)
 80054f6:	2a03      	cmp	r2, #3
			return &vcom_strings[dindex];
 80054f8:	bf9a      	itte	ls
 80054fa:	4b04      	ldrls	r3, [pc, #16]	; (800550c <get_descriptor+0x2c>)
 80054fc:	eb03 00c2 	addls.w	r0, r3, r2, lsl #3
	}
	return NULL;
 8005500:	2000      	movhi	r0, #0
}
 8005502:	4770      	bx	lr
 8005504:	08007c80 	.word	0x08007c80
 8005508:	08007b00 	.word	0x08007b00
 800550c:	08007c50 	.word	0x08007c50

08005510 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8005510:	b508      	push	{r3, lr}
 8005512:	2320      	movs	r3, #32
 8005514:	f383 8811 	msr	BASEPRI, r3

  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <sof_handler+0x18>)
 800551a:	f7fc ff61 	bl	80023e0 <sduSOFHookI>
 800551e:	2300      	movs	r3, #0
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	bd08      	pop	{r3, pc}
 8005526:	bf00      	nop
 8005528:	2000134c 	.word	0x2000134c
 800552c:	00000000 	.word	0x00000000

08005530 <usb_event>:
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8005530:	2902      	cmp	r1, #2
};

/*
 * Handles the USB driver global events.
 */
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8005532:	b538      	push	{r3, r4, r5, lr}
 8005534:	460c      	mov	r4, r1
 	extern SerialUSBDriver SDU1;

	switch (event) {
 8005536:	d00c      	beq.n	8005552 <usb_event+0x22>
 8005538:	2903      	cmp	r1, #3
 800553a:	d109      	bne.n	8005550 <usb_event+0x20>
 800553c:	2320      	movs	r3, #32
 800553e:	f383 8811 	msr	BASEPRI, r3
		return;
	case USB_EVENT_SUSPEND:
	    chSysLockFromISR();

	    /* Disconnection event on suspend.*/
	    sduDisconnectI(&SDU1);
 8005542:	480e      	ldr	r0, [pc, #56]	; (800557c <usb_event+0x4c>)
 8005544:	f7fc fefc 	bl	8002340 <sduDisconnectI>
 8005548:	2300      	movs	r3, #0
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	bd38      	pop	{r3, r4, r5, pc}
 8005550:	bd38      	pop	{r3, r4, r5, pc}
 8005552:	4605      	mov	r5, r0
 8005554:	2320      	movs	r3, #32
 8005556:	f383 8811 	msr	BASEPRI, r3
		chSysLockFromISR();

		/* Enables the endpoints specified into the configuration.
       Note, this callback is invoked from an ISR so I-Class functions
       must be used.*/
		usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800555a:	2101      	movs	r1, #1
 800555c:	4a08      	ldr	r2, [pc, #32]	; (8005580 <usb_event+0x50>)
 800555e:	f7fd f89f 	bl	80026a0 <usbInitEndpointI>
		usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8005562:	4628      	mov	r0, r5
 8005564:	4621      	mov	r1, r4
 8005566:	4a07      	ldr	r2, [pc, #28]	; (8005584 <usb_event+0x54>)
 8005568:	f7fd f89a 	bl	80026a0 <usbInitEndpointI>

		/* Resetting the state of the CDC subsystem.*/
		sduConfigureHookI(&SDU1);
 800556c:	4803      	ldr	r0, [pc, #12]	; (800557c <usb_event+0x4c>)
 800556e:	f7fc fef7 	bl	8002360 <sduConfigureHookI>
 8005572:	2300      	movs	r3, #0
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	bd38      	pop	{r3, r4, r5, pc}
 800557a:	bf00      	nop
 800557c:	2000134c 	.word	0x2000134c
 8005580:	08007ad0 	.word	0x08007ad0
 8005584:	08007b10 	.word	0x08007b10
	...

08005590 <comm_usb_serial_init>:
		USBD1_DATA_REQUEST_EP,
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
 8005590:	b570      	push	{r4, r5, r6, lr}
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 8005592:	4e15      	ldr	r6, [pc, #84]	; (80055e8 <comm_usb_serial_init+0x58>)
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
	sduObjectInit(&SDU1);
 8005594:	4d15      	ldr	r5, [pc, #84]	; (80055ec <comm_usb_serial_init+0x5c>)
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 8005596:	4c16      	ldr	r4, [pc, #88]	; (80055f0 <comm_usb_serial_init+0x60>)
		USBD1_DATA_AVAILABLE_EP,
		USBD1_INTERRUPT_REQUEST_EP
};

void comm_usb_serial_init(void) {
	palSetPadMode(GPIOA, 11, PAL_MODE_ALTERNATE(10));
 8005598:	4630      	mov	r0, r6
 800559a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800559e:	f240 5202 	movw	r2, #1282	; 0x502
 80055a2:	f7fe f9fd 	bl	80039a0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOA, 12, PAL_MODE_ALTERNATE(10));
 80055a6:	f240 5202 	movw	r2, #1282	; 0x502
 80055aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7fe f9f6 	bl	80039a0 <_pal_lld_setgroupmode>
	sduObjectInit(&SDU1);
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7fc fe73 	bl	80022a0 <sduObjectInit>
	sduStart(&SDU1, &serusbcfg);
 80055ba:	490e      	ldr	r1, [pc, #56]	; (80055f4 <comm_usb_serial_init+0x64>)
 80055bc:	4628      	mov	r0, r5
 80055be:	f7fc fe9f 	bl	8002300 <sduStart>
	/*
	 * Activates the USB driver and then the USB bus pull-up on D+.
	 * Note, a delay is inserted in order to not have to disconnect the cable
	 * after a reset.
	 */
	usbDisconnectBus(serusbcfg.usbp);
 80055c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80055c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055c6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80055ca:	6393      	str	r3, [r2, #56]	; 0x38
	chThdSleepMilliseconds(1500);
 80055cc:	f643 2098 	movw	r0, #15000	; 0x3a98
 80055d0:	f7fb ff46 	bl	8001460 <chThdSleep>
	usbStart(serusbcfg.usbp, &usbcfg);
 80055d4:	4620      	mov	r0, r4
 80055d6:	4908      	ldr	r1, [pc, #32]	; (80055f8 <comm_usb_serial_init+0x68>)
 80055d8:	f7fd f84a 	bl	8002670 <usbStart>
	usbConnectBus(serusbcfg.usbp);
 80055dc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80055de:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80055e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055e4:	6393      	str	r3, [r2, #56]	; 0x38
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	40020000 	.word	0x40020000
 80055ec:	2000134c 	.word	0x2000134c
 80055f0:	20001050 	.word	0x20001050
 80055f4:	08007c70 	.word	0x08007c70
 80055f8:	08007b40 	.word	0x08007b40
 80055fc:	00000000 	.word	0x00000000

08005600 <comm_usb_serial_is_active>:
}

int comm_usb_serial_is_active(void) {
	return SDU1.config->usbp->state == USB_ACTIVE;
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <comm_usb_serial_is_active+0x18>)
 8005602:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	7818      	ldrb	r0, [r3, #0]
 800560a:	f1a0 0004 	sub.w	r0, r0, #4
 800560e:	fab0 f080 	clz	r0, r0
 8005612:	0940      	lsrs	r0, r0, #5
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	2000134c 	.word	0x2000134c
 800561c:	00000000 	.word	0x00000000

08005620 <ws2812b_init>:
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	ed2d 8b02 	vpush	{d8}

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 8005628:	4b64      	ldr	r3, [pc, #400]	; (80057bc <ws2812b_init+0x19c>)
 800562a:	4e65      	ldr	r6, [pc, #404]	; (80057c0 <ws2812b_init+0x1a0>)
 800562c:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80057e0 <ws2812b_init+0x1c0>
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
 800563c:	469e      	mov	lr, r3
static uint8_t gamma_table[256];

// Private function prototypes
static uint32_t rgb_to_local(uint32_t color);

void ws2812b_init(void) {
 800563e:	b099      	sub	sp, #100	; 0x64

	// Default LED values
	int i, bit;

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
 8005640:	4615      	mov	r5, r2
 8005642:	4611      	mov	r1, r2
 8005644:	4637      	mov	r7, r6
 8005646:	4633      	mov	r3, r6

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 8005648:	2421      	movs	r4, #33	; 0x21
	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 800564a:	2042      	movs	r0, #66	; 0x42
		}
	}
}

static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
 800564c:	f3c1 4207 	ubfx	r2, r1, #16, #8
	uint32_t g = (color >> 8) & 0xFF;
 8005650:	f3c1 2807 	ubfx	r8, r1, #8, #8
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005654:	f81c 2002 	ldrb.w	r2, [ip, r2]
	g = gamma_table[g];
 8005658:	f81c 8008 	ldrb.w	r8, [ip, r8]
}

static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;
 800565c:	b2c9      	uxtb	r1, r1

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];

	return (g << 16) | (r << 8) | b;
 800565e:	0212      	lsls	r2, r2, #8
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];
 8005660:	f81c 1001 	ldrb.w	r1, [ip, r1]

	return (g << 16) | (r << 8) | b;
 8005664:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8005668:	430a      	orrs	r2, r1
 800566a:	f103 0130 	add.w	r1, r3, #48	; 0x30

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
			if(tmp_color & (1 << 23)) {
 800566e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
				bitbuffer[bit + i * 24] = WS2812B_ONE;
 8005672:	bf14      	ite	ne
 8005674:	8018      	strhne	r0, [r3, #0]
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
 8005676:	801c      	strheq	r4, [r3, #0]
 8005678:	3302      	adds	r3, #2
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 800567a:	428b      	cmp	r3, r1
			if(tmp_color & (1 << 23)) {
				bitbuffer[bit + i * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + i * 24] = WS2812B_ZERO;
			}
			tmp_color <<= 1;
 800567c:	ea4f 0242 	mov.w	r2, r2, lsl #1
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		uint32_t tmp_color = rgb_to_local(RGBdata[i]);

		for (bit = 0;bit < 24;bit++) {
 8005680:	d1f5      	bne.n	800566e <ws2812b_init+0x4e>
 8005682:	3518      	adds	r5, #24

	for (i = 0; i < LED_BUFFER_LEN; i++) {
		RGBdata[i] = 0;
	}

	for (i = 0; i < LED_BUFFER_LEN; i++) {
 8005684:	2d78      	cmp	r5, #120	; 0x78
 8005686:	d002      	beq.n	800568e <ws2812b_init+0x6e>
 8005688:	f85e 1f04 	ldr.w	r1, [lr, #4]!
 800568c:	e7de      	b.n	800564c <ws2812b_init+0x2c>
 800568e:	4b4d      	ldr	r3, [pc, #308]	; (80057c4 <ws2812b_init+0x1a4>)
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
 8005690:	2100      	movs	r1, #0
 8005692:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8005696:	f823 1f02 	strh.w	r1, [r3, #2]!
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 800569a:	4293      	cmp	r3, r2
 800569c:	d1fb      	bne.n	8005696 <ws2812b_init+0x76>
 800569e:	4d4a      	ldr	r5, [pc, #296]	; (80057c8 <ws2812b_init+0x1a8>)
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 80056a0:	ed9f 8a4a 	vldr	s16, [pc, #296]	; 80057cc <ws2812b_init+0x1ac>
		}
	}

	// Fill the rest of the buffer with zeros to give the LEDs a chance to update
	// after sending all bits
	for (i = 0; i < BITBUFFER_PAD; i++) {
 80056a4:	2400      	movs	r4, #0
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 80056a6:	ee07 4a90 	vmov	s15, r4
 80056aa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80056ae:	eddf 0a48 	vldr	s1, [pc, #288]	; 80057d0 <ws2812b_init+0x1b0>
 80056b2:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80056b6:	f001 f9a3 	bl	8006a00 <powf>
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
 80056ba:	3401      	adds	r4, #1
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 80056bc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80056c0:	f001 f96e 	bl	80069a0 <roundf>
 80056c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
 80056c8:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
 80056cc:	ee17 3a90 	vmov	r3, s15
 80056d0:	f805 3f01 	strb.w	r3, [r5, #1]!
	for (i = 0; i < BITBUFFER_PAD; i++) {
		bitbuffer[BITBUFFER_LEN - BITBUFFER_PAD - 1 + i] = 0;
	}

	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
 80056d4:	d1e7      	bne.n	80056a6 <ws2812b_init+0x86>
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
	}

	palSetPadMode(GPIOB, 8,
 80056d6:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80056da:	4621      	mov	r1, r4
 80056dc:	483d      	ldr	r0, [pc, #244]	; (80057d4 <ws2812b_init+0x1b4>)

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 80056de:	f8df a104 	ldr.w	sl, [pc, #260]	; 80057e4 <ws2812b_init+0x1c4>
	// Generate gamma correction table
	for (int i = 0; i < 256; i++) {
		gamma_table[i] = (int)roundf(powf((float)i / 255.0, 1.0 / 0.45) * 255.0);
	}

	palSetPadMode(GPIOB, 8,
 80056e2:	f7fe f95d 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM4) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
 80056e6:	2101      	movs	r1, #1
 80056e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80056ec:	f001 f868 	bl	80067c0 <RCC_AHB1PeriphClockCmd>

	DMA_DeInit(DMA1_Stream7);
 80056f0:	4839      	ldr	r0, [pc, #228]	; (80057d8 <ws2812b_init+0x1b8>)
 80056f2:	f000 ff85 	bl	8006600 <DMA_DeInit>

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80056f6:	2500      	movs	r5, #0
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80056f8:	f44f 6c80 	mov.w	ip, #1024	; 0x400
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80056fc:	f44f 5e00 	mov.w	lr, #8192	; 0x2000
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8005700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8005704:	2303      	movs	r3, #3

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
 8005706:	960b      	str	r6, [sp, #44]	; 0x2c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 8005708:	a909      	add	r1, sp, #36	; 0x24
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 800570a:	f44f 6600 	mov.w	r6, #2048	; 0x800
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 800570e:	4832      	ldr	r0, [pc, #200]	; (80057d8 <ws2812b_init+0x1b8>)
	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8005710:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 8005714:	f04f 6b80 	mov.w	fp, #67108864	; 0x4000000
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005718:	f04f 0940 	mov.w	r9, #64	; 0x40
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 800571c:	f04f 08aa 	mov.w	r8, #170	; 0xaa
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 8005720:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8005724:	9213      	str	r2, [sp, #76]	; 0x4c
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8005726:	9315      	str	r3, [sp, #84]	; 0x54
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 8005728:	9412      	str	r4, [sp, #72]	; 0x48

	// DMA clock enable
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream7);
	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&TIM4->CCR3;
 800572a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28

	DMA_InitStructure.DMA_Channel = DMA_Channel_2;
 800572e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8005732:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
 8005736:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800573a:	950e      	str	r5, [sp, #56]	; 0x38
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800573c:	9514      	str	r5, [sp, #80]	; 0x50
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800573e:	9516      	str	r5, [sp, #88]	; 0x58
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8005740:	9517      	str	r5, [sp, #92]	; 0x5c
	DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)bitbuffer;
	DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
	DMA_InitStructure.DMA_BufferSize = BITBUFFER_LEN;
	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 8005742:	9610      	str	r6, [sp, #64]	; 0x40
	DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
	DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
	DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
	DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;

	DMA_Init(DMA1_Stream7, &DMA_InitStructure);
 8005744:	f000 fff4 	bl	8006730 <DMA_Init>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8005748:	2004      	movs	r0, #4
 800574a:	2101      	movs	r1, #1
 800574c:	f001 f848 	bl	80067e0 <RCC_APB1PeriphClockCmd>

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8005750:	2368      	movs	r3, #104	; 0x68
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8005752:	a901      	add	r1, sp, #4
 8005754:	4821      	ldr	r0, [pc, #132]	; (80057dc <ws2812b_init+0x1bc>)
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
 8005756:	9302      	str	r3, [sp, #8]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005758:	2401      	movs	r4, #1
	DMA_Init(DMA1_Stream7, &DMA_InitStructure);

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);

	// Time Base configuration
	TIM_TimeBaseStructure.TIM_Prescaler = 0;
 800575a:	f8ad 5004 	strh.w	r5, [sp, #4]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800575e:	f8ad 5006 	strh.w	r5, [sp, #6]
	TIM_TimeBaseStructure.TIM_Period = TIM_PERIOD;
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8005762:	f8ad 500c 	strh.w	r5, [sp, #12]
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
 8005766:	f88d 500e 	strb.w	r5, [sp, #14]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800576a:	f001 f849 	bl	8006800 <TIM_TimeBaseInit>

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800576e:	2360      	movs	r3, #96	; 0x60
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 8005770:	883a      	ldrh	r2, [r7, #0]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005772:	481a      	ldr	r0, [pc, #104]	; (80057dc <ws2812b_init+0x1bc>)
	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8005774:	f8ad 3010 	strh.w	r3, [sp, #16]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005778:	a904      	add	r1, sp, #16
	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
 800577a:	9206      	str	r2, [sp, #24]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 800577c:	f8ad 501c 	strh.w	r5, [sp, #28]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);

	// Channel 3 Configuration in PWM mode
	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8005780:	f8ad 4012 	strh.w	r4, [sp, #18]
	TIM_OCInitStructure.TIM_Pulse = bitbuffer[0];
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8005784:	f001 f89c 	bl	80068c0 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8005788:	4814      	ldr	r0, [pc, #80]	; (80057dc <ws2812b_init+0x1bc>)
 800578a:	2108      	movs	r1, #8
 800578c:	f001 f8e0 	bl	8006950 <TIM_OC3PreloadConfig>

	// TIM4 counter enable
	TIM_Cmd(TIM4, ENABLE);
 8005790:	4621      	mov	r1, r4
 8005792:	4812      	ldr	r0, [pc, #72]	; (80057dc <ws2812b_init+0x1bc>)
 8005794:	f001 f884 	bl	80068a0 <TIM_Cmd>

	DMA_Cmd(DMA1_Stream7, ENABLE);
 8005798:	4621      	mov	r1, r4
 800579a:	480f      	ldr	r0, [pc, #60]	; (80057d8 <ws2812b_init+0x1b8>)
 800579c:	f001 f800 	bl	80067a0 <DMA_Cmd>

	// TIM4 Update DMA Request enable
	TIM_DMACmd(TIM4, TIM_DMA_CC3, ENABLE);
 80057a0:	4631      	mov	r1, r6
 80057a2:	4622      	mov	r2, r4
 80057a4:	480d      	ldr	r0, [pc, #52]	; (80057dc <ws2812b_init+0x1bc>)
 80057a6:	f001 f8eb 	bl	8006980 <TIM_DMACmd>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
 80057aa:	4621      	mov	r1, r4
 80057ac:	480b      	ldr	r0, [pc, #44]	; (80057dc <ws2812b_init+0x1bc>)
 80057ae:	f001 f8d7 	bl	8006960 <TIM_CtrlPWMOutputs>
}
 80057b2:	b019      	add	sp, #100	; 0x64
 80057b4:	ecbd 8b02 	vpop	{d8}
 80057b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057bc:	200017f4 	.word	0x200017f4
 80057c0:	20001808 	.word	0x20001808
 80057c4:	200018f4 	.word	0x200018f4
 80057c8:	2000195b 	.word	0x2000195b
 80057cc:	437f0000 	.word	0x437f0000
 80057d0:	400e38e4 	.word	0x400e38e4
 80057d4:	40020400 	.word	0x40020400
 80057d8:	400260b8 	.word	0x400260b8
 80057dc:	40000800 	.word	0x40000800
 80057e0:	2000195c 	.word	0x2000195c
 80057e4:	4000083c 	.word	0x4000083c
	...

080057f0 <ws2812b_set_led_color>:

void ws2812b_set_led_color(int led, uint32_t color) {
	if (led < WS2812B_LED_NUM) {
 80057f0:	2803      	cmp	r0, #3
 80057f2:	dc24      	bgt.n	800583e <ws2812b_set_led_color+0x4e>

	// Main Output Enable
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
}

void ws2812b_set_led_color(int led, uint32_t color) {
 80057f4:	b430      	push	{r4, r5}
	if (led < WS2812B_LED_NUM) {
		RGBdata[led] = color;
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <ws2812b_set_led_color+0x50>)
static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 80057f8:	4c12      	ldr	r4, [pc, #72]	; (8005844 <ws2812b_set_led_color+0x54>)
	TIM_CtrlPWMOutputs(TIM4, ENABLE);
}

void ws2812b_set_led_color(int led, uint32_t color) {
	if (led < WS2812B_LED_NUM) {
		RGBdata[led] = color;
 80057fa:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		}
	}
}

static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
 80057fe:	f3c1 4207 	ubfx	r2, r1, #16, #8
	uint32_t g = (color >> 8) & 0xFF;
 8005802:	f3c1 2507 	ubfx	r5, r1, #8, #8
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
 8005806:	5ca2      	ldrb	r2, [r4, r2]
	g = gamma_table[g];
 8005808:	5d65      	ldrb	r5, [r4, r5]
 800580a:	4b0f      	ldr	r3, [pc, #60]	; (8005848 <ws2812b_set_led_color+0x58>)
}

static uint32_t rgb_to_local(uint32_t color) {
	uint32_t r = (color >> 16) & 0xFF;
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;
 800580c:	b2c9      	uxtb	r1, r1
		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
 800580e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	uint32_t g = (color >> 8) & 0xFF;
	uint32_t b = color & 0xFF;

	r = gamma_table[r];
	g = gamma_table[g];
	b = gamma_table[b];
 8005812:	5c61      	ldrb	r1, [r4, r1]
 8005814:	0100      	lsls	r0, r0, #4

	return (g << 16) | (r << 8) | b;
 8005816:	0212      	lsls	r2, r2, #8
 8005818:	f100 0430 	add.w	r4, r0, #48	; 0x30
 800581c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8005820:	430a      	orrs	r2, r1
 8005822:	1919      	adds	r1, r3, r4
 8005824:	4403      	add	r3, r0
		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
 8005826:	2421      	movs	r4, #33	; 0x21
		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
 8005828:	2042      	movs	r0, #66	; 0x42

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
			if(color & (1 << 23)) {
 800582a:	0215      	lsls	r5, r2, #8
				bitbuffer[bit + led * 24] = WS2812B_ONE;
 800582c:	bf4c      	ite	mi
 800582e:	8018      	strhmi	r0, [r3, #0]
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
 8005830:	801c      	strhpl	r4, [r3, #0]
 8005832:	3302      	adds	r3, #2
		RGBdata[led] = color;

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
 8005834:	428b      	cmp	r3, r1
			if(color & (1 << 23)) {
				bitbuffer[bit + led * 24] = WS2812B_ONE;
			} else {
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
			}
			color <<= 1;
 8005836:	ea4f 0242 	mov.w	r2, r2, lsl #1
		RGBdata[led] = color;

		color = rgb_to_local(color);

		int bit;
		for (bit = 0;bit < 24;bit++) {
 800583a:	d1f6      	bne.n	800582a <ws2812b_set_led_color+0x3a>
				bitbuffer[bit + led * 24] = WS2812B_ZERO;
			}
			color <<= 1;
		}
	}
}
 800583c:	bc30      	pop	{r4, r5}
 800583e:	4770      	bx	lr
 8005840:	200017f4 	.word	0x200017f4
 8005844:	2000195c 	.word	0x2000195c
 8005848:	20001808 	.word	0x20001808
 800584c:	00000000 	.word	0x00000000

08005850 <bno055_read_addr>:
{
	return bno055_read_addr(BNO055_SYS_ERR_ADDR);
}

uint8_t bno055_read_addr(uint8_t addr)
{
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	b086      	sub	sp, #24
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 8005854:	4c0b      	ldr	r4, [pc, #44]	; (8005884 <bno055_read_addr+0x34>)
uint8_t bno055_read_addr(uint8_t addr)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 8005856:	ad06      	add	r5, sp, #24
	i2cAcquireBus(&I2CD1);
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, rxbuf, 1, tmo);
 8005858:	ae05      	add	r6, sp, #20
uint8_t bno055_read_addr(uint8_t addr)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 800585a:	f805 0d08 	strb.w	r0, [r5, #-8]!
	i2cAcquireBus(&I2CD1);
 800585e:	4620      	mov	r0, r4
 8005860:	f7fc fbfe 	bl	8002060 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, rxbuf, 1, tmo);
 8005864:	2301      	movs	r3, #1
 8005866:	2128      	movs	r1, #40	; 0x28
 8005868:	462a      	mov	r2, r5
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	9102      	str	r1, [sp, #8]
 800586e:	4620      	mov	r0, r4
 8005870:	9600      	str	r6, [sp, #0]
 8005872:	f7fc fbd5 	bl	8002020 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 8005876:	4620      	mov	r0, r4
 8005878:	f7fc fbfa 	bl	8002070 <i2cReleaseBus>
	return rxbuf[0];
}
 800587c:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8005880:	b006      	add	sp, #24
 8005882:	bd70      	pop	{r4, r5, r6, pc}
 8005884:	20001018 	.word	0x20001018
	...

08005890 <bno055_get_status>:
	return vector;
}

uint8_t bno055_get_status()
{
	return bno055_read_addr(BNO055_SYS_STAT_ADDR);
 8005890:	2039      	movs	r0, #57	; 0x39
 8005892:	f7ff bfdd 	b.w	8005850 <bno055_read_addr>
 8005896:	bf00      	nop
	...

080058a0 <bno055_get_error>:
}

uint8_t bno055_get_error()
{
	return bno055_read_addr(BNO055_SYS_ERR_ADDR);
 80058a0:	203a      	movs	r0, #58	; 0x3a
 80058a2:	f7ff bfd5 	b.w	8005850 <bno055_read_addr>
 80058a6:	bf00      	nop
	...

080058b0 <bno055_read_len>:
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 80058b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b2:	b087      	sub	sp, #28
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 80058b4:	4c0b      	ldr	r4, [pc, #44]	; (80058e4 <bno055_read_len+0x34>)

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
 80058b6:	ad06      	add	r5, sp, #24
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 80058b8:	460e      	mov	r6, r1
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
 80058ba:	f805 0d04 	strb.w	r0, [r5, #-4]!
	i2cAcquireBus(&I2CD1);
 80058be:	4620      	mov	r0, r4
	i2cReleaseBus(&I2CD1);
	return rxbuf[0];
}

void bno055_read_len(uint8_t addr, uint8_t len, uint8_t *buffer)
{
 80058c0:	4617      	mov	r7, r2
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[1];
	txbuf[0] = addr;
	i2cAcquireBus(&I2CD1);
 80058c2:	f7fc fbcd 	bl	8002060 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
 80058c6:	2128      	movs	r1, #40	; 0x28
 80058c8:	462a      	mov	r2, r5
 80058ca:	9102      	str	r1, [sp, #8]
 80058cc:	2301      	movs	r3, #1
 80058ce:	9700      	str	r7, [sp, #0]
 80058d0:	9601      	str	r6, [sp, #4]
 80058d2:	4620      	mov	r0, r4
 80058d4:	f7fc fba4 	bl	8002020 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 80058d8:	4620      	mov	r0, r4
 80058da:	f7fc fbc9 	bl	8002070 <i2cReleaseBus>
}
 80058de:	b007      	add	sp, #28
 80058e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20001018 	.word	0x20001018
	...

080058f0 <bno055_get_vector>:
	chThdSleepMilliseconds(50);
	return true;
}

vector3 bno055_get_vector(uint8_t addr)
{
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	ed2d 8b06 	vpush	{d8-d10}
 80058f6:	b08f      	sub	sp, #60	; 0x3c
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
 80058f8:	2300      	movs	r3, #0
	bno055_read_len(addr, 6, buffer);
 80058fa:	aa06      	add	r2, sp, #24
 80058fc:	2106      	movs	r1, #6
	chThdSleepMilliseconds(50);
	return true;
}

vector3 bno055_get_vector(uint8_t addr)
{
 80058fe:	4604      	mov	r4, r0
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
 8005900:	f8ad 301c 	strh.w	r3, [sp, #28]
 8005904:	9306      	str	r3, [sp, #24]
	bno055_read_len(addr, 6, buffer);
 8005906:	f7ff ffd3 	bl	80058b0 <bno055_read_len>
	int16_t x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 800590a:	f89d 7019 	ldrb.w	r7, [sp, #25]
 800590e:	f89d 0018 	ldrb.w	r0, [sp, #24]
	int16_t y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 8005912:	f89d 501b 	ldrb.w	r5, [sp, #27]
 8005916:	f89d 101a 	ldrb.w	r1, [sp, #26]
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800591a:	f89d 601d 	ldrb.w	r6, [sp, #29]
 800591e:	f89d 201c 	ldrb.w	r2, [sp, #28]
	switch(addr)
 8005922:	f1a4 0308 	sub.w	r3, r4, #8
{
	vector3 vector;
	uint8_t buffer[6];
	memset (buffer, 0, 6);
	bno055_read_len(addr, 6, buffer);
	int16_t x = ((int16_t)buffer[0]) | (((int16_t)buffer[1]) << 8);
 8005926:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
	int16_t y = ((int16_t)buffer[2]) | (((int16_t)buffer[3]) << 8);
 800592a:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
 800592e:	ea42 2406 	orr.w	r4, r2, r6, lsl #8
	switch(addr)
 8005932:	2b26      	cmp	r3, #38	; 0x26
 8005934:	d830      	bhi.n	8005998 <bno055_get_vector+0xa8>
 8005936:	e8df f003 	tbb	[pc, r3]
 800593a:	2f14      	.short	0x2f14
 800593c:	2f2f2f2f 	.word	0x2f2f2f2f
 8005940:	2f2f2f77 	.word	0x2f2f2f77
 8005944:	2f5b2f2f 	.word	0x2f5b2f2f
 8005948:	2f2f2f2f 	.word	0x2f2f2f2f
 800594c:	2f2f2f3f 	.word	0x2f2f2f3f
 8005950:	2f2f2f2f 	.word	0x2f2f2f2f
 8005954:	2f2f2f2f 	.word	0x2f2f2f2f
 8005958:	2f142f2f 	.word	0x2f142f2f
 800595c:	2f2f2f2f 	.word	0x2f2f2f2f
 8005960:	14          	.byte	0x14
 8005961:	00          	.byte	0x00
		break;
	case VECTOR_ACCELEROMETER:
	case VECTOR_LINEARACCEL:
	case VECTOR_GRAVITY:
		/* 1m/s^2 = 100 LSB */
		vector.x = ((double)x)/100.0;
 8005962:	b200      	sxth	r0, r0
 8005964:	f7fa fe1e 	bl	80005a4 <__aeabi_i2d>
 8005968:	2200      	movs	r2, #0
 800596a:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <bno055_get_vector+0x170>)
 800596c:	f7fa ffaa 	bl	80008c4 <__aeabi_ddiv>
 8005970:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/100.0;
 8005974:	b228      	sxth	r0, r5
 8005976:	f7fa fe15 	bl	80005a4 <__aeabi_i2d>
 800597a:	2200      	movs	r2, #0
 800597c:	4b38      	ldr	r3, [pc, #224]	; (8005a60 <bno055_get_vector+0x170>)
 800597e:	f7fa ffa1 	bl	80008c4 <__aeabi_ddiv>
 8005982:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/100.0;
 8005986:	b220      	sxth	r0, r4
 8005988:	f7fa fe0c 	bl	80005a4 <__aeabi_i2d>
 800598c:	2200      	movs	r2, #0
 800598e:	4b34      	ldr	r3, [pc, #208]	; (8005a60 <bno055_get_vector+0x170>)
 8005990:	f7fa ff98 	bl	80008c4 <__aeabi_ddiv>
 8005994:	ec41 0b18 	vmov	d8, r0, r1
		break;
	}

	return vector;
}
 8005998:	eeb0 0a4a 	vmov.f32	s0, s20
 800599c:	eef0 0a6a 	vmov.f32	s1, s21
 80059a0:	eeb0 1a49 	vmov.f32	s2, s18
 80059a4:	eef0 1a69 	vmov.f32	s3, s19
 80059a8:	eeb0 2a48 	vmov.f32	s4, s16
 80059ac:	eef0 2a68 	vmov.f32	s5, s17
 80059b0:	b00f      	add	sp, #60	; 0x3c
 80059b2:	ecbd 8b06 	vpop	{d8-d10}
 80059b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vector.y = ((double)y)/900.0;
		vector.z = ((double)z)/900.0;
		break;
	case VECTOR_EULER:
		/* 1 degree = 16 LSB */
		vector.z = ((double)x)/16.0;
 80059b8:	b200      	sxth	r0, r0
 80059ba:	f7fa fdf3 	bl	80005a4 <__aeabi_i2d>
 80059be:	2200      	movs	r2, #0
 80059c0:	4b28      	ldr	r3, [pc, #160]	; (8005a64 <bno055_get_vector+0x174>)
 80059c2:	f7fa fe55 	bl	8000670 <__aeabi_dmul>
 80059c6:	ec41 0b18 	vmov	d8, r0, r1
		vector.y = ((double)y)/16.0;
 80059ca:	b228      	sxth	r0, r5
 80059cc:	f7fa fdea 	bl	80005a4 <__aeabi_i2d>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <bno055_get_vector+0x174>)
 80059d4:	f7fa fe4c 	bl	8000670 <__aeabi_dmul>
 80059d8:	ec41 0b19 	vmov	d9, r0, r1
		vector.x = ((double)z)/16.0;
 80059dc:	b220      	sxth	r0, r4
 80059de:	f7fa fde1 	bl	80005a4 <__aeabi_i2d>
 80059e2:	2200      	movs	r2, #0
 80059e4:	4b1f      	ldr	r3, [pc, #124]	; (8005a64 <bno055_get_vector+0x174>)
 80059e6:	f7fa fe43 	bl	8000670 <__aeabi_dmul>
 80059ea:	ec41 0b1a 	vmov	d10, r0, r1
		break;
 80059ee:	e7d3      	b.n	8005998 <bno055_get_vector+0xa8>
		vector.y = ((double)y)/16.0;
		vector.z = ((double)z)/16.0;
		break;
	case VECTOR_GYROSCOPE:
		/* 1rps = 900 LSB */
		vector.x = ((double)x)/900.0;
 80059f0:	b200      	sxth	r0, r0
 80059f2:	f7fa fdd7 	bl	80005a4 <__aeabi_i2d>
 80059f6:	2200      	movs	r2, #0
 80059f8:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <bno055_get_vector+0x178>)
 80059fa:	f7fa ff63 	bl	80008c4 <__aeabi_ddiv>
 80059fe:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/900.0;
 8005a02:	b228      	sxth	r0, r5
 8005a04:	f7fa fdce 	bl	80005a4 <__aeabi_i2d>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <bno055_get_vector+0x178>)
 8005a0c:	f7fa ff5a 	bl	80008c4 <__aeabi_ddiv>
 8005a10:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/900.0;
 8005a14:	b220      	sxth	r0, r4
 8005a16:	f7fa fdc5 	bl	80005a4 <__aeabi_i2d>
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	4b12      	ldr	r3, [pc, #72]	; (8005a68 <bno055_get_vector+0x178>)
 8005a1e:	f7fa ff51 	bl	80008c4 <__aeabi_ddiv>
 8005a22:	ec41 0b18 	vmov	d8, r0, r1
		break;
 8005a26:	e7b7      	b.n	8005998 <bno055_get_vector+0xa8>
	int16_t z = ((int16_t)buffer[4]) | (((int16_t)buffer[5]) << 8);
	switch(addr)
	{
	case VECTOR_MAGNETOMETER:
		/* 1uT = 16 LSB */
		vector.x = ((double)x)/16.0;
 8005a28:	b200      	sxth	r0, r0
 8005a2a:	f7fa fdbb 	bl	80005a4 <__aeabi_i2d>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <bno055_get_vector+0x174>)
 8005a32:	f7fa fe1d 	bl	8000670 <__aeabi_dmul>
 8005a36:	ec41 0b1a 	vmov	d10, r0, r1
		vector.y = ((double)y)/16.0;
 8005a3a:	b228      	sxth	r0, r5
 8005a3c:	f7fa fdb2 	bl	80005a4 <__aeabi_i2d>
 8005a40:	2200      	movs	r2, #0
 8005a42:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <bno055_get_vector+0x174>)
 8005a44:	f7fa fe14 	bl	8000670 <__aeabi_dmul>
 8005a48:	ec41 0b19 	vmov	d9, r0, r1
		vector.z = ((double)z)/16.0;
 8005a4c:	b220      	sxth	r0, r4
 8005a4e:	f7fa fda9 	bl	80005a4 <__aeabi_i2d>
 8005a52:	2200      	movs	r2, #0
 8005a54:	4b03      	ldr	r3, [pc, #12]	; (8005a64 <bno055_get_vector+0x174>)
 8005a56:	f7fa fe0b 	bl	8000670 <__aeabi_dmul>
 8005a5a:	ec41 0b18 	vmov	d8, r0, r1
		break;
 8005a5e:	e79b      	b.n	8005998 <bno055_get_vector+0xa8>
 8005a60:	40590000 	.word	0x40590000
 8005a64:	3fb00000 	.word	0x3fb00000
 8005a68:	408c2000 	.word	0x408c2000
 8005a6c:	00000000 	.word	0x00000000

08005a70 <bno055_write_addr>:
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
	i2cReleaseBus(&I2CD1);
}

void bno055_write_addr(uint8_t addr, uint8_t value)
{
 8005a70:	b510      	push	{r4, lr}
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	txbuf[1] = value;
	i2cAcquireBus(&I2CD1);
 8005a72:	4c0c      	ldr	r4, [pc, #48]	; (8005aa4 <bno055_write_addr+0x34>)
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 1, buffer, len, tmo);
	i2cReleaseBus(&I2CD1);
}

void bno055_write_addr(uint8_t addr, uint8_t value)
{
 8005a74:	b086      	sub	sp, #24
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
 8005a76:	f88d 0014 	strb.w	r0, [sp, #20]
	txbuf[1] = value;
	i2cAcquireBus(&I2CD1);
 8005a7a:	4620      	mov	r0, r4
{
 	systime_t tmo = MS2ST(4);
	uint8_t txbuf[2];
	uint8_t rxbuf[1];
	txbuf[0] = addr;
	txbuf[1] = value;
 8005a7c:	f88d 1015 	strb.w	r1, [sp, #21]
	i2cAcquireBus(&I2CD1);
 8005a80:	f7fc faee 	bl	8002060 <i2cAcquireBus>
	uint8_t stat = i2cMasterTransmitTimeout(&I2CD1, BNO055_ADDR, txbuf, 2, rxbuf, 0, tmo);
 8005a84:	2128      	movs	r1, #40	; 0x28
 8005a86:	aa04      	add	r2, sp, #16
 8005a88:	2300      	movs	r3, #0
 8005a8a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005a8e:	9102      	str	r1, [sp, #8]
 8005a90:	aa05      	add	r2, sp, #20
 8005a92:	2302      	movs	r3, #2
 8005a94:	4620      	mov	r0, r4
 8005a96:	f7fc fac3 	bl	8002020 <i2cMasterTransmitTimeout>
	i2cReleaseBus(&I2CD1);
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7fc fae8 	bl	8002070 <i2cReleaseBus>
 8005aa0:	b006      	add	sp, #24
 8005aa2:	bd10      	pop	{r4, pc}
 8005aa4:	20001018 	.word	0x20001018
	...

08005ab0 <bno055_init>:
    100000,
    STD_DUTY_CYCLE,
};

bool bno055_init()
{
 8005ab0:	b508      	push	{r3, lr}
	i2cStart(&I2CD1, &i2ccfg);
 8005ab2:	482b      	ldr	r0, [pc, #172]	; (8005b60 <bno055_init+0xb0>)
 8005ab4:	492b      	ldr	r1, [pc, #172]	; (8005b64 <bno055_init+0xb4>)
 8005ab6:	f7fc faa3 	bl	8002000 <i2cStart>
	palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8005aba:	482b      	ldr	r0, [pc, #172]	; (8005b68 <bno055_init+0xb8>)
 8005abc:	2140      	movs	r1, #64	; 0x40
 8005abe:	f240 2206 	movw	r2, #518	; 0x206
 8005ac2:	f7fd ff6d 	bl	80039a0 <_pal_lld_setgroupmode>
	palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(4) | PAL_STM32_OTYPE_OPENDRAIN);
 8005ac6:	4828      	ldr	r0, [pc, #160]	; (8005b68 <bno055_init+0xb8>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	f240 2206 	movw	r2, #518	; 0x206
 8005ace:	f7fd ff67 	bl	80039a0 <_pal_lld_setgroupmode>
	uint8_t id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f7ff febc 	bl	8005850 <bno055_read_addr>
	if(id != BNO055_ID)
 8005ad8:	28a0      	cmp	r0, #160	; 0xa0
 8005ada:	d00a      	beq.n	8005af2 <bno055_init+0x42>
	{
	    chThdSleepMilliseconds(1000);
 8005adc:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ae0:	f7fb fcbe 	bl	8001460 <chThdSleep>
		id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7ff feb3 	bl	8005850 <bno055_read_addr>
		if(id != BNO055_ID) {
 8005aea:	28a0      	cmp	r0, #160	; 0xa0
 8005aec:	d001      	beq.n	8005af2 <bno055_init+0x42>
			return false;
 8005aee:	2000      	movs	r0, #0
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x80);
	chThdSleepMilliseconds(10);
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
	chThdSleepMilliseconds(50);
	return true;
}
 8005af0:	bd08      	pop	{r3, pc}
		id = bno055_read_addr(BNO055_CHIP_ID_ADDR);
		if(id != BNO055_ID) {
			return false;
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
 8005af2:	2100      	movs	r1, #0
 8005af4:	203d      	movs	r0, #61	; 0x3d
 8005af6:	f7ff ffbb 	bl	8005a70 <bno055_write_addr>
	chThdSleepMilliseconds(30);
 8005afa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005afe:	f7fb fcaf 	bl	8001460 <chThdSleep>
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
 8005b02:	203f      	movs	r0, #63	; 0x3f
 8005b04:	2120      	movs	r1, #32
 8005b06:	f7ff ffb3 	bl	8005a70 <bno055_write_addr>
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8005b0a:	e001      	b.n	8005b10 <bno055_init+0x60>
	{
		chThdSleepMilliseconds(10);
 8005b0c:	f7fb fca8 	bl	8001460 <chThdSleep>
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
	chThdSleepMilliseconds(30);
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8005b10:	2000      	movs	r0, #0
 8005b12:	f7ff fe9d 	bl	8005850 <bno055_read_addr>
 8005b16:	28a0      	cmp	r0, #160	; 0xa0
	{
		chThdSleepMilliseconds(10);
 8005b18:	f04f 0064 	mov.w	r0, #100	; 0x64
		}
	}
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_CONFIG);
	chThdSleepMilliseconds(30);
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x20);
	while (bno055_read_addr(BNO055_CHIP_ID_ADDR) != BNO055_ID)
 8005b1c:	d1f6      	bne.n	8005b0c <bno055_init+0x5c>
	{
		chThdSleepMilliseconds(10);
	}
	chThdSleepMilliseconds(50);
 8005b1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b22:	f7fb fc9d 	bl	8001460 <chThdSleep>

	/* Set to normal power mode */
	bno055_write_addr(BNO055_PWR_MODE_ADDR, POWER_MODE_NORMAL);
 8005b26:	2100      	movs	r1, #0
 8005b28:	203e      	movs	r0, #62	; 0x3e
 8005b2a:	f7ff ffa1 	bl	8005a70 <bno055_write_addr>
	chThdSleepMilliseconds(10);
 8005b2e:	2064      	movs	r0, #100	; 0x64
 8005b30:	f7fb fc96 	bl	8001460 <chThdSleep>

	bno055_write_addr(BNO055_PAGE_ID_ADDR, 0);
 8005b34:	2007      	movs	r0, #7
 8005b36:	2100      	movs	r1, #0
 8005b38:	f7ff ff9a 	bl	8005a70 <bno055_write_addr>
	bno055_write_addr(BNO055_SYS_TRIGGER_ADDR, 0x80);
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	203f      	movs	r0, #63	; 0x3f
 8005b40:	f7ff ff96 	bl	8005a70 <bno055_write_addr>
	chThdSleepMilliseconds(10);
 8005b44:	2064      	movs	r0, #100	; 0x64
 8005b46:	f7fb fc8b 	bl	8001460 <chThdSleep>
	bno055_write_addr(BNO055_OPR_MODE_ADDR, OPERATION_MODE_NDOF);
 8005b4a:	210c      	movs	r1, #12
 8005b4c:	203d      	movs	r0, #61	; 0x3d
 8005b4e:	f7ff ff8f 	bl	8005a70 <bno055_write_addr>
	chThdSleepMilliseconds(50);
 8005b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b56:	f7fb fc83 	bl	8001460 <chThdSleep>
	return true;
 8005b5a:	2001      	movs	r0, #1
 8005b5c:	bd08      	pop	{r3, pc}
 8005b5e:	bf00      	nop
 8005b60:	20001018 	.word	0x20001018
 8005b64:	08007c90 	.word	0x08007c90
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	00000000 	.word	0x00000000

08005b70 <nrfExtCallback>:

NRF24L01Driver nrf24l01;
static const uint8_t addr[4] = "QUAD";

static void nrfExtCallback(EXTDriver *extp, expchannel_t channel)
{
 8005b70:	b508      	push	{r3, lr}
 8005b72:	2320      	movs	r3, #32
 8005b74:	f383 8811 	msr	BASEPRI, r3
}

void nrf24l01ExtIRQ(NRF24L01Driver *nrfp)
{
    chSysLockFromISR();
    chEvtBroadcastFlagsI(&nrfp->eventSource, NRF24L01_EVENT_IRQ);
 8005b78:	4803      	ldr	r0, [pc, #12]	; (8005b88 <nrfExtCallback+0x18>)
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	f7fb fe68 	bl	8001850 <chEvtBroadcastFlagsI>
 8005b80:	2300      	movs	r3, #0
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	bd08      	pop	{r3, pc}
 8005b88:	20001b7c 	.word	0x20001b7c
 8005b8c:	00000000 	.word	0x00000000

08005b90 <nrf24l01ReadPayload.part.2>:
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
 8005b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	b082      	sub	sp, #8
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
 8005b96:	ad02      	add	r5, sp, #8
 8005b98:	2661      	movs	r6, #97	; 0x61
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
 8005b9a:	4604      	mov	r4, r0
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
 8005b9c:	f805 6d02 	strb.w	r6, [r5, #-2]!
    uint8_t status;

    spiSelect(nrfp->config->spip);
 8005ba0:	f8d0 0124 	ldr.w	r0, [r0, #292]	; 0x124
 8005ba4:	6800      	ldr	r0, [r0, #0]
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg &= ~(pipes & 0x3F);
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
 8005ba6:	4688      	mov	r8, r1
 8005ba8:	4617      	mov	r7, r2
 8005baa:	461e      	mov	r6, r3
        return;

    uint8_t op = NRF24L01_CMD_R_RX_PAYLOAD;
    uint8_t status;

    spiSelect(nrfp->config->spip);
 8005bac:	f7fc fce0 	bl	8002570 <spiSelect>
    spiExchange(nrfp->config->spip, 1, &op, &status);
 8005bb0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	2101      	movs	r1, #1
 8005bba:	f10d 0307 	add.w	r3, sp, #7
 8005bbe:	f7fc fcf7 	bl	80025b0 <spiExchange>
    spiReceive(nrfp->config->spip, size, data);
 8005bc2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	463a      	mov	r2, r7
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	f7fc fd20 	bl	8002610 <spiReceive>
    spiUnselect(nrfp->config->spip);
 8005bd0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	f7fc fcdb 	bl	8002590 <spiUnselect>

    *pipe = (status >> 1) & 0x7;
 8005bda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005bde:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005be2:	7033      	strb	r3, [r6, #0]
}
 8005be4:	b002      	add	sp, #8
 8005be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bea:	bf00      	nop
 8005bec:	0000      	movs	r0, r0
	...

08005bf0 <nrf24l01WritePayload.part.3>:

void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
 8005bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	4604      	mov	r4, r0
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD;
 8005bf6:	ad02      	add	r5, sp, #8
 8005bf8:	20a0      	movs	r0, #160	; 0xa0

    spiSelect(nrfp->config->spip);
 8005bfa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
{
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD;
 8005bfe:	f805 0d01 	strb.w	r0, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 8005c02:	6818      	ldr	r0, [r3, #0]
    spiUnselect(nrfp->config->spip);

    *pipe = (status >> 1) & 0x7;
}

void nrf24l01WritePayload(NRF24L01Driver *nrfp, uint8_t size, const uint8_t *data)
 8005c04:	460f      	mov	r7, r1
 8005c06:	4616      	mov	r6, r2
    if (size > 32)
        return;

    uint8_t op = NRF24L01_CMD_W_TX_PAYLOAD;

    spiSelect(nrfp->config->spip);
 8005c08:	f7fc fcb2 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8005c0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c10:	462a      	mov	r2, r5
 8005c12:	6818      	ldr	r0, [r3, #0]
 8005c14:	2101      	movs	r1, #1
 8005c16:	f7fc fce3 	bl	80025e0 <spiSend>
    spiSend(nrfp->config->spip, size, data);
 8005c1a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c1e:	4639      	mov	r1, r7
 8005c20:	4632      	mov	r2, r6
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	f7fc fcdc 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005c28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c2c:	6818      	ldr	r0, [r3, #0]
 8005c2e:	f7fc fcaf 	bl	8002590 <spiUnselect>
}
 8005c32:	b003      	add	sp, #12
 8005c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c36:	bf00      	nop
	...

08005c40 <nrf24l01WriteRegister>:
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8005c40:	b510      	push	{r4, lr}
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8005c42:	f001 011f 	and.w	r1, r1, #31
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8005c46:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8005c48:	f041 0120 	orr.w	r1, r1, #32

    spiSelect(nrfp->config->spip);
 8005c4c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8005c50:	f88d 1004 	strb.w	r1, [sp, #4]
{
    nrfp->config = config;
}

void nrf24l01WriteRegister(NRF24L01Driver *nrfp, uint8_t reg, uint8_t value)
{
 8005c54:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_W_REGISTER | (reg & 0x1F), value};
 8005c56:	f88d 2005 	strb.w	r2, [sp, #5]

    spiSelect(nrfp->config->spip);
 8005c5a:	6818      	ldr	r0, [r3, #0]
 8005c5c:	f7fc fc88 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 2, op);
 8005c60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c64:	2102      	movs	r1, #2
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	aa01      	add	r2, sp, #4
 8005c6a:	f7fc fcb9 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005c6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f7fc fc8c 	bl	8002590 <spiUnselect>
}
 8005c78:	b002      	add	sp, #8
 8005c7a:	bd10      	pop	{r4, pc}
 8005c7c:	0000      	movs	r0, r0
	...

08005c80 <nrf24l01ReadRegister>:

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
 8005c80:	b510      	push	{r4, lr}
 8005c82:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 8005c84:	2300      	movs	r3, #0
 8005c86:	f001 011f 	and.w	r1, r1, #31
    uint8_t data[2] = {0, 0};

    spiSelect(nrfp->config->spip);
 8005c8a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 8005c8e:	f88d 1000 	strb.w	r1, [sp]
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01ReadRegister(NRF24L01Driver *nrfp, uint8_t reg)
{
 8005c92:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_R_REGISTER | (reg & 0x1F), 0};
 8005c94:	f88d 3001 	strb.w	r3, [sp, #1]
    uint8_t data[2] = {0, 0};
 8005c98:	f88d 3004 	strb.w	r3, [sp, #4]
 8005c9c:	f88d 3005 	strb.w	r3, [sp, #5]

    spiSelect(nrfp->config->spip);
 8005ca0:	6810      	ldr	r0, [r2, #0]
 8005ca2:	f7fc fc65 	bl	8002570 <spiSelect>
    spiExchange(nrfp->config->spip, 2, op, data);
 8005ca6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005caa:	2102      	movs	r1, #2
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	466a      	mov	r2, sp
 8005cb0:	ab01      	add	r3, sp, #4
 8005cb2:	f7fc fc7d 	bl	80025b0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 8005cb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	f7fc fc68 	bl	8002590 <spiUnselect>

    return data[1];
}
 8005cc0:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd10      	pop	{r4, pc}
	...

08005cd0 <nrf24l01WriteAddressRegister>:

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[4])
{
 8005cd0:	b570      	push	{r4, r5, r6, lr}
 8005cd2:	b082      	sub	sp, #8
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);
 8005cd4:	ad02      	add	r5, sp, #8
 8005cd6:	f001 011f 	and.w	r1, r1, #31
 8005cda:	f041 0120 	orr.w	r1, r1, #32
 8005cde:	f805 1d01 	strb.w	r1, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 8005ce2:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124

    return data[1];
}

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[4])
{
 8005ce6:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);

    spiSelect(nrfp->config->spip);
 8005ce8:	6818      	ldr	r0, [r3, #0]

    return data[1];
}

void nrf24l01WriteAddressRegister(NRF24L01Driver *nrfp, uint8_t reg, const uint8_t value[4])
{
 8005cea:	4616      	mov	r6, r2
    uint8_t op = NRF24L01_CMD_W_REGISTER | (reg & 0x1F);

    spiSelect(nrfp->config->spip);
 8005cec:	f7fc fc40 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8005cf0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	f7fc fc71 	bl	80025e0 <spiSend>
    spiSend(nrfp->config->spip, 5, value);
 8005cfe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d02:	4632      	mov	r2, r6
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	2105      	movs	r1, #5
 8005d08:	f7fc fc6a 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005d0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d10:	6818      	ldr	r0, [r3, #0]
 8005d12:	f7fc fc3d 	bl	8002590 <spiUnselect>
}
 8005d16:	b002      	add	sp, #8
 8005d18:	bd70      	pop	{r4, r5, r6, pc}
 8005d1a:	bf00      	nop
 8005d1c:	0000      	movs	r0, r0
	...

08005d20 <nrf24l01GetStatus>:
    spiReceive(nrfp->config->spip, 5, value);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetStatus(NRF24L01Driver *nrfp)
{
 8005d20:	b530      	push	{r4, r5, lr}
 8005d22:	b083      	sub	sp, #12
    uint8_t op = NRF24L01_CMD_NOP;
 8005d24:	ad02      	add	r5, sp, #8
 8005d26:	22ff      	movs	r2, #255	; 0xff
 8005d28:	f805 2d02 	strb.w	r2, [r5, #-2]!
    uint8_t data;

    spiSelect(nrfp->config->spip);
 8005d2c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiReceive(nrfp->config->spip, 5, value);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetStatus(NRF24L01Driver *nrfp)
{
 8005d30:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_NOP;
    uint8_t data;

    spiSelect(nrfp->config->spip);
 8005d32:	6818      	ldr	r0, [r3, #0]
 8005d34:	f7fc fc1c 	bl	8002570 <spiSelect>
    spiExchange(nrfp->config->spip, 1, &op, &data);
 8005d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	2101      	movs	r1, #1
 8005d42:	f10d 0307 	add.w	r3, sp, #7
 8005d46:	f7fc fc33 	bl	80025b0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 8005d4a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	f7fc fc1e 	bl	8002590 <spiUnselect>

    return data;
}
 8005d54:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8005d58:	b003      	add	sp, #12
 8005d5a:	bd30      	pop	{r4, r5, pc}
 8005d5c:	0000      	movs	r0, r0
	...

08005d60 <nrf24l01PowerUp>:

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
 8005d60:	b510      	push	{r4, lr}
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8005d62:	2100      	movs	r1, #0

    return data;
}

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
 8005d64:	4604      	mov	r4, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8005d66:	f7ff ff8b 	bl	8005c80 <nrf24l01ReadRegister>
    reg |= NRF24L01_PWR_UP;
 8005d6a:	f040 0202 	orr.w	r2, r0, #2
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	4620      	mov	r0, r4
 8005d72:	2100      	movs	r1, #0
}
 8005d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void nrf24l01PowerUp(NRF24L01Driver *nrfp)
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
    reg |= NRF24L01_PWR_UP;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 8005d78:	f7ff bf62 	b.w	8005c40 <nrf24l01WriteRegister>
 8005d7c:	0000      	movs	r0, r0
	...

08005d80 <nrf24l01SetRXAddress>:
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
}

void nrf24l01SetRXAddress(NRF24L01Driver *nrfp, uint8_t pipe, const uint8_t addr[4])
{
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	460c      	mov	r4, r1
 8005d84:	4615      	mov	r5, r2
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
 8005d86:	2103      	movs	r1, #3
 8005d88:	2280      	movs	r2, #128	; 0x80
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
}

void nrf24l01SetRXAddress(NRF24L01Driver *nrfp, uint8_t pipe, const uint8_t addr[4])
{
 8005d8a:	4606      	mov	r6, r0
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
 8005d8c:	f7ff ff58 	bl	8005c40 <nrf24l01WriteRegister>
    if ((pipe == 0) || (pipe == 1))
 8005d90:	2c01      	cmp	r4, #1
 8005d92:	d90c      	bls.n	8005dae <nrf24l01SetRXAddress+0x2e>
        nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, addr);
    else if ((pipe > 2) && (pipe < 6))
 8005d94:	1ee3      	subs	r3, r4, #3
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d900      	bls.n	8005d9c <nrf24l01SetRXAddress+0x1c>
 8005d9a:	bd70      	pop	{r4, r5, r6, pc}
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
 8005d9c:	f104 010a 	add.w	r1, r4, #10
 8005da0:	4630      	mov	r0, r6
 8005da2:	782a      	ldrb	r2, [r5, #0]
 8005da4:	b2c9      	uxtb	r1, r1
}
 8005da6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
    if ((pipe == 0) || (pipe == 1))
        nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, addr);
    else if ((pipe > 2) && (pipe < 6))
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
 8005daa:	f7ff bf49 	b.w	8005c40 <nrf24l01WriteRegister>

void nrf24l01SetRXAddress(NRF24L01Driver *nrfp, uint8_t pipe, const uint8_t addr[4])
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
    if ((pipe == 0) || (pipe == 1))
        nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, addr);
 8005dae:	f104 010a 	add.w	r1, r4, #10
 8005db2:	4630      	mov	r0, r6
 8005db4:	462a      	mov	r2, r5
 8005db6:	b2c9      	uxtb	r1, r1
    else if ((pipe > 2) && (pipe < 6))
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
}
 8005db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

void nrf24l01SetRXAddress(NRF24L01Driver *nrfp, uint8_t pipe, const uint8_t addr[4])
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
    if ((pipe == 0) || (pipe == 1))
        nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, addr);
 8005dbc:	f7ff bf88 	b.w	8005cd0 <nrf24l01WriteAddressRegister>

08005dc0 <nrf24l01SetTXAddress>:
    else if ((pipe > 2) && (pipe < 6))
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
}

void nrf24l01SetTXAddress(NRF24L01Driver *nrfp, const uint8_t addr[4])
{
 8005dc0:	b538      	push	{r3, r4, r5, lr}
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
 8005dc2:	2280      	movs	r2, #128	; 0x80
    else if ((pipe > 2) && (pipe < 6))
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_ADDR_P0 + pipe, *addr);
}

void nrf24l01SetTXAddress(NRF24L01Driver *nrfp, const uint8_t addr[4])
{
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	4605      	mov	r5, r0
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
 8005dc8:	2103      	movs	r1, #3
 8005dca:	f7ff ff39 	bl	8005c40 <nrf24l01WriteRegister>
    return nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_TX_ADDR, addr);
 8005dce:	4628      	mov	r0, r5
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	2110      	movs	r1, #16
}
 8005dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

void nrf24l01SetTXAddress(NRF24L01Driver *nrfp, const uint8_t addr[4])
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_SETUP_AW, 0b10000000);
    return nrf24l01WriteAddressRegister(nrfp, NRF24L01_REG_TX_ADDR, addr);
 8005dd8:	f7ff bf7a 	b.w	8005cd0 <nrf24l01WriteAddressRegister>
 8005ddc:	0000      	movs	r0, r0
	...

08005de0 <nrf24l01EnableDynamicPipeSize>:
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
    }
}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	460c      	mov	r4, r1
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
 8005de4:	211c      	movs	r1, #28
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
    }
}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
 8005de6:	4605      	mov	r5, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
 8005de8:	f7ff ff4a 	bl	8005c80 <nrf24l01ReadRegister>
    reg |= pipes & 0x3F;
 8005dec:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8005df0:	ea40 0204 	orr.w	r2, r0, r4
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	4628      	mov	r0, r5
 8005df8:	211c      	movs	r1, #28
}
 8005dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void nrf24l01EnableDynamicPipeSize(NRF24L01Driver *nrfp, uint8_t pipes)
{
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_DYNPD);
    reg |= pipes & 0x3F;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
 8005dfe:	f7ff bf1f 	b.w	8005c40 <nrf24l01WriteRegister>
 8005e02:	bf00      	nop
	...

08005e10 <nrf24l01ToggleFeatures>:
    spiSend(nrfp->config->spip, size, data);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
 8005e10:	b510      	push	{r4, lr}
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <nrf24l01ToggleFeatures+0x34>)

    spiSelect(nrfp->config->spip);
 8005e14:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 8005e18:	8812      	ldrh	r2, [r2, #0]
    spiSend(nrfp->config->spip, size, data);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01ToggleFeatures(NRF24L01Driver *nrfp)
{
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_ACTIVATE, 0x73};
 8005e1e:	f8ad 2004 	strh.w	r2, [sp, #4]

    spiSelect(nrfp->config->spip);
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	f7fc fba4 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 2, op);
 8005e28:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e2c:	aa01      	add	r2, sp, #4
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	2102      	movs	r1, #2
 8005e32:	f7fc fbd5 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005e36:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	f7fc fba8 	bl	8002590 <spiUnselect>
}
 8005e40:	b002      	add	sp, #8
 8005e42:	bd10      	pop	{r4, pc}
 8005e44:	08007770 	.word	0x08007770
	...

08005e50 <nrf24l01EnableDynamicSize>:
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
}

void nrf24l01EnableDynamicSize(NRF24L01Driver *nrfp)
{
 8005e50:	b538      	push	{r3, r4, r5, lr}
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8005e52:	211d      	movs	r1, #29
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
}

void nrf24l01EnableDynamicSize(NRF24L01Driver *nrfp)
{
 8005e54:	4604      	mov	r4, r0
    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8005e56:	f7ff ff13 	bl	8005c80 <nrf24l01ReadRegister>

    if (reg & NRF24L01_EN_DPL)
 8005e5a:	0742      	lsls	r2, r0, #29
 8005e5c:	d500      	bpl.n	8005e60 <nrf24l01EnableDynamicSize+0x10>
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
        return;

    reg |= NRF24L01_EN_DPL;
 8005e60:	f040 0204 	orr.w	r2, r0, #4
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	4620      	mov	r0, r4
 8005e68:	211d      	movs	r1, #29
 8005e6a:	f7ff fee9 	bl	8005c40 <nrf24l01WriteRegister>

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8005e6e:	4620      	mov	r0, r4
 8005e70:	211d      	movs	r1, #29
 8005e72:	f7ff ff05 	bl	8005c80 <nrf24l01ReadRegister>
    if ((reg & NRF24L01_EN_DPL) == 0)
 8005e76:	0743      	lsls	r3, r0, #29
        return;

    reg |= NRF24L01_EN_DPL;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
 8005e78:	4605      	mov	r5, r0
    if ((reg & NRF24L01_EN_DPL) == 0)
 8005e7a:	d4f0      	bmi.n	8005e5e <nrf24l01EnableDynamicSize+0xe>
    {
        nrf24l01ToggleFeatures(nrfp);
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7ff ffc7 	bl	8005e10 <nrf24l01ToggleFeatures>
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 8005e82:	4620      	mov	r0, r4
 8005e84:	462a      	mov	r2, r5
 8005e86:	211d      	movs	r1, #29
    }
}
 8005e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_FEATURE);
    if ((reg & NRF24L01_EN_DPL) == 0)
    {
        nrf24l01ToggleFeatures(nrfp);
        nrf24l01WriteRegister(nrfp, NRF24L01_REG_FEATURE, reg);
 8005e8c:	f7ff bed8 	b.w	8005c40 <nrf24l01WriteRegister>

08005e90 <nrf24l01FlushRX>:
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushRX(NRF24L01Driver *nrfp)
{
 8005e90:	b530      	push	{r4, r5, lr}
 8005e92:	b083      	sub	sp, #12
    uint8_t op = NRF24L01_CMD_FLUSH_RX;
 8005e94:	ad02      	add	r5, sp, #8
 8005e96:	22e2      	movs	r2, #226	; 0xe2
 8005e98:	f805 2d01 	strb.w	r2, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 8005e9c:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiSend(nrfp->config->spip, 2, op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushRX(NRF24L01Driver *nrfp)
{
 8005ea0:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_FLUSH_RX;

    spiSelect(nrfp->config->spip);
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	f7fc fb64 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8005ea8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eac:	462a      	mov	r2, r5
 8005eae:	6818      	ldr	r0, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	f7fc fb95 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005eb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	f7fc fb68 	bl	8002590 <spiUnselect>
}
 8005ec0:	b003      	add	sp, #12
 8005ec2:	bd30      	pop	{r4, r5, pc}
	...

08005ed0 <nrf24l01FlushTX>:

void nrf24l01FlushTX(NRF24L01Driver *nrfp)
{
 8005ed0:	b530      	push	{r4, r5, lr}
 8005ed2:	b083      	sub	sp, #12
    uint8_t op = NRF24L01_CMD_FLUSH_TX;
 8005ed4:	ad02      	add	r5, sp, #8
 8005ed6:	22e1      	movs	r2, #225	; 0xe1
 8005ed8:	f805 2d01 	strb.w	r2, [r5, #-1]!

    spiSelect(nrfp->config->spip);
 8005edc:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    spiSend(nrfp->config->spip, 1, &op);
    spiUnselect(nrfp->config->spip);
}

void nrf24l01FlushTX(NRF24L01Driver *nrfp)
{
 8005ee0:	4604      	mov	r4, r0
    uint8_t op = NRF24L01_CMD_FLUSH_TX;

    spiSelect(nrfp->config->spip);
 8005ee2:	6818      	ldr	r0, [r3, #0]
 8005ee4:	f7fc fb44 	bl	8002570 <spiSelect>
    spiSend(nrfp->config->spip, 1, &op);
 8005ee8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eec:	462a      	mov	r2, r5
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	f7fc fb75 	bl	80025e0 <spiSend>
    spiUnselect(nrfp->config->spip);
 8005ef6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	f7fc fb48 	bl	8002590 <spiUnselect>
}
 8005f00:	b003      	add	sp, #12
 8005f02:	bd30      	pop	{r4, r5, pc}
	...

08005f10 <initNRF24L01>:
        {EXT_CH_MODE_DISABLED, NULL}
    }
};

void initNRF24L01(void)
{
 8005f10:	b538      	push	{r3, r4, r5, lr}
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
 8005f12:	4d2f      	ldr	r5, [pc, #188]	; (8005fd0 <initNRF24L01+0xc0>)
    palSetPad(GPIOA, GPIOA_LRCK);
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
 8005f14:	4c2f      	ldr	r4, [pc, #188]	; (8005fd4 <initNRF24L01+0xc4>)
    }
};

void initNRF24L01(void)
{
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
 8005f16:	4628      	mov	r0, r5
 8005f18:	2110      	movs	r1, #16
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f7fd fd40 	bl	80039a0 <_pal_lld_setgroupmode>
    palSetPad(GPIOA, GPIOA_LRCK);
 8005f20:	2310      	movs	r3, #16
 8005f22:	832b      	strh	r3, [r5, #24]
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
 8005f24:	4620      	mov	r0, r4
 8005f26:	2102      	movs	r1, #2
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f7fd fd39 	bl	80039a0 <_pal_lld_setgroupmode>
    palClearPad(GPIOB, GPIOB_PIN1);
 8005f2e:	2302      	movs	r3, #2
    palSetPadMode(GPIOC, GPIOC_PIN5, PAL_MODE_INPUT_PULLUP);
 8005f30:	2120      	movs	r1, #32
 8005f32:	460a      	mov	r2, r1
void initNRF24L01(void)
{
    palSetPadMode(GPIOA, GPIOA_LRCK, PAL_MODE_OUTPUT_PUSHPULL);
    palSetPad(GPIOA, GPIOA_LRCK);
    palSetPadMode(GPIOB, GPIOB_PIN1, PAL_MODE_OUTPUT_PUSHPULL);
    palClearPad(GPIOB, GPIOB_PIN1);
 8005f34:	8363      	strh	r3, [r4, #26]
    palSetPadMode(GPIOC, GPIOC_PIN5, PAL_MODE_INPUT_PULLUP);
 8005f36:	4828      	ldr	r0, [pc, #160]	; (8005fd8 <initNRF24L01+0xc8>)
 8005f38:	4d28      	ldr	r5, [pc, #160]	; (8005fdc <initNRF24L01+0xcc>)
 8005f3a:	f7fd fd31 	bl	80039a0 <_pal_lld_setgroupmode>

    spiStart(&SPID1, &nrf24l01SPI);
 8005f3e:	4828      	ldr	r0, [pc, #160]	; (8005fe0 <initNRF24L01+0xd0>)
 8005f40:	4928      	ldr	r1, [pc, #160]	; (8005fe4 <initNRF24L01+0xd4>)
 8005f42:	f7fc fb05 	bl	8002550 <spiStart>
    extStart(&EXTD1, &extcfg);
 8005f46:	4828      	ldr	r0, [pc, #160]	; (8005fe8 <initNRF24L01+0xd8>)
 8005f48:	4928      	ldr	r1, [pc, #160]	; (8005fec <initNRF24L01+0xdc>)
 8005f4a:	f7fc f829 	bl	8001fa0 <extStart>
 8005f4e:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <initNRF24L01+0xe0>)
void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
    {
        nrfp->channels[i].vmt = &vmt;
        nrfp->channels[i].rxBufCount = 0;
 8005f50:	2200      	movs	r2, #0
 8005f52:	f503 7090 	add.w	r0, r3, #288	; 0x120
 8005f56:	f1a3 012c 	sub.w	r1, r3, #44	; 0x2c

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
    {
        nrfp->channels[i].vmt = &vmt;
 8005f5a:	f843 5c2c 	str.w	r5, [r3, #-44]
        nrfp->channels[i].rxBufCount = 0;
 8005f5e:	f803 2c04 	strb.w	r2, [r3, #-4]
        nrfp->channels[i].nrfp = nrfp;
 8005f62:	f843 1c28 	str.w	r1, [r3, #-40]
 8005f66:	601b      	str	r3, [r3, #0]
 8005f68:	3330      	adds	r3, #48	; 0x30
    putt, gett, writet, readt
};

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
 8005f6a:	4283      	cmp	r3, r0
    {
        nrfp->channels[i].vmt = &vmt;
        nrfp->channels[i].rxBufCount = 0;
        nrfp->channels[i].nrfp = nrfp;
 8005f6c:	4c21      	ldr	r4, [pc, #132]	; (8005ff4 <initNRF24L01+0xe4>)
    putt, gett, writet, readt
};

void nrf24l01ObjectInit(NRF24L01Driver *nrfp)
{
    for (int i = 0; i < 6; i++)
 8005f6e:	d1f4      	bne.n	8005f5a <initNRF24L01+0x4a>
 8005f70:	f504 7290 	add.w	r2, r4, #288	; 0x120
    chEvtObjectInit(&nrfp->eventSource);
}

void nrf24l01Start(NRF24L01Driver *nrfp, const NRF24L01Config *config)
{
    nrfp->config = config;
 8005f74:	4b20      	ldr	r3, [pc, #128]	; (8005ff8 <initNRF24L01+0xe8>)
 8005f76:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120

    spiStart(&SPID1, &nrf24l01SPI);
    extStart(&EXTD1, &extcfg);
    nrf24l01ObjectInit(&nrf24l01);
    nrf24l01Start(&nrf24l01, &nrf24l01Config);
    extChannelEnable(&EXTD1, 5);
 8005f7a:	2105      	movs	r1, #5
 8005f7c:	481a      	ldr	r0, [pc, #104]	; (8005fe8 <initNRF24L01+0xd8>)
    chEvtObjectInit(&nrfp->eventSource);
}

void nrf24l01Start(NRF24L01Driver *nrfp, const NRF24L01Config *config)
{
    nrfp->config = config;
 8005f7e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124

    spiStart(&SPID1, &nrf24l01SPI);
    extStart(&EXTD1, &extcfg);
    nrf24l01ObjectInit(&nrf24l01);
    nrf24l01Start(&nrf24l01, &nrf24l01Config);
    extChannelEnable(&EXTD1, 5);
 8005f82:	f7fc f81d 	bl	8001fc0 <extChannelEnable>

    nrf24l01EnableDynamicSize(&nrf24l01);
 8005f86:	4620      	mov	r0, r4
 8005f88:	f7ff ff62 	bl	8005e50 <nrf24l01EnableDynamicSize>
    nrf24l01EnableDynamicPipeSize(&nrf24l01, 0x3f);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	213f      	movs	r1, #63	; 0x3f
 8005f90:	f7ff ff26 	bl	8005de0 <nrf24l01EnableDynamicPipeSize>

    nrf24l01SetTXAddress(&nrf24l01, addr);
 8005f94:	4620      	mov	r0, r4
 8005f96:	4919      	ldr	r1, [pc, #100]	; (8005ffc <initNRF24L01+0xec>)
 8005f98:	f7ff ff12 	bl	8005dc0 <nrf24l01SetTXAddress>
    nrf24l01SetRXAddress(&nrf24l01, 0, addr);
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <initNRF24L01+0xec>)
 8005fa2:	f7ff feed 	bl	8005d80 <nrf24l01SetRXAddress>
void nrf24l01SetPayloadSize(NRF24L01Driver *nrfp, uint8_t pipe, uint8_t size)
{
    if ((pipe > 5) || (size > 32))
        return;

    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
 8005fa6:	2111      	movs	r1, #17
 8005fa8:	2220      	movs	r2, #32
 8005faa:	4620      	mov	r0, r4
 8005fac:	f7ff fe48 	bl	8005c40 <nrf24l01WriteRegister>

    nrf24l01SetTXAddress(&nrf24l01, addr);
    nrf24l01SetRXAddress(&nrf24l01, 0, addr);
    nrf24l01SetPayloadSize(&nrf24l01, 0, 32);

    nrf24l01FlushRX(&nrf24l01);
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff6d 	bl	8005e90 <nrf24l01FlushRX>
    nrf24l01FlushTX(&nrf24l01);
 8005fb6:	4620      	mov	r0, r4
 8005fb8:	f7ff ff8a 	bl	8005ed0 <nrf24l01FlushTX>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	2107      	movs	r1, #7
 8005fc0:	2270      	movs	r2, #112	; 0x70
 8005fc2:	f7ff fe3d 	bl	8005c40 <nrf24l01WriteRegister>

    nrf24l01FlushRX(&nrf24l01);
    nrf24l01FlushTX(&nrf24l01);
    nrf24l01ClearIRQ(&nrf24l01, NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT);

    nrf24l01PowerUp(&nrf24l01);
 8005fc6:	4620      	mov	r0, r4
}
 8005fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    nrf24l01FlushRX(&nrf24l01);
    nrf24l01FlushTX(&nrf24l01);
    nrf24l01ClearIRQ(&nrf24l01, NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT);

    nrf24l01PowerUp(&nrf24l01);
 8005fcc:	f7ff bec8 	b.w	8005d60 <nrf24l01PowerUp>
 8005fd0:	40020000 	.word	0x40020000
 8005fd4:	40020400 	.word	0x40020400
 8005fd8:	40020800 	.word	0x40020800
 8005fdc:	08007d90 	.word	0x08007d90
 8005fe0:	200012ec 	.word	0x200012ec
 8005fe4:	08007ca0 	.word	0x08007ca0
 8005fe8:	20001010 	.word	0x20001010
 8005fec:	08007cc0 	.word	0x08007cc0
 8005ff0:	20001a88 	.word	0x20001a88
 8005ff4:	20001a5c 	.word	0x20001a5c
 8005ff8:	08007cb0 	.word	0x08007cb0
 8005ffc:	08007d80 	.word	0x08007d80

08006000 <nrf24l01GetSize>:
    spiSend(nrfp->config->spip, 1, &op);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
 8006000:	b510      	push	{r4, lr}
 8006002:	b082      	sub	sp, #8
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 8006004:	2360      	movs	r3, #96	; 0x60
 8006006:	f88d 3000 	strb.w	r3, [sp]
    uint8_t data[2] = {0, 0};

    spiSelect(nrfp->config->spip);
 800600a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 800600e:	2300      	movs	r3, #0
    spiSend(nrfp->config->spip, 1, &op);
    spiUnselect(nrfp->config->spip);
}

uint8_t nrf24l01GetSize(NRF24L01Driver *nrfp)
{
 8006010:	4604      	mov	r4, r0
    uint8_t op[2] = {NRF24L01_CMD_R_RX_PL_WID, 0};
 8006012:	f88d 3001 	strb.w	r3, [sp, #1]
    uint8_t data[2] = {0, 0};
 8006016:	f88d 3004 	strb.w	r3, [sp, #4]
 800601a:	f88d 3005 	strb.w	r3, [sp, #5]

    spiSelect(nrfp->config->spip);
 800601e:	6810      	ldr	r0, [r2, #0]
 8006020:	f7fc faa6 	bl	8002570 <spiSelect>
    spiExchange(nrfp->config->spip, 2, op, data);
 8006024:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006028:	2102      	movs	r1, #2
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	466a      	mov	r2, sp
 800602e:	ab01      	add	r3, sp, #4
 8006030:	f7fc fabe 	bl	80025b0 <spiExchange>
    spiUnselect(nrfp->config->spip);
 8006034:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	f7fc faa9 	bl	8002590 <spiUnselect>

    return data[1];
}
 800603e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8006042:	b002      	add	sp, #8
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
	...

08006050 <nrf24l01EnterRX>:

void nrf24l01EnterRX(NRF24L01Driver *nrfp)
{
 8006050:	b538      	push	{r3, r4, r5, lr}
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006052:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8006056:	8919      	ldrh	r1, [r3, #8]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	2401      	movs	r4, #1
 800605c:	fa04 f301 	lsl.w	r3, r4, r1
 8006060:	b29b      	uxth	r3, r3
 8006062:	8353      	strh	r3, [r2, #26]

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006064:	2100      	movs	r1, #0

    return data[1];
}

void nrf24l01EnterRX(NRF24L01Driver *nrfp)
{
 8006066:	4605      	mov	r5, r0
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006068:	f7ff fe0a 	bl	8005c80 <nrf24l01ReadRegister>
    reg |= NRF24L01_PRIM_RX;
 800606c:	ea40 0204 	orr.w	r2, r0, r4
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4628      	mov	r0, r5
 8006074:	2100      	movs	r1, #0
 8006076:	f7ff fde3 	bl	8005c40 <nrf24l01WriteRegister>

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
 800607a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800607e:	891a      	ldrh	r2, [r3, #8]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4094      	lsls	r4, r2
 8006084:	b2a4      	uxth	r4, r4
 8006086:	831c      	strh	r4, [r3, #24]
 8006088:	bd38      	pop	{r3, r4, r5, pc}
 800608a:	bf00      	nop
 800608c:	0000      	movs	r0, r0
	...

08006090 <readt>:

    return sended;
}

static size_t readt(void *instance, uint8_t *bp, size_t n, systime_t time)
{
 8006090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 8006094:	f8d0 9004 	ldr.w	r9, [r0, #4]

    return sended;
}

static size_t readt(void *instance, uint8_t *bp, size_t n, systime_t time)
{
 8006098:	b089      	sub	sp, #36	; 0x24
 800609a:	f509 7490 	add.w	r4, r9, #288	; 0x120
 800609e:	464d      	mov	r5, r9
 80060a0:	9401      	str	r4, [sp, #4]
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
    {
        if (&nrfp->channels[i] == instance)
 80060a2:	42a8      	cmp	r0, r5
 80060a4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80060a8:	d006      	beq.n	80060b8 <readt+0x28>
{
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
 80060aa:	42a5      	cmp	r5, r4
 80060ac:	d1f9      	bne.n	80060a2 <readt+0x12>
            break;
        }
    }

    if (!chp)
        return 0;
 80060ae:	2600      	movs	r6, #0

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return received;
}
 80060b0:	4630      	mov	r0, r6
 80060b2:	b009      	add	sp, #36	; 0x24
 80060b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	4604      	mov	r4, r0
 */
static inline void chEvtRegisterMask(event_source_t *esp,
                                     event_listener_t *elp,
                                     eventmask_t events) {

  chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c0:	9801      	ldr	r0, [sp, #4]
 80060c2:	4617      	mov	r7, r2
 80060c4:	468a      	mov	sl, r1
 80060c6:	2201      	movs	r2, #1
 80060c8:	a903      	add	r1, sp, #12
 80060ca:	f7fb fb79 	bl	80017c0 <chEvtRegisterMaskWithFlags>

    uint16_t received = 0;

    chEvtRegisterMask(&nrfp->eventSource, &nrfListener, NRF24L01_EVENT_IRQ);

    nrf24l01EnterRX(nrfp);
 80060ce:	4648      	mov	r0, r9
 80060d0:	f7ff ffbe 	bl	8006050 <nrf24l01EnterRX>
 80060d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    }

    if (!chp)
        return 0;

    uint16_t received = 0;
 80060d8:	2500      	movs	r5, #0

    chEvtRegisterMask(&nrfp->eventSource, &nrfListener, NRF24L01_EVENT_IRQ);

    nrf24l01EnterRX(nrfp);

    while (received < n)
 80060da:	42bd      	cmp	r5, r7
 80060dc:	462e      	mov	r6, r5
 80060de:	d220      	bcs.n	8006122 <readt+0x92>
    {
        if (chp->rxBufCount)
 80060e0:	b393      	cbz	r3, 8006148 <readt+0xb8>
        {
            uint8_t len = (n - received > chp->rxBufCount) ? chp->rxBufCount : n - received;
 80060e2:	1b7e      	subs	r6, r7, r5
 80060e4:	429e      	cmp	r6, r3
 80060e6:	bf28      	it	cs
 80060e8:	461e      	movcs	r6, r3
 80060ea:	fa5f fe86 	uxtb.w	lr, r6
            for (uint8_t i = 0; i < len; i++)
 80060ee:	b176      	cbz	r6, 800610e <readt+0x7e>
 80060f0:	eb0a 0005 	add.w	r0, sl, r5
 80060f4:	2100      	movs	r1, #0
                bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
 80060f6:	1862      	adds	r2, r4, r1
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	3101      	adds	r1, #1
 80060fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006100:	f800 3b01 	strb.w	r3, [r0], #1
    while (received < n)
    {
        if (chp->rxBufCount)
        {
            uint8_t len = (n - received > chp->rxBufCount) ? chp->rxBufCount : n - received;
            for (uint8_t i = 0; i < len; i++)
 8006104:	b2cb      	uxtb	r3, r1
 8006106:	459e      	cmp	lr, r3
 8006108:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800610c:	d8f3      	bhi.n	80060f6 <readt+0x66>
                bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
            chp->rxBufCount -= len;
            received += len;
 800610e:	4435      	add	r5, r6
 8006110:	b2ad      	uxth	r5, r5
        if (chp->rxBufCount)
        {
            uint8_t len = (n - received > chp->rxBufCount) ? chp->rxBufCount : n - received;
            for (uint8_t i = 0; i < len; i++)
                bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
            chp->rxBufCount -= len;
 8006112:	ebce 0303 	rsb	r3, lr, r3
 8006116:	b2db      	uxtb	r3, r3

    chEvtRegisterMask(&nrfp->eventSource, &nrfListener, NRF24L01_EVENT_IRQ);

    nrf24l01EnterRX(nrfp);

    while (received < n)
 8006118:	42bd      	cmp	r5, r7
        if (chp->rxBufCount)
        {
            uint8_t len = (n - received > chp->rxBufCount) ? chp->rxBufCount : n - received;
            for (uint8_t i = 0; i < len; i++)
                bp[received + i] = chp->rxBuf[(32 - chp->rxBufCount) + i];
            chp->rxBufCount -= len;
 800611a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    chEvtRegisterMask(&nrfp->eventSource, &nrfListener, NRF24L01_EVENT_IRQ);

    nrf24l01EnterRX(nrfp);

    while (received < n)
 800611e:	462e      	mov	r6, r5
 8006120:	d3de      	bcc.n	80060e0 <readt+0x50>

        if (status_reg & NRF24L01_RX_DR)
            nrf24l01ClearIRQ(nrfp, NRF24L01_RX_DR);
    }

    if (chp->rxBufCount)
 8006122:	2b00      	cmp	r3, #0
 8006124:	f040 808b 	bne.w	800623e <readt+0x1ae>
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006128:	f8d9 3124 	ldr.w	r3, [r9, #292]	; 0x124

    if (chp->rxBufCount)
        chEvtBroadcastFlags(&chp->event, CHN_INPUT_AVAILABLE);

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);
 800612c:	9801      	ldr	r0, [sp, #4]
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800612e:	8919      	ldrh	r1, [r3, #8]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	2301      	movs	r3, #1
 8006134:	408b      	lsls	r3, r1
 8006136:	b29b      	uxth	r3, r3

    if (chp->rxBufCount)
        chEvtBroadcastFlags(&chp->event, CHN_INPUT_AVAILABLE);

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);
 8006138:	a903      	add	r1, sp, #12
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800613a:	8353      	strh	r3, [r2, #26]

    if (chp->rxBufCount)
        chEvtBroadcastFlags(&chp->event, CHN_INPUT_AVAILABLE);

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);
 800613c:	f7fb fb58 	bl	80017f0 <chEvtUnregister>

    return received;
}
 8006140:	4630      	mov	r0, r6
 8006142:	b009      	add	sp, #36	; 0x24
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return nrf24l01WriteRegister(nrfp, NRF24L01_REG_RX_PW_P0 + pipe, size);
}

uint8_t nrf24l01GetFIFOStatus(NRF24L01Driver *nrfp)
{
    return nrf24l01ReadRegister(nrfp, NRF24L01_REG_FIFO_STATUS);
 8006148:	4648      	mov	r0, r9
 800614a:	2117      	movs	r1, #23
 800614c:	f7ff fd98 	bl	8005c80 <nrf24l01ReadRegister>
            received += len;
            continue;
        }
        uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);

        if (!(status_reg & NRF24L01_FIFO_RX_EMPTY))
 8006150:	07c2      	lsls	r2, r0, #31
 8006152:	d444      	bmi.n	80061de <readt+0x14e>
        {
            uint8_t pipe = (status_reg >> 1) & 0x7;
 8006154:	f3c0 0342 	ubfx	r3, r0, #1, #3
            uint8_t packetSize = nrf24l01GetSize(nrfp);
 8006158:	4648      	mov	r0, r9
        }
        uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);

        if (!(status_reg & NRF24L01_FIFO_RX_EMPTY))
        {
            uint8_t pipe = (status_reg >> 1) & 0x7;
 800615a:	f88d 300b 	strb.w	r3, [sp, #11]
            uint8_t packetSize = nrf24l01GetSize(nrfp);
 800615e:	f7ff ff4f 	bl	8006000 <nrf24l01GetSize>
            struct NRF24L01Channel *rxcp;
            rxcp = &nrfp->channels[pipe];
 8006162:	f89d 600b 	ldrb.w	r6, [sp, #11]
 8006166:	ea4f 0b46 	mov.w	fp, r6, lsl #1
 800616a:	eb0b 0306 	add.w	r3, fp, r6
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	eb09 0203 	add.w	r2, r9, r3

            if (rxcp != instance)
 8006174:	4294      	cmp	r4, r2
        uint8_t status_reg = nrf24l01GetFIFOStatus(nrfp);

        if (!(status_reg & NRF24L01_FIFO_RX_EMPTY))
        {
            uint8_t pipe = (status_reg >> 1) & 0x7;
            uint8_t packetSize = nrf24l01GetSize(nrfp);
 8006176:	4680      	mov	r8, r0
            struct NRF24L01Channel *rxcp;
            rxcp = &nrfp->channels[pipe];

            if (rxcp != instance)
 8006178:	d059      	beq.n	800622e <readt+0x19e>
            {
                if ((rxcp->rxBufCount + packetSize > 32) || !rxcp->rxBufCount)
 800617a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800617e:	1819      	adds	r1, r3, r0
 8006180:	2920      	cmp	r1, #32
 8006182:	dc3d      	bgt.n	8006200 <readt+0x170>
 8006184:	2b00      	cmp	r3, #0
 8006186:	d03b      	beq.n	8006200 <readt+0x170>
 8006188:	f1c3 0320 	rsb	r3, r3, #32
                    rxcp->rxBufCount = packetSize;
                }
                else
                {
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
 800618c:	1a1b      	subs	r3, r3, r0
 800618e:	b2db      	uxtb	r3, r3
 8006190:	f1c0 0e20 	rsb	lr, r0, #32
 8006194:	459e      	cmp	lr, r3
                        rxcp->rxBuf[i] = rxcp->rxBuf[i + packetSize];
 8006196:	bfc8      	it	gt
 8006198:	eb02 0c00 	addgt.w	ip, r2, r0
                    rxcp->rxBufCount = packetSize;
                }
                else
                {
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
 800619c:	dd08      	ble.n	80061b0 <readt+0x120>
                        rxcp->rxBuf[i] = rxcp->rxBuf[i + packetSize];
 800619e:	eb0c 0003 	add.w	r0, ip, r3
 80061a2:	18d1      	adds	r1, r2, r3
                    rxcp->rxBufCount = packetSize;
                }
                else
                {
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
 80061a4:	3301      	adds	r3, #1
 80061a6:	b2db      	uxtb	r3, r3
                        rxcp->rxBuf[i] = rxcp->rxBuf[i + packetSize];
 80061a8:	7a00      	ldrb	r0, [r0, #8]
 80061aa:	7208      	strb	r0, [r1, #8]
                    rxcp->rxBufCount = packetSize;
                }
                else
                {
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
 80061ac:	4573      	cmp	r3, lr
 80061ae:	dbf6      	blt.n	800619e <readt+0x10e>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
 80061b0:	f1b8 0f20 	cmp.w	r8, #32
 80061b4:	d952      	bls.n	800625c <readt+0x1cc>
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
                        rxcp->rxBuf[i] = rxcp->rxBuf[i + packetSize];

                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + 32 - packetSize, &pipe);
                    rxcp->rxBufCount += packetSize;
 80061b6:	eb0b 0306 	add.w	r3, fp, r6
 80061ba:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 80061be:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80061c2:	4490      	add	r8, r2
 80061c4:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
                }
                chEvtBroadcastFlags(&rxcp->event, CHN_INPUT_AVAILABLE);
 80061c8:	eb0b 0006 	add.w	r0, fp, r6
 80061cc:	eb09 1000 	add.w	r0, r9, r0, lsl #4
 80061d0:	302c      	adds	r0, #44	; 0x2c
 80061d2:	2104      	movs	r1, #4
 80061d4:	f7fb fb54 	bl	8001880 <chEvtBroadcastFlags>
 80061d8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80061dc:	e77d      	b.n	80060da <readt+0x4a>
                }
            }
            continue;
        }

        if (!chEvtWaitOneTimeout(NRF24L01_EVENT_IRQ, time))
 80061de:	2001      	movs	r0, #1
 80061e0:	9900      	ldr	r1, [sp, #0]
 80061e2:	f7fb fb5d 	bl	80018a0 <chEvtWaitOneTimeout>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d045      	beq.n	8006276 <readt+0x1e6>
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
            nrf24l01EnterStandby(nrfp);
            return received;
        }

        status_reg = nrf24l01GetStatus(nrfp);
 80061ea:	4648      	mov	r0, r9
 80061ec:	f7ff fd98 	bl	8005d20 <nrf24l01GetStatus>

        if (status_reg & NRF24L01_RX_DR)
 80061f0:	0643      	lsls	r3, r0, #25
 80061f2:	d5f1      	bpl.n	80061d8 <readt+0x148>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 80061f4:	4648      	mov	r0, r9
 80061f6:	2107      	movs	r1, #7
 80061f8:	2240      	movs	r2, #64	; 0x40
 80061fa:	f7ff fd21 	bl	8005c40 <nrf24l01WriteRegister>
 80061fe:	e7eb      	b.n	80061d8 <readt+0x148>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
 8006200:	f1b8 0f20 	cmp.w	r8, #32
 8006204:	d906      	bls.n	8006214 <readt+0x184>
            {
                if ((rxcp->rxBufCount + packetSize > 32) || !rxcp->rxBufCount)
                {
                    //Overrun error OR empty buffer
                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + 32 - packetSize, &pipe);
                    rxcp->rxBufCount = packetSize;
 8006206:	eb0b 0306 	add.w	r3, fp, r6
 800620a:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 800620e:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
 8006212:	e7d9      	b.n	80061c8 <readt+0x138>
            if (rxcp != instance)
            {
                if ((rxcp->rxBufCount + packetSize > 32) || !rxcp->rxBufCount)
                {
                    //Overrun error OR empty buffer
                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + 32 - packetSize, &pipe);
 8006214:	eb0b 0206 	add.w	r2, fp, r6
 8006218:	ebc8 1202 	rsb	r2, r8, r2, lsl #4
 800621c:	3228      	adds	r2, #40	; 0x28
 800621e:	444a      	add	r2, r9
 8006220:	4648      	mov	r0, r9
 8006222:	4641      	mov	r1, r8
 8006224:	f10d 030b 	add.w	r3, sp, #11
 8006228:	f7ff fcb2 	bl	8005b90 <nrf24l01ReadPayload.part.2>
 800622c:	e7eb      	b.n	8006206 <readt+0x176>
                }
                chEvtBroadcastFlags(&rxcp->event, CHN_INPUT_AVAILABLE);
            }
            else
            {
                if (packetSize <= n - received)
 800622e:	1b7a      	subs	r2, r7, r5
 8006230:	4290      	cmp	r0, r2
 8006232:	d80a      	bhi.n	800624a <readt+0x1ba>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
 8006234:	2820      	cmp	r0, #32
 8006236:	d939      	bls.n	80062ac <readt+0x21c>
            else
            {
                if (packetSize <= n - received)
                {
                    nrf24l01ReadPayload(nrfp, packetSize, bp + received, &pipe);
                    received += packetSize;
 8006238:	4445      	add	r5, r8
 800623a:	b2ad      	uxth	r5, r5
 800623c:	e7cc      	b.n	80061d8 <readt+0x148>
        if (status_reg & NRF24L01_RX_DR)
            nrf24l01ClearIRQ(nrfp, NRF24L01_RX_DR);
    }

    if (chp->rxBufCount)
        chEvtBroadcastFlags(&chp->event, CHN_INPUT_AVAILABLE);
 800623e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8006242:	2104      	movs	r1, #4
 8006244:	f7fb fb1c 	bl	8001880 <chEvtBroadcastFlags>
 8006248:	e76e      	b.n	8006128 <readt+0x98>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_DYNPD, reg);
}

void nrf24l01ReadPayload(NRF24L01Driver *nrfp, uint8_t size, uint8_t *data, uint8_t *pipe)
{
    if (size > 32)
 800624a:	2820      	cmp	r0, #32
 800624c:	d923      	bls.n	8006296 <readt+0x206>
                    received += packetSize;
                }
                else
                {
                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + (32 - packetSize), &pipe);
                    rxcp->rxBufCount = packetSize;
 800624e:	eb0b 0306 	add.w	r3, fp, r6
 8006252:	eb09 1303 	add.w	r3, r9, r3, lsl #4
 8006256:	f883 8028 	strb.w	r8, [r3, #40]	; 0x28
 800625a:	e7bd      	b.n	80061d8 <readt+0x148>
                {
                    //Move buffer and append to end
                    for (uint8_t i = (32 - (rxcp->rxBufCount + packetSize)); i < 32 - packetSize; i++)
                        rxcp->rxBuf[i] = rxcp->rxBuf[i + packetSize];

                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + 32 - packetSize, &pipe);
 800625c:	eb0b 0206 	add.w	r2, fp, r6
 8006260:	eb0e 1202 	add.w	r2, lr, r2, lsl #4
 8006264:	3208      	adds	r2, #8
 8006266:	444a      	add	r2, r9
 8006268:	4648      	mov	r0, r9
 800626a:	4641      	mov	r1, r8
 800626c:	f10d 030b 	add.w	r3, sp, #11
 8006270:	f7ff fc8e 	bl	8005b90 <nrf24l01ReadPayload.part.2>
 8006274:	e79f      	b.n	80061b6 <readt+0x126>
            continue;
        }

        if (!chEvtWaitOneTimeout(NRF24L01_EVENT_IRQ, time))
        {
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
 8006276:	9801      	ldr	r0, [sp, #4]
 8006278:	a903      	add	r1, sp, #12
 800627a:	f7fb fab9 	bl	80017f0 <chEvtUnregister>
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800627e:	f8d9 3124 	ldr.w	r3, [r9, #292]	; 0x124
 8006282:	8919      	ldrh	r1, [r3, #8]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	2301      	movs	r3, #1
 8006288:	408b      	lsls	r3, r1
 800628a:	b29b      	uxth	r3, r3

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return received;
}
 800628c:	4630      	mov	r0, r6
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800628e:	8353      	strh	r3, [r2, #26]

    nrf24l01EnterStandby(nrfp);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return received;
}
 8006290:	b009      	add	sp, #36	; 0x24
 8006292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    nrf24l01ReadPayload(nrfp, packetSize, bp + received, &pipe);
                    received += packetSize;
                }
                else
                {
                    nrf24l01ReadPayload(nrfp, packetSize, rxcp->rxBuf + (32 - packetSize), &pipe);
 8006296:	1a1b      	subs	r3, r3, r0
 8006298:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800629c:	444a      	add	r2, r9
 800629e:	4648      	mov	r0, r9
 80062a0:	4641      	mov	r1, r8
 80062a2:	f10d 030b 	add.w	r3, sp, #11
 80062a6:	f7ff fc73 	bl	8005b90 <nrf24l01ReadPayload.part.2>
 80062aa:	e7d0      	b.n	800624e <readt+0x1be>
 80062ac:	4648      	mov	r0, r9
 80062ae:	4641      	mov	r1, r8
 80062b0:	eb0a 0205 	add.w	r2, sl, r5
 80062b4:	f10d 030b 	add.w	r3, sp, #11
 80062b8:	f7ff fc6a 	bl	8005b90 <nrf24l01ReadPayload.part.2>
 80062bc:	e7bc      	b.n	8006238 <readt+0x1a8>
 80062be:	bf00      	nop

080062c0 <gett>:
        return Q_TIMEOUT;
    return Q_OK;
}

static msg_t gett(void *instance, systime_t time)
{
 80062c0:	b510      	push	{r4, lr}
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 80062c2:	6842      	ldr	r2, [r0, #4]
        return Q_TIMEOUT;
    return Q_OK;
}

static msg_t gett(void *instance, systime_t time)
{
 80062c4:	b082      	sub	sp, #8
 80062c6:	f502 7490 	add.w	r4, r2, #288	; 0x120
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
    {
        if (&nrfp->channels[i] == instance)
 80062ca:	4290      	cmp	r0, r2
 80062cc:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80062d0:	d005      	beq.n	80062de <gett+0x1e>
static msg_t gett(void *instance, systime_t time)
{
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    struct NRF24L01Channel *chp = NULL;

    for (int i = 0; i < 6; i++)
 80062d2:	42a2      	cmp	r2, r4
 80062d4:	d1f9      	bne.n	80062ca <gett+0xa>
            break;
        }
    }

    if (!chp)
        return Q_RESET;
 80062d6:	f06f 0001 	mvn.w	r0, #1
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
    }
}
 80062da:	b002      	add	sp, #8
 80062dc:	bd10      	pop	{r4, pc}
    }

    if (!chp)
        return Q_RESET;

    if (chp->rxBufCount)
 80062de:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 80062e2:	b142      	cbz	r2, 80062f6 <gett+0x36>
    {
        uint8_t b = chp->rxBuf[32 - chp->rxBufCount];
 80062e4:	1a83      	subs	r3, r0, r2
        chp->rxBufCount--;
 80062e6:	3a01      	subs	r2, #1
    if (!chp)
        return Q_RESET;

    if (chp->rxBufCount)
    {
        uint8_t b = chp->rxBuf[32 - chp->rxBufCount];
 80062e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
        chp->rxBufCount--;
 80062ec:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        return b;
 80062f0:	4618      	mov	r0, r3
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
    }
}
 80062f2:	b002      	add	sp, #8
 80062f4:	bd10      	pop	{r4, pc}
 80062f6:	460b      	mov	r3, r1
        return b;
    }
    else
    {
        uint8_t b;
        if (!readt(instance, &b, 1, time))
 80062f8:	2201      	movs	r2, #1
 80062fa:	f10d 0107 	add.w	r1, sp, #7
 80062fe:	f7ff fec7 	bl	8006090 <readt>
 8006302:	b918      	cbnz	r0, 800630c <gett+0x4c>
            return Q_TIMEOUT;
 8006304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return b;
    }
}
 8006308:	b002      	add	sp, #8
 800630a:	bd10      	pop	{r4, pc}
    else
    {
        uint8_t b;
        if (!readt(instance, &b, 1, time))
            return Q_TIMEOUT;
        return b;
 800630c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    }
}
 8006310:	b002      	add	sp, #8
 8006312:	bd10      	pop	{r4, pc}
	...

08006320 <get>:
    return putt(instance, b, TIME_INFINITE);
}

static msg_t get(void *instance)
{
    return gett(instance, TIME_INFINITE);
 8006320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006324:	f7ff bfcc 	b.w	80062c0 <gett>
	...

08006330 <read>:
    return writet(instance, bp, n, TIME_INFINITE);
}

static size_t read(void *instance, uint8_t *bp, size_t n)
{
    return readt(instance, bp, n, TIME_INFINITE);
 8006330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006334:	f7ff beac 	b.w	8006090 <readt>
	...

08006340 <nrf24l01EnterTX>:

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterTX(NRF24L01Driver *nrfp)
{
 8006340:	b538      	push	{r3, r4, r5, lr}
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006342:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
 8006346:	8919      	ldrh	r1, [r3, #8]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	2401      	movs	r4, #1
 800634c:	fa04 f301 	lsl.w	r3, r4, r1
 8006350:	b29b      	uxth	r3, r3
 8006352:	8353      	strh	r3, [r2, #26]

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006354:	2100      	movs	r1, #0

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterTX(NRF24L01Driver *nrfp)
{
 8006356:	4605      	mov	r5, r0
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);

    uint8_t reg = nrf24l01ReadRegister(nrfp, NRF24L01_REG_CONFIG);
 8006358:	f7ff fc92 	bl	8005c80 <nrf24l01ReadRegister>
    reg &= ~NRF24L01_PRIM_RX;
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_CONFIG, reg);
 800635c:	2100      	movs	r1, #0
 800635e:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8006362:	4628      	mov	r0, r5
 8006364:	f7ff fc6c 	bl	8005c40 <nrf24l01WriteRegister>

    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
 8006368:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 800636c:	891a      	ldrh	r2, [r3, #8]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4094      	lsls	r4, r2
 8006372:	b2a4      	uxth	r4, r4
 8006374:	831c      	strh	r4, [r3, #24]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
	...

08006380 <writet>:

    nrf24l01PowerUp(&nrf24l01);
}

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
 8006384:	6846      	ldr	r6, [r0, #4]
    if (instance != &nrfp->channels[0])
 8006386:	4286      	cmp	r6, r0

    nrf24l01PowerUp(&nrf24l01);
}

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
 8006388:	b087      	sub	sp, #28
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    if (instance != &nrfp->channels[0])
        return 0;
 800638a:	bf18      	it	ne
 800638c:	2500      	movne	r5, #0

static size_t writet(void *instance, const uint8_t *bp, size_t n, systime_t time)
{
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    if (instance != &nrfp->channels[0])
 800638e:	d003      	beq.n	8006398 <writet+0x18>

    chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
    chEvtUnregister(&nrfp->eventSource, &nrfListener);

    return sended;
}
 8006390:	4628      	mov	r0, r5
 8006392:	b007      	add	sp, #28
 8006394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    event_listener_t nrfListener;
    NRF24L01Driver *nrfp = ((struct NRF24L01Channel*)instance)->nrfp;
    if (instance != &nrfp->channels[0])
        return 0;

    chEvtRegisterMask(&nrfp->eventSource, &nrfListener, NRF24L01_EVENT_IRQ);
 8006398:	f506 7a90 	add.w	sl, r6, #288	; 0x120
 800639c:	4650      	mov	r0, sl
 800639e:	4699      	mov	r9, r3
 80063a0:	4617      	mov	r7, r2
 80063a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063a6:	2201      	movs	r2, #1
 80063a8:	4688      	mov	r8, r1
 80063aa:	a901      	add	r1, sp, #4
 80063ac:	f7fb fa08 	bl	80017c0 <chEvtRegisterMaskWithFlags>

    uint16_t sended = 0;
    uint8_t status_reg;

    status_reg = nrf24l01GetStatus(nrfp);
 80063b0:	4630      	mov	r0, r6
 80063b2:	f7ff fcb5 	bl	8005d20 <nrf24l01GetStatus>

    if (status_reg & NRF24L01_TX_FULL)
 80063b6:	f010 0501 	ands.w	r5, r0, #1
 80063ba:	d127      	bne.n	800640c <writet+0x8c>
    {
        chEvtUnregister(&nrfp->eventSource, &nrfListener);
        return 0;
    }

    nrf24l01EnterTX(nrfp);
 80063bc:	4630      	mov	r0, r6
 80063be:	f7ff ffbf 	bl	8006340 <nrf24l01EnterTX>

    while (sended < n)
 80063c2:	b34f      	cbz	r7, 8006418 <writet+0x98>
 80063c4:	46ab      	mov	fp, r5
 80063c6:	e005      	b.n	80063d4 <writet+0x54>
        }

        if (status_reg & NRF24L01_TX_DS)
            nrf24l01ClearIRQ(nrfp, NRF24L01_TX_DS);

        sended += psize;
 80063c8:	445c      	add	r4, fp
 80063ca:	fa1f fb84 	uxth.w	fp, r4
        return 0;
    }

    nrf24l01EnterTX(nrfp);

    while (sended < n)
 80063ce:	45bb      	cmp	fp, r7
 80063d0:	465d      	mov	r5, fp
 80063d2:	d222      	bcs.n	800641a <writet+0x9a>
    {
        uint8_t psize = (n - sended > 32) ? 32 : n - sended;
 80063d4:	1b7c      	subs	r4, r7, r5
 80063d6:	2c20      	cmp	r4, #32
 80063d8:	bf28      	it	cs
 80063da:	2420      	movcs	r4, #32
 80063dc:	b2e1      	uxtb	r1, r4
 80063de:	4630      	mov	r0, r6
 80063e0:	eb08 0205 	add.w	r2, r8, r5
 80063e4:	f7ff fc04 	bl	8005bf0 <nrf24l01WritePayload.part.3>

        nrf24l01WritePayload(nrfp, psize, bp + sended);

        if (!chEvtWaitOneTimeout(NRF24L01_EVENT_IRQ, time))
 80063e8:	2001      	movs	r0, #1
 80063ea:	4649      	mov	r1, r9
 80063ec:	f7fb fa58 	bl	80018a0 <chEvtWaitOneTimeout>
 80063f0:	b328      	cbz	r0, 800643e <writet+0xbe>
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
            nrf24l01EnterStandby(nrfp);
            return sended;
        }

        status_reg = nrf24l01GetStatus(nrfp);
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff fc94 	bl	8005d20 <nrf24l01GetStatus>

        if (status_reg & NRF24L01_MAX_RT)
 80063f8:	06c2      	lsls	r2, r0, #27
 80063fa:	d42d      	bmi.n	8006458 <writet+0xd8>
            nrf24l01FlushTX(nrfp);
            nrf24l01EnterStandby(nrfp);
            return sended;
        }

        if (status_reg & NRF24L01_TX_DS)
 80063fc:	0683      	lsls	r3, r0, #26
 80063fe:	d5e3      	bpl.n	80063c8 <writet+0x48>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 8006400:	4630      	mov	r0, r6
 8006402:	2107      	movs	r1, #7
 8006404:	2220      	movs	r2, #32
 8006406:	f7ff fc1b 	bl	8005c40 <nrf24l01WriteRegister>
 800640a:	e7dd      	b.n	80063c8 <writet+0x48>

    status_reg = nrf24l01GetStatus(nrfp);

    if (status_reg & NRF24L01_TX_FULL)
    {
        chEvtUnregister(&nrfp->eventSource, &nrfListener);
 800640c:	4650      	mov	r0, sl
 800640e:	a901      	add	r1, sp, #4
 8006410:	f7fb f9ee 	bl	80017f0 <chEvtUnregister>
        return 0;
 8006414:	2500      	movs	r5, #0
 8006416:	e7bb      	b.n	8006390 <writet+0x10>
    }

    nrf24l01EnterTX(nrfp);

    while (sended < n)
 8006418:	463d      	mov	r5, r7
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800641a:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800641e:	8919      	ldrh	r1, [r3, #8]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	2301      	movs	r3, #1
 8006424:	408b      	lsls	r3, r1
 8006426:	b29b      	uxth	r3, r3
        sended += psize;
    }

    nrf24l01EnterStandby(nrfp);

    chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
 8006428:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 800642c:	8353      	strh	r3, [r2, #26]
        sended += psize;
    }

    nrf24l01EnterStandby(nrfp);

    chEvtBroadcastFlags(&((struct NRF24L01Channel*)instance)->event, CHN_OUTPUT_EMPTY | CHN_TRANSMISSION_END);
 800642e:	2118      	movs	r1, #24
 8006430:	f7fb fa26 	bl	8001880 <chEvtBroadcastFlags>
    chEvtUnregister(&nrfp->eventSource, &nrfListener);
 8006434:	4650      	mov	r0, sl
 8006436:	a901      	add	r1, sp, #4
 8006438:	f7fb f9da 	bl	80017f0 <chEvtUnregister>

    return sended;
 800643c:	e7a8      	b.n	8006390 <writet+0x10>

        nrf24l01WritePayload(nrfp, psize, bp + sended);

        if (!chEvtWaitOneTimeout(NRF24L01_EVENT_IRQ, time))
        {
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
 800643e:	4650      	mov	r0, sl
 8006440:	a901      	add	r1, sp, #4
 8006442:	f7fb f9d5 	bl	80017f0 <chEvtUnregister>
    palSetPad(nrfp->config->cePort, nrfp->config->cePad);
}

void nrf24l01EnterStandby(NRF24L01Driver *nrfp)
{
    palClearPad(nrfp->config->cePort, nrfp->config->cePad);
 8006446:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800644a:	8919      	ldrh	r1, [r3, #8]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	2301      	movs	r3, #1
 8006450:	408b      	lsls	r3, r1
 8006452:	b29b      	uxth	r3, r3
 8006454:	8353      	strh	r3, [r2, #26]
        {
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
            nrf24l01ClearIRQ(nrfp, NRF24L01_MAX_RT);
            nrf24l01FlushTX(nrfp);
            nrf24l01EnterStandby(nrfp);
            return sended;
 8006456:	e79b      	b.n	8006390 <writet+0x10>

        status_reg = nrf24l01GetStatus(nrfp);

        if (status_reg & NRF24L01_MAX_RT)
        {
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
 8006458:	4650      	mov	r0, sl
 800645a:	a901      	add	r1, sp, #4
 800645c:	f7fb f9c8 	bl	80017f0 <chEvtUnregister>
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_RF_CH, reg);
}

void nrf24l01ClearIRQ(NRF24L01Driver *nrfp, uint8_t irq)
{
    nrf24l01WriteRegister(nrfp, NRF24L01_REG_STATUS, irq & (NRF24L01_RX_DR | NRF24L01_TX_DS | NRF24L01_MAX_RT));
 8006460:	4630      	mov	r0, r6
 8006462:	2107      	movs	r1, #7
 8006464:	2210      	movs	r2, #16
 8006466:	f7ff fbeb 	bl	8005c40 <nrf24l01WriteRegister>

        if (status_reg & NRF24L01_MAX_RT)
        {
            chEvtUnregister(&nrfp->eventSource, &nrfListener);
            nrf24l01ClearIRQ(nrfp, NRF24L01_MAX_RT);
            nrf24l01FlushTX(nrfp);
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff fd30 	bl	8005ed0 <nrf24l01FlushTX>
 8006470:	e7e9      	b.n	8006446 <writet+0xc6>
 8006472:	bf00      	nop
	...

08006480 <putt>:

    return received;
}

static msg_t putt(void *instance, uint8_t b, systime_t time)
{
 8006480:	b510      	push	{r4, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	ac02      	add	r4, sp, #8
 8006486:	4613      	mov	r3, r2
 8006488:	f804 1d01 	strb.w	r1, [r4, #-1]!
    if (!writet(instance, &b, 1, time))
 800648c:	2201      	movs	r2, #1
 800648e:	4621      	mov	r1, r4
 8006490:	f7ff ff76 	bl	8006380 <writet>
 8006494:	fab0 f080 	clz	r0, r0
 8006498:	0940      	lsrs	r0, r0, #5
        return Q_TIMEOUT;
    return Q_OK;
}
 800649a:	4240      	negs	r0, r0
 800649c:	b002      	add	sp, #8
 800649e:	bd10      	pop	{r4, pc}

080064a0 <put>:
{
    return readt(instance, bp, n, TIME_INFINITE);
}

static msg_t put(void *instance, uint8_t b)
{
 80064a0:	b510      	push	{r4, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	ac02      	add	r4, sp, #8
    return received;
}

static msg_t putt(void *instance, uint8_t b, systime_t time)
{
    if (!writet(instance, &b, 1, time))
 80064a6:	2201      	movs	r2, #1
 80064a8:	f804 1d01 	strb.w	r1, [r4, #-1]!
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7ff ff65 	bl	8006380 <writet>
 80064b6:	fab0 f080 	clz	r0, r0
 80064ba:	0940      	lsrs	r0, r0, #5
}

static msg_t put(void *instance, uint8_t b)
{
    return putt(instance, b, TIME_INFINITE);
}
 80064bc:	4240      	negs	r0, r0
 80064be:	b002      	add	sp, #8
 80064c0:	bd10      	pop	{r4, pc}
 80064c2:	bf00      	nop
	...

080064d0 <write>:
    }
}

static size_t write(void *instance, const uint8_t *bp, size_t n)
{
    return writet(instance, bp, n, TIME_INFINITE);
 80064d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064d4:	f7ff bf54 	b.w	8006380 <writet>
	...

080064e0 <esc_set>:
			PAL_STM32_OSPEED_MID1);

	esc_set_all(0);
}

void esc_set(uint8_t channel, double duty_cycle) {
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4604      	mov	r4, r0
	uint32_t cnt_val;

	cnt_val = (uint32_t)(duty_cycle * (uint32_t)TIM_CLOCK / (uint32_t)ESC_UPDATE_RATE);
 80064e4:	a31d      	add	r3, pc, #116	; (adr r3, 800655c <esc_set+0x7c>)
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	ec51 0b10 	vmov	r0, r1, d0
 80064ee:	f7fa f8bf 	bl	8000670 <__aeabi_dmul>
 80064f2:	a31c      	add	r3, pc, #112	; (adr r3, 8006564 <esc_set+0x84>)
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f7fa f9e4 	bl	80008c4 <__aeabi_ddiv>
 80064fc:	f7fa fb80 	bl	8000c00 <__aeabi_d2uiz>

	switch(channel) {
 8006500:	2c02      	cmp	r4, #2
}

void esc_set(uint8_t channel, double duty_cycle) {
	uint32_t cnt_val;

	cnt_val = (uint32_t)(duty_cycle * (uint32_t)TIM_CLOCK / (uint32_t)ESC_UPDATE_RATE);
 8006502:	4605      	mov	r5, r0

	switch(channel) {
 8006504:	d003      	beq.n	800650e <esc_set+0x2e>
 8006506:	d809      	bhi.n	800651c <esc_set+0x3c>
 8006508:	b10c      	cbz	r4, 800650e <esc_set+0x2e>
 800650a:	2c01      	cmp	r4, #1
 800650c:	d120      	bne.n	8006550 <esc_set+0x70>
	case 2:
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		break;

	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 800650e:	4621      	mov	r1, r4
 8006510:	462a      	mov	r2, r5
 8006512:	4811      	ldr	r0, [pc, #68]	; (8006558 <esc_set+0x78>)
		break;

	default:
		break;
	}
}
 8006514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	case 2:
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		break;

	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 8006518:	f7fb bdda 	b.w	80020d0 <pwmEnableChannel>
void esc_set(uint8_t channel, double duty_cycle) {
	uint32_t cnt_val;

	cnt_val = (uint32_t)(duty_cycle * (uint32_t)TIM_CLOCK / (uint32_t)ESC_UPDATE_RATE);

	switch(channel) {
 800651c:	2c03      	cmp	r4, #3
 800651e:	d0f6      	beq.n	800650e <esc_set+0x2e>
 8006520:	2cff      	cmp	r4, #255	; 0xff
 8006522:	d116      	bne.n	8006552 <esc_set+0x72>
	case 3:
		pwmEnableChannel(&PWMD5, 3, cnt_val);
		break;

	case ALL_CHANNELS:
		pwmEnableChannel(&PWMD5, 0, cnt_val);
 8006524:	462a      	mov	r2, r5
 8006526:	480c      	ldr	r0, [pc, #48]	; (8006558 <esc_set+0x78>)
 8006528:	2100      	movs	r1, #0
 800652a:	f7fb fdd1 	bl	80020d0 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 1, cnt_val);
 800652e:	462a      	mov	r2, r5
 8006530:	4809      	ldr	r0, [pc, #36]	; (8006558 <esc_set+0x78>)
 8006532:	2101      	movs	r1, #1
 8006534:	f7fb fdcc 	bl	80020d0 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 2, cnt_val);
 8006538:	462a      	mov	r2, r5
 800653a:	4807      	ldr	r0, [pc, #28]	; (8006558 <esc_set+0x78>)
 800653c:	2102      	movs	r1, #2
 800653e:	f7fb fdc7 	bl	80020d0 <pwmEnableChannel>
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 8006542:	462a      	mov	r2, r5
 8006544:	4804      	ldr	r0, [pc, #16]	; (8006558 <esc_set+0x78>)
 8006546:	2103      	movs	r1, #3
		break;

	default:
		break;
	}
}
 8006548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	case ALL_CHANNELS:
		pwmEnableChannel(&PWMD5, 0, cnt_val);
		pwmEnableChannel(&PWMD5, 1, cnt_val);
		pwmEnableChannel(&PWMD5, 2, cnt_val);
		pwmEnableChannel(&PWMD5, 3, cnt_val);
 800654c:	f7fb bdc0 	b.w	80020d0 <pwmEnableChannel>
 8006550:	bd38      	pop	{r3, r4, r5, pc}
 8006552:	bd38      	pop	{r3, r4, r5, pc}
 8006554:	f3af 8000 	nop.w
 8006558:	20001320 	.word	0x20001320
 800655c:	00000000 	.word	0x00000000
 8006560:	416312d0 	.word	0x416312d0
 8006564:	00000000 	.word	0x00000000
 8006568:	40c38800 	.word	0x40c38800
 800656c:	00000000 	.word	0x00000000

08006570 <esc_set_all>:
		break;
	}
}

void esc_set_all(double duty_cycle) {
	esc_set(ALL_CHANNELS, duty_cycle);
 8006570:	20ff      	movs	r0, #255	; 0xff
 8006572:	f7ff bfb5 	b.w	80064e0 <esc_set>
 8006576:	bf00      	nop
	...

08006580 <esc_init>:
		},
		0,
		0
};

void esc_init(void) {
 8006580:	b510      	push	{r4, lr}
	pwmStart(&PWMD5, &pwmcfg);

	palSetPadMode(GPIOA, 0,
 8006582:	4c11      	ldr	r4, [pc, #68]	; (80065c8 <esc_init+0x48>)
		0,
		0
};

void esc_init(void) {
	pwmStart(&PWMD5, &pwmcfg);
 8006584:	4811      	ldr	r0, [pc, #68]	; (80065cc <esc_init+0x4c>)
 8006586:	4912      	ldr	r1, [pc, #72]	; (80065d0 <esc_init+0x50>)
 8006588:	f7fb fd8a 	bl	80020a0 <pwmStart>

	palSetPadMode(GPIOA, 0,
 800658c:	4620      	mov	r0, r4
 800658e:	2101      	movs	r1, #1
 8006590:	f44f 7285 	mov.w	r2, #266	; 0x10a
 8006594:	f7fd fa04 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
	palSetPadMode(GPIOA, 1,
 8006598:	4620      	mov	r0, r4
 800659a:	2102      	movs	r1, #2
 800659c:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80065a0:	f7fd f9fe 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
	palSetPadMode(GPIOA, 2,
 80065a4:	4620      	mov	r0, r4
 80065a6:	2104      	movs	r1, #4
 80065a8:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80065ac:	f7fd f9f8 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);
	palSetPadMode(GPIOA, 3,
 80065b0:	4620      	mov	r0, r4
 80065b2:	2108      	movs	r1, #8
 80065b4:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80065b8:	f7fd f9f2 	bl	80039a0 <_pal_lld_setgroupmode>
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);

	esc_set_all(0);
 80065bc:	2000      	movs	r0, #0
}
 80065be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	palSetPadMode(GPIOA, 3,
			PAL_MODE_ALTERNATE(GPIO_AF_TIM5) |
			PAL_STM32_OTYPE_PUSHPULL |
			PAL_STM32_OSPEED_MID1);

	esc_set_all(0);
 80065c2:	f7ff bfd5 	b.w	8006570 <esc_set_all>
 80065c6:	bf00      	nop
 80065c8:	40020000 	.word	0x40020000
 80065cc:	20001320 	.word	0x20001320
 80065d0:	20000808 	.word	0x20000808
	...

080065e0 <controller_update>:
#include "hal.h"
#include "bno055.h"
#include "esc.h"

void controller_update(void)
{
 80065e0:	b500      	push	{lr}
	vector3 orientation = bno055_get_vector(VECTOR_EULER);
 80065e2:	201a      	movs	r0, #26
#include "hal.h"
#include "bno055.h"
#include "esc.h"

void controller_update(void)
{
 80065e4:	b08d      	sub	sp, #52	; 0x34
	vector3 orientation = bno055_get_vector(VECTOR_EULER);
 80065e6:	f7ff f983 	bl	80058f0 <bno055_get_vector>
    vector3 rotation = bno055_get_vector(VECTOR_GYROSCOPE);
 80065ea:	2014      	movs	r0, #20
 80065ec:	f7ff f980 	bl	80058f0 <bno055_get_vector>
 80065f0:	b00d      	add	sp, #52	; 0x34
 80065f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80065f6:	bf00      	nop
	...

08006600 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006600:	6802      	ldr	r2, [r0, #0]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8006602:	4937      	ldr	r1, [pc, #220]	; (80066e0 <DMA_DeInit+0xe0>)

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8006604:	2300      	movs	r3, #0
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006606:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006608:	f022 0201 	bic.w	r2, r2, #1

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800660c:	2421      	movs	r4, #33	; 0x21

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800660e:	4288      	cmp	r0, r1
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006610:	6002      	str	r2, [r0, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8006612:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8006614:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8006616:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8006618:	60c3      	str	r3, [r0, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800661a:	6103      	str	r3, [r0, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800661c:	6144      	str	r4, [r0, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800661e:	d04d      	beq.n	80066bc <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8006620:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <DMA_DeInit+0xe4>)
 8006622:	4298      	cmp	r0, r3
 8006624:	d035      	beq.n	8006692 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8006626:	4b30      	ldr	r3, [pc, #192]	; (80066e8 <DMA_DeInit+0xe8>)
 8006628:	4298      	cmp	r0, r3
 800662a:	d039      	beq.n	80066a0 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800662c:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <DMA_DeInit+0xec>)
 800662e:	4298      	cmp	r0, r3
 8006630:	d03d      	beq.n	80066ae <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8006632:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <DMA_DeInit+0xf0>)
 8006634:	4298      	cmp	r0, r3
 8006636:	d047      	beq.n	80066c8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8006638:	4b2e      	ldr	r3, [pc, #184]	; (80066f4 <DMA_DeInit+0xf4>)
 800663a:	4298      	cmp	r0, r3
 800663c:	d048      	beq.n	80066d0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 800663e:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <DMA_DeInit+0xf8>)
 8006640:	4298      	cmp	r0, r3
 8006642:	d01d      	beq.n	8006680 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8006644:	4b2d      	ldr	r3, [pc, #180]	; (80066fc <DMA_DeInit+0xfc>)
 8006646:	4298      	cmp	r0, r3
 8006648:	d01e      	beq.n	8006688 <DMA_DeInit+0x88>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 800664a:	4b2d      	ldr	r3, [pc, #180]	; (8006700 <DMA_DeInit+0x100>)
 800664c:	4298      	cmp	r0, r3
 800664e:	d043      	beq.n	80066d8 <DMA_DeInit+0xd8>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8006650:	4b2c      	ldr	r3, [pc, #176]	; (8006704 <DMA_DeInit+0x104>)
 8006652:	4298      	cmp	r0, r3
 8006654:	d01d      	beq.n	8006692 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8006656:	4b2c      	ldr	r3, [pc, #176]	; (8006708 <DMA_DeInit+0x108>)
 8006658:	4298      	cmp	r0, r3
 800665a:	d021      	beq.n	80066a0 <DMA_DeInit+0xa0>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800665c:	4b2b      	ldr	r3, [pc, #172]	; (800670c <DMA_DeInit+0x10c>)
 800665e:	4298      	cmp	r0, r3
 8006660:	d025      	beq.n	80066ae <DMA_DeInit+0xae>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8006662:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <DMA_DeInit+0x110>)
 8006664:	4298      	cmp	r0, r3
 8006666:	d02f      	beq.n	80066c8 <DMA_DeInit+0xc8>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8006668:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <DMA_DeInit+0x114>)
 800666a:	4298      	cmp	r0, r3
 800666c:	d030      	beq.n	80066d0 <DMA_DeInit+0xd0>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800666e:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <DMA_DeInit+0x118>)
 8006670:	4298      	cmp	r0, r3
 8006672:	d005      	beq.n	8006680 <DMA_DeInit+0x80>
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8006674:	4b29      	ldr	r3, [pc, #164]	; (800671c <DMA_DeInit+0x11c>)
 8006676:	4298      	cmp	r0, r3
 8006678:	d006      	beq.n	8006688 <DMA_DeInit+0x88>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800667a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800667e:	4770      	bx	lr
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream6)
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <DMA_DeInit+0x120>)
 8006682:	f843 2c94 	str.w	r2, [r3, #-148]
 8006686:	e7f8      	b.n	800667a <DMA_DeInit+0x7a>
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8006688:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800668c:	f843 2cac 	str.w	r2, [r3, #-172]
 8006690:	e7f3      	b.n	800667a <DMA_DeInit+0x7a>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream1)
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006692:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006696:	f843 2c20 	str.w	r2, [r3, #-32]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800669a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800669e:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream2)
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80066a0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80066a4:	f843 2c38 	str.w	r2, [r3, #-56]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80066a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ac:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream3)
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80066ae:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80066b2:	f843 2c50 	str.w	r2, [r3, #-80]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80066b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ba:	4770      	bx	lr

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80066bc:	4b19      	ldr	r3, [pc, #100]	; (8006724 <DMA_DeInit+0x124>)
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80066be:	f85d 4b04 	ldr.w	r4, [sp], #4

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80066c2:	223d      	movs	r2, #61	; 0x3d
 80066c4:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80066c6:	4770      	bx	lr
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream4)
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80066c8:	4a17      	ldr	r2, [pc, #92]	; (8006728 <DMA_DeInit+0x128>)
 80066ca:	f843 2c64 	str.w	r2, [r3, #-100]
 80066ce:	e7d4      	b.n	800667a <DMA_DeInit+0x7a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80066d0:	4a16      	ldr	r2, [pc, #88]	; (800672c <DMA_DeInit+0x12c>)
 80066d2:	f843 2c7c 	str.w	r2, [r3, #-124]
 80066d6:	e7d0      	b.n	800667a <DMA_DeInit+0x7a>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
  }
  else if (DMAy_Streamx == DMA2_Stream0)
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80066d8:	223d      	movs	r2, #61	; 0x3d
 80066da:	f843 2c08 	str.w	r2, [r3, #-8]
 80066de:	e7cc      	b.n	800667a <DMA_DeInit+0x7a>
 80066e0:	40026010 	.word	0x40026010
 80066e4:	40026028 	.word	0x40026028
 80066e8:	40026040 	.word	0x40026040
 80066ec:	40026058 	.word	0x40026058
 80066f0:	40026070 	.word	0x40026070
 80066f4:	40026088 	.word	0x40026088
 80066f8:	400260a0 	.word	0x400260a0
 80066fc:	400260b8 	.word	0x400260b8
 8006700:	40026410 	.word	0x40026410
 8006704:	40026428 	.word	0x40026428
 8006708:	40026440 	.word	0x40026440
 800670c:	40026458 	.word	0x40026458
 8006710:	40026470 	.word	0x40026470
 8006714:	40026488 	.word	0x40026488
 8006718:	400264a0 	.word	0x400264a0
 800671c:	400264b8 	.word	0x400264b8
 8006720:	203d0000 	.word	0x203d0000
 8006724:	40026000 	.word	0x40026000
 8006728:	2000003d 	.word	0x2000003d
 800672c:	20000f40 	.word	0x20000f40

08006730 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	b082      	sub	sp, #8
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006736:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006738:	9301      	str	r3, [sp, #4]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800673a:	68cb      	ldr	r3, [r1, #12]
 800673c:	694f      	ldr	r7, [r1, #20]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800673e:	698e      	ldr	r6, [r1, #24]
 8006740:	69cd      	ldr	r5, [r1, #28]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006742:	6a0c      	ldr	r4, [r1, #32]
 8006744:	6a4a      	ldr	r2, [r1, #36]	; 0x24
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8006746:	f8d0 c000 	ldr.w	ip, [r0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800674a:	f8df e050 	ldr.w	lr, [pc, #80]	; 800679c <DMA_Init+0x6c>
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800674e:	4698      	mov	r8, r3
 8006750:	680b      	ldr	r3, [r1, #0]
 8006752:	ea48 0803 	orr.w	r8, r8, r3
 8006756:	ea48 0707 	orr.w	r7, r8, r7
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800675a:	433e      	orrs	r6, r7
 800675c:	4335      	orrs	r5, r6
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800675e:	432c      	orrs	r4, r5
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006760:	9b01      	ldr	r3, [sp, #4]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006762:	6b0e      	ldr	r6, [r1, #48]	; 0x30
  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8006764:	690d      	ldr	r5, [r1, #16]
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8006766:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8006768:	4313      	orrs	r3, r2
 800676a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800676c:	684c      	ldr	r4, [r1, #4]
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800676e:	4313      	orrs	r3, r2
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006770:	6b8a      	ldr	r2, [r1, #56]	; 0x38
  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006772:	ea0c 0e0e 	and.w	lr, ip, lr
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8006776:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8006778:	ea43 030e 	orr.w	r3, r3, lr
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800677c:	6003      	str	r3, [r0, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800677e:	6942      	ldr	r2, [r0, #20]
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006780:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8006782:	6889      	ldr	r1, [r1, #8]
  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006784:	f022 0207 	bic.w	r2, r2, #7

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8006788:	4333      	orrs	r3, r6
 800678a:	4313      	orrs	r3, r2

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800678c:	6143      	str	r3, [r0, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800678e:	6045      	str	r5, [r0, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8006790:	6084      	str	r4, [r0, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8006792:	60c1      	str	r1, [r0, #12]
}
 8006794:	b002      	add	sp, #8
 8006796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679a:	bf00      	nop
 800679c:	f01c803f 	.word	0xf01c803f

080067a0 <DMA_Cmd>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80067a0:	6803      	ldr	r3, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80067a2:	b919      	cbnz	r1, 80067ac <DMA_Cmd+0xc>
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	6003      	str	r3, [r0, #0]
 80067aa:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	6003      	str	r3, [r0, #0]
 80067b2:	4770      	bx	lr
	...

080067c0 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <RCC_AHB1PeriphClockCmd+0x14>)
 80067c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80067c4:	b919      	cbnz	r1, 80067ce <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80067c6:	ea23 0000 	bic.w	r0, r3, r0
 80067ca:	6310      	str	r0, [r2, #48]	; 0x30
 80067cc:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80067ce:	4318      	orrs	r0, r3
 80067d0:	6310      	str	r0, [r2, #48]	; 0x30
 80067d2:	4770      	bx	lr
 80067d4:	40023800 	.word	0x40023800
	...

080067e0 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80067e0:	4a04      	ldr	r2, [pc, #16]	; (80067f4 <RCC_APB1PeriphClockCmd+0x14>)
 80067e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80067e4:	b919      	cbnz	r1, 80067ee <RCC_APB1PeriphClockCmd+0xe>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80067e6:	ea23 0000 	bic.w	r0, r3, r0
 80067ea:	6410      	str	r0, [r2, #64]	; 0x40
 80067ec:	4770      	bx	lr
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80067ee:	4318      	orrs	r0, r3
 80067f0:	6410      	str	r0, [r2, #64]	; 0x40
 80067f2:	4770      	bx	lr
 80067f4:	40023800 	.word	0x40023800
	...

08006800 <TIM_TimeBaseInit>:
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8006800:	4a22      	ldr	r2, [pc, #136]	; (800688c <TIM_TimeBaseInit+0x8c>)
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006802:	6803      	ldr	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8006804:	4290      	cmp	r0, r2
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8006806:	b29b      	uxth	r3, r3

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8006808:	d012      	beq.n	8006830 <TIM_TimeBaseInit+0x30>
 800680a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800680e:	4290      	cmp	r0, r2
 8006810:	d00e      	beq.n	8006830 <TIM_TimeBaseInit+0x30>
 8006812:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006816:	d00b      	beq.n	8006830 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8006818:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 800681c:	4290      	cmp	r0, r2
 800681e:	d007      	beq.n	8006830 <TIM_TimeBaseInit+0x30>
 8006820:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006824:	4290      	cmp	r0, r2
 8006826:	d003      	beq.n	8006830 <TIM_TimeBaseInit+0x30>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8006828:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800682c:	4290      	cmp	r0, r2
 800682e:	d103      	bne.n	8006838 <TIM_TimeBaseInit+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006830:	884a      	ldrh	r2, [r1, #2]
  if((TIMx == TIM1) || (TIMx == TIM8)||
     (TIMx == TIM2) || (TIMx == TIM3)||
     (TIMx == TIM4) || (TIMx == TIM5)) 
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8006832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8006836:	4313      	orrs	r3, r2
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8006838:	4a15      	ldr	r2, [pc, #84]	; (8006890 <TIM_TimeBaseInit+0x90>)
 800683a:	4290      	cmp	r0, r2
 800683c:	d01e      	beq.n	800687c <TIM_TimeBaseInit+0x7c>
 800683e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006842:	4290      	cmp	r0, r2
 8006844:	d01a      	beq.n	800687c <TIM_TimeBaseInit+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006846:	890a      	ldrh	r2, [r1, #8]
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006848:	b470      	push	{r4, r5, r6}
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800684a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800684e:	4c0f      	ldr	r4, [pc, #60]	; (800688c <TIM_TimeBaseInit+0x8c>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006850:	684e      	ldr	r6, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006852:	880d      	ldrh	r5, [r1, #0]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8006854:	b29b      	uxth	r3, r3
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8006856:	4313      	orrs	r3, r2
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8006858:	42a0      	cmp	r0, r4
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800685a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800685c:	62c6      	str	r6, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800685e:	6285      	str	r5, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8006860:	d006      	beq.n	8006870 <TIM_TimeBaseInit+0x70>
 8006862:	4b0c      	ldr	r3, [pc, #48]	; (8006894 <TIM_TimeBaseInit+0x94>)
 8006864:	4298      	cmp	r0, r3
 8006866:	d003      	beq.n	8006870 <TIM_TimeBaseInit+0x70>
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8006868:	2301      	movs	r3, #1
 800686a:	6143      	str	r3, [r0, #20]
}
 800686c:	bc70      	pop	{r4, r5, r6}
 800686e:	4770      	bx	lr
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006870:	7a8b      	ldrb	r3, [r1, #10]
 8006872:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8006874:	2301      	movs	r3, #1
 8006876:	6143      	str	r3, [r0, #20]
}
 8006878:	bc70      	pop	{r4, r5, r6}
 800687a:	4770      	bx	lr
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 800687c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800687e:	684a      	ldr	r2, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006880:	880b      	ldrh	r3, [r1, #0]
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006882:	62c2      	str	r2, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8006884:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8006886:	2301      	movs	r3, #1
 8006888:	6143      	str	r3, [r0, #20]
 800688a:	4770      	bx	lr
 800688c:	40010000 	.word	0x40010000
 8006890:	40001000 	.word	0x40001000
 8006894:	40010400 	.word	0x40010400
	...

080068a0 <TIM_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80068a0:	b929      	cbnz	r1, 80068ae <TIM_Cmd+0xe>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80068a2:	6802      	ldr	r2, [r0, #0]
 80068a4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80068a8:	4013      	ands	r3, r2
 80068aa:	6003      	str	r3, [r0, #0]
 80068ac:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80068ae:	6803      	ldr	r3, [r0, #0]
 80068b0:	f043 0301 	orr.w	r3, r3, #1
 80068b4:	6003      	str	r3, [r0, #0]
 80068b6:	4770      	bx	lr
	...

080068c0 <TIM_OC3Init>:
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80068c0:	6a02      	ldr	r2, [r0, #32]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80068c2:	f8b1 c000 	ldrh.w	ip, [r1]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80068c6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80068ca:	4013      	ands	r3, r2
 80068cc:	6203      	str	r3, [r0, #32]
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	6a02      	ldr	r2, [r0, #32]
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80068d4:	f8b1 e002 	ldrh.w	lr, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80068d8:	898c      	ldrh	r4, [r1, #12]
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068da:	6845      	ldr	r5, [r0, #4]
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80068dc:	4e1a      	ldr	r6, [pc, #104]	; (8006948 <TIM_OC3Init+0x88>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	69c7      	ldr	r7, [r0, #28]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80068e0:	f64f 53ff 	movw	r3, #65023	; 0xfdff
 80068e4:	4013      	ands	r3, r2
 80068e6:	ea4e 0404 	orr.w	r4, lr, r4
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80068ea:	f64f 728c 	movw	r2, #65420	; 0xff8c
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80068ee:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80068f2:	403a      	ands	r2, r7
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80068f4:	42b0      	cmp	r0, r6
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80068f6:	b29b      	uxth	r3, r3
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f8:	b2ad      	uxth	r5, r5
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80068fa:	ea42 020c 	orr.w	r2, r2, ip
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80068fe:	d009      	beq.n	8006914 <TIM_OC3Init+0x54>
 8006900:	4c12      	ldr	r4, [pc, #72]	; (800694c <TIM_OC3Init+0x8c>)
 8006902:	42a0      	cmp	r0, r4
 8006904:	d006      	beq.n	8006914 <TIM_OC3Init+0x54>
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8006906:	6889      	ldr	r1, [r1, #8]
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	6045      	str	r5, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690a:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800690c:	63c1      	str	r1, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690e:	6203      	str	r3, [r0, #32]
 8006910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8006914:	89cc      	ldrh	r4, [r1, #14]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8006916:	f8b1 8012 	ldrh.w	r8, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800691a:	8a0f      	ldrh	r7, [r1, #16]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800691c:	f8b1 c004 	ldrh.w	ip, [r1, #4]
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8006920:	f423 6e00 	bic.w	lr, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8006924:	ea4e 2e04 	orr.w	lr, lr, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8006928:	f64f 34ff 	movw	r4, #64511	; 0xfbff
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800692c:	f425 5640 	bic.w	r6, r5, #12288	; 0x3000
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8006930:	ea0e 0404 	and.w	r4, lr, r4
 8006934:	ea48 0507 	orr.w	r5, r8, r7
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006938:	ea44 230c 	orr.w	r3, r4, ip, lsl #8
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800693c:	ea46 1505 	orr.w	r5, r6, r5, lsl #4
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006940:	b29b      	uxth	r3, r3
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8006942:	b2ad      	uxth	r5, r5
 8006944:	e7df      	b.n	8006906 <TIM_OC3Init+0x46>
 8006946:	bf00      	nop
 8006948:	40010000 	.word	0x40010000
 800694c:	40010400 	.word	0x40010400

08006950 <TIM_OC3PreloadConfig>:

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8006950:	69c2      	ldr	r2, [r0, #28]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8006952:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 8006956:	4013      	ands	r3, r2

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8006958:	4319      	orrs	r1, r3
 800695a:	61c1      	str	r1, [r0, #28]
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop

08006960 <TIM_CtrlPWMOutputs>:
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8006960:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006962:	b919      	cbnz	r1, 800696c <TIM_CtrlPWMOutputs+0xc>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8006964:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006968:	6443      	str	r3, [r0, #68]	; 0x44
 800696a:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	6443      	str	r3, [r0, #68]	; 0x44
 8006972:	4770      	bx	lr
	...

08006980 <TIM_DMACmd>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006980:	b92a      	cbnz	r2, 800698e <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8006982:	68c3      	ldr	r3, [r0, #12]
 8006984:	43c9      	mvns	r1, r1
 8006986:	b289      	uxth	r1, r1
 8006988:	4019      	ands	r1, r3
 800698a:	60c1      	str	r1, [r0, #12]
 800698c:	4770      	bx	lr
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800698e:	68c3      	ldr	r3, [r0, #12]
 8006990:	4319      	orrs	r1, r3
 8006992:	60c1      	str	r1, [r0, #12]
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
	...

080069a0 <roundf>:
 80069a0:	b082      	sub	sp, #8
 80069a2:	ed8d 0a01 	vstr	s0, [sp, #4]
 80069a6:	9901      	ldr	r1, [sp, #4]
 80069a8:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 80069ac:	3b7f      	subs	r3, #127	; 0x7f
 80069ae:	2b16      	cmp	r3, #22
 80069b0:	dc10      	bgt.n	80069d4 <roundf+0x34>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	db1a      	blt.n	80069ec <roundf+0x4c>
 80069b6:	4a11      	ldr	r2, [pc, #68]	; (80069fc <roundf+0x5c>)
 80069b8:	fa42 f003 	asr.w	r0, r2, r3
 80069bc:	4208      	tst	r0, r1
 80069be:	d00b      	beq.n	80069d8 <roundf+0x38>
 80069c0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80069c4:	411a      	asrs	r2, r3
 80069c6:	440a      	add	r2, r1
 80069c8:	ea22 0200 	bic.w	r2, r2, r0
 80069cc:	ee00 2a10 	vmov	s0, r2
 80069d0:	b002      	add	sp, #8
 80069d2:	4770      	bx	lr
 80069d4:	2b80      	cmp	r3, #128	; 0x80
 80069d6:	d003      	beq.n	80069e0 <roundf+0x40>
 80069d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80069dc:	b002      	add	sp, #8
 80069de:	4770      	bx	lr
 80069e0:	eddd 7a01 	vldr	s15, [sp, #4]
 80069e4:	ee37 0aa7 	vadd.f32	s0, s15, s15
 80069e8:	b002      	add	sp, #8
 80069ea:	4770      	bx	lr
 80069ec:	3301      	adds	r3, #1
 80069ee:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80069f2:	d1eb      	bne.n	80069cc <roundf+0x2c>
 80069f4:	f042 527e 	orr.w	r2, r2, #1065353216	; 0x3f800000
 80069f8:	e7e8      	b.n	80069cc <roundf+0x2c>
 80069fa:	bf00      	nop
 80069fc:	007fffff 	.word	0x007fffff

08006a00 <powf>:
 8006a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a02:	ed2d 8b04 	vpush	{d8-d9}
 8006a06:	4ca7      	ldr	r4, [pc, #668]	; (8006ca4 <powf+0x2a4>)
 8006a08:	b08b      	sub	sp, #44	; 0x2c
 8006a0a:	eeb0 9a40 	vmov.f32	s18, s0
 8006a0e:	eef0 8a60 	vmov.f32	s17, s1
 8006a12:	f000 f99d 	bl	8006d50 <__ieee754_powf>
 8006a16:	f994 3000 	ldrsb.w	r3, [r4]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	eeb0 8a40 	vmov.f32	s16, s0
 8006a20:	d004      	beq.n	8006a2c <powf+0x2c>
 8006a22:	eeb0 0a68 	vmov.f32	s0, s17
 8006a26:	f000 fd9b 	bl	8007560 <__fpclassifyf>
 8006a2a:	b928      	cbnz	r0, 8006a38 <powf+0x38>
 8006a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006a30:	b00b      	add	sp, #44	; 0x2c
 8006a32:	ecbd 8b04 	vpop	{d8-d9}
 8006a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a38:	eeb0 0a49 	vmov.f32	s0, s18
 8006a3c:	f000 fd90 	bl	8007560 <__fpclassifyf>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d135      	bne.n	8006ab0 <powf+0xb0>
 8006a44:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4c:	d1ee      	bne.n	8006a2c <powf+0x2c>
 8006a4e:	4b96      	ldr	r3, [pc, #600]	; (8006ca8 <powf+0x2a8>)
 8006a50:	9008      	str	r0, [sp, #32]
 8006a52:	2201      	movs	r2, #1
 8006a54:	ee19 0a10 	vmov	r0, s18
 8006a58:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006a5c:	f7f9 fdb4 	bl	80005c8 <__aeabi_f2d>
 8006a60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a64:	ee18 0a90 	vmov	r0, s17
 8006a68:	f7f9 fdae 	bl	80005c8 <__aeabi_f2d>
 8006a6c:	f994 3000 	ldrsb.w	r3, [r4]
 8006a70:	4f8e      	ldr	r7, [pc, #568]	; (8006cac <powf+0x2ac>)
 8006a72:	2600      	movs	r6, #0
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006a7e:	d00d      	beq.n	8006a9c <powf+0x9c>
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d00b      	beq.n	8006a9c <powf+0x9c>
 8006a84:	4668      	mov	r0, sp
 8006a86:	f000 fcb3 	bl	80073f0 <matherr>
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	f000 80a4 	beq.w	8006bd8 <powf+0x1d8>
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	b11b      	cbz	r3, 8006a9c <powf+0x9c>
 8006a94:	f000 fe04 	bl	80076a0 <__errno>
 8006a98:	9b08      	ldr	r3, [sp, #32]
 8006a9a:	6003      	str	r3, [r0, #0]
 8006a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aa0:	f7fa f8ce 	bl	8000c40 <__aeabi_d2f>
 8006aa4:	ee00 0a10 	vmov	s0, r0
 8006aa8:	b00b      	add	sp, #44	; 0x2c
 8006aaa:	ecbd 8b04 	vpop	{d8-d9}
 8006aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab8:	d123      	bne.n	8006b02 <powf+0x102>
 8006aba:	eef5 8a40 	vcmp.f32	s17, #0.0
 8006abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac2:	d15c      	bne.n	8006b7e <powf+0x17e>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4a78      	ldr	r2, [pc, #480]	; (8006ca8 <powf+0x2a8>)
 8006ac8:	9300      	str	r3, [sp, #0]
 8006aca:	ee19 0a10 	vmov	r0, s18
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9308      	str	r3, [sp, #32]
 8006ad2:	9201      	str	r2, [sp, #4]
 8006ad4:	f7f9 fd78 	bl	80005c8 <__aeabi_f2d>
 8006ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006adc:	ee18 0a90 	vmov	r0, s17
 8006ae0:	f7f9 fd72 	bl	80005c8 <__aeabi_f2d>
 8006ae4:	f994 3000 	ldrsb.w	r3, [r4]
 8006ae8:	2600      	movs	r6, #0
 8006aea:	2700      	movs	r7, #0
 8006aec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af0:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d0c5      	beq.n	8006a84 <powf+0x84>
 8006af8:	4b6c      	ldr	r3, [pc, #432]	; (8006cac <powf+0x2ac>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b00:	e7cc      	b.n	8006a9c <powf+0x9c>
 8006b02:	eeb0 0a48 	vmov.f32	s0, s16
 8006b06:	f000 fd1b 	bl	8007540 <finitef>
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d068      	beq.n	8006be2 <powf+0x1e2>
 8006b10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b18:	d188      	bne.n	8006a2c <powf+0x2c>
 8006b1a:	eeb0 0a49 	vmov.f32	s0, s18
 8006b1e:	f000 fd0f 	bl	8007540 <finitef>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d082      	beq.n	8006a2c <powf+0x2c>
 8006b26:	eeb0 0a68 	vmov.f32	s0, s17
 8006b2a:	f000 fd09 	bl	8007540 <finitef>
 8006b2e:	2800      	cmp	r0, #0
 8006b30:	f43f af7c 	beq.w	8006a2c <powf+0x2c>
 8006b34:	2304      	movs	r3, #4
 8006b36:	4a5c      	ldr	r2, [pc, #368]	; (8006ca8 <powf+0x2a8>)
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	ee19 0a10 	vmov	r0, s18
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9308      	str	r3, [sp, #32]
 8006b42:	9201      	str	r2, [sp, #4]
 8006b44:	f7f9 fd40 	bl	80005c8 <__aeabi_f2d>
 8006b48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b4c:	ee18 0a90 	vmov	r0, s17
 8006b50:	f7f9 fd3a 	bl	80005c8 <__aeabi_f2d>
 8006b54:	f994 3000 	ldrsb.w	r3, [r4]
 8006b58:	2600      	movs	r6, #0
 8006b5a:	2700      	movs	r7, #0
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006b66:	f000 8098 	beq.w	8006c9a <powf+0x29a>
 8006b6a:	4668      	mov	r0, sp
 8006b6c:	f000 fc40 	bl	80073f0 <matherr>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f000 8092 	beq.w	8006c9a <powf+0x29a>
 8006b76:	9b08      	ldr	r3, [sp, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d08f      	beq.n	8006a9c <powf+0x9c>
 8006b7c:	e78a      	b.n	8006a94 <powf+0x94>
 8006b7e:	eeb0 0a68 	vmov.f32	s0, s17
 8006b82:	f000 fcdd 	bl	8007540 <finitef>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f af50 	beq.w	8006a2c <powf+0x2c>
 8006b8c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8006b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b94:	f57f af4a 	bpl.w	8006a2c <powf+0x2c>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	4a43      	ldr	r2, [pc, #268]	; (8006ca8 <powf+0x2a8>)
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	ee19 0a10 	vmov	r0, s18
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9308      	str	r3, [sp, #32]
 8006ba6:	9201      	str	r2, [sp, #4]
 8006ba8:	f7f9 fd0e 	bl	80005c8 <__aeabi_f2d>
 8006bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb0:	ee18 0a90 	vmov	r0, s17
 8006bb4:	f7f9 fd08 	bl	80005c8 <__aeabi_f2d>
 8006bb8:	7823      	ldrb	r3, [r4, #0]
 8006bba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d043      	beq.n	8006c4a <powf+0x24a>
 8006bc2:	493b      	ldr	r1, [pc, #236]	; (8006cb0 <powf+0x2b0>)
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006bcc:	d137      	bne.n	8006c3e <powf+0x23e>
 8006bce:	f000 fd67 	bl	80076a0 <__errno>
 8006bd2:	2321      	movs	r3, #33	; 0x21
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7ce      	b.n	8006b76 <powf+0x176>
 8006bd8:	f000 fd62 	bl	80076a0 <__errno>
 8006bdc:	2321      	movs	r3, #33	; 0x21
 8006bde:	6003      	str	r3, [r0, #0]
 8006be0:	e756      	b.n	8006a90 <powf+0x90>
 8006be2:	eeb0 0a49 	vmov.f32	s0, s18
 8006be6:	f000 fcab 	bl	8007540 <finitef>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d090      	beq.n	8006b10 <powf+0x110>
 8006bee:	eeb0 0a68 	vmov.f32	s0, s17
 8006bf2:	f000 fca5 	bl	8007540 <finitef>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d08a      	beq.n	8006b10 <powf+0x110>
 8006bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8006bfe:	f000 fcaf 	bl	8007560 <__fpclassifyf>
 8006c02:	bb38      	cbnz	r0, 8006c54 <powf+0x254>
 8006c04:	4b28      	ldr	r3, [pc, #160]	; (8006ca8 <powf+0x2a8>)
 8006c06:	9008      	str	r0, [sp, #32]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	ee19 0a10 	vmov	r0, s18
 8006c0e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006c12:	f7f9 fcd9 	bl	80005c8 <__aeabi_f2d>
 8006c16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c1a:	ee18 0a90 	vmov	r0, s17
 8006c1e:	f7f9 fcd3 	bl	80005c8 <__aeabi_f2d>
 8006c22:	7824      	ldrb	r4, [r4, #0]
 8006c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c28:	b17c      	cbz	r4, 8006c4a <powf+0x24a>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4602      	mov	r2, r0
 8006c30:	460b      	mov	r3, r1
 8006c32:	f7f9 fe47 	bl	80008c4 <__aeabi_ddiv>
 8006c36:	2c02      	cmp	r4, #2
 8006c38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c3c:	d0c7      	beq.n	8006bce <powf+0x1ce>
 8006c3e:	4668      	mov	r0, sp
 8006c40:	f000 fbd6 	bl	80073f0 <matherr>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d196      	bne.n	8006b76 <powf+0x176>
 8006c48:	e7c1      	b.n	8006bce <powf+0x1ce>
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c52:	e7f4      	b.n	8006c3e <powf+0x23e>
 8006c54:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <powf+0x2a8>)
 8006c56:	9508      	str	r5, [sp, #32]
 8006c58:	2203      	movs	r2, #3
 8006c5a:	ee19 0a10 	vmov	r0, s18
 8006c5e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006c62:	f7f9 fcb1 	bl	80005c8 <__aeabi_f2d>
 8006c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c6a:	ee18 0a90 	vmov	r0, s17
 8006c6e:	f7f9 fcab 	bl	80005c8 <__aeabi_f2d>
 8006c72:	f994 3000 	ldrsb.w	r3, [r4]
 8006c76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7a:	b9eb      	cbnz	r3, 8006cb8 <powf+0x2b8>
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <powf+0x2b4>)
 8006c7e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006c82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006c8e:	d437      	bmi.n	8006d00 <powf+0x300>
 8006c90:	f994 3000 	ldrsb.w	r3, [r4]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	f47f af68 	bne.w	8006b6a <powf+0x16a>
 8006c9a:	f000 fd01 	bl	80076a0 <__errno>
 8006c9e:	2322      	movs	r3, #34	; 0x22
 8006ca0:	6003      	str	r3, [r0, #0]
 8006ca2:	e768      	b.n	8006b76 <powf+0x176>
 8006ca4:	2000083c 	.word	0x2000083c
 8006ca8:	08007db0 	.word	0x08007db0
 8006cac:	3ff00000 	.word	0x3ff00000
 8006cb0:	fff00000 	.word	0xfff00000
 8006cb4:	47efffff 	.word	0x47efffff
 8006cb8:	4b1f      	ldr	r3, [pc, #124]	; (8006d38 <powf+0x338>)
 8006cba:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cc8:	d5e2      	bpl.n	8006c90 <powf+0x290>
 8006cca:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8006cce:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006cd2:	ee17 0a90 	vmov	r0, s15
 8006cd6:	f7f9 fc77 	bl	80005c8 <__aeabi_f2d>
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460f      	mov	r7, r1
 8006cde:	ec47 6b10 	vmov	d0, r6, r7
 8006ce2:	f000 fb8d 	bl	8007400 <rint>
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	4639      	mov	r1, r7
 8006cea:	ec53 2b10 	vmov	r2, r3, d0
 8006cee:	f7f9 ff2d 	bl	8000b4c <__aeabi_dcmpeq>
 8006cf2:	2800      	cmp	r0, #0
 8006cf4:	d1cc      	bne.n	8006c90 <powf+0x290>
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <powf+0x33c>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006cfe:	e7c7      	b.n	8006c90 <powf+0x290>
 8006d00:	eef6 7a00 	vmov.f32	s15, #96	; 0x60
 8006d04:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8006d08:	ee17 0a90 	vmov	r0, s15
 8006d0c:	f7f9 fc5c 	bl	80005c8 <__aeabi_f2d>
 8006d10:	4606      	mov	r6, r0
 8006d12:	460f      	mov	r7, r1
 8006d14:	ec47 6b10 	vmov	d0, r6, r7
 8006d18:	f000 fb72 	bl	8007400 <rint>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	4639      	mov	r1, r7
 8006d20:	ec53 2b10 	vmov	r2, r3, d0
 8006d24:	f7f9 ff12 	bl	8000b4c <__aeabi_dcmpeq>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	d1b1      	bne.n	8006c90 <powf+0x290>
 8006d2c:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <powf+0x340>)
 8006d2e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006d32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d36:	e7ab      	b.n	8006c90 <powf+0x290>
 8006d38:	7ff00000 	.word	0x7ff00000
 8006d3c:	fff00000 	.word	0xfff00000
 8006d40:	c7efffff 	.word	0xc7efffff
	...

08006d50 <__ieee754_powf>:
 8006d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d54:	ed2d 8b02 	vpush	{d8}
 8006d58:	ee10 5a90 	vmov	r5, s1
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	f035 4600 	bics.w	r6, r5, #2147483648	; 0x80000000
 8006d62:	ee10 4a90 	vmov	r4, s1
 8006d66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006d6a:	d014      	beq.n	8006d96 <__ieee754_powf+0x46>
 8006d6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d70:	f028 4700 	bic.w	r7, r8, #2147483648	; 0x80000000
 8006d74:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006d78:	dd07      	ble.n	8006d8a <__ieee754_powf+0x3a>
 8006d7a:	4857      	ldr	r0, [pc, #348]	; (8006ed8 <__ieee754_powf+0x188>)
 8006d7c:	b003      	add	sp, #12
 8006d7e:	ecbd 8b02 	vpop	{d8}
 8006d82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d86:	f000 bc0b 	b.w	80075a0 <nanf>
 8006d8a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006d8e:	dd09      	ble.n	8006da4 <__ieee754_powf+0x54>
 8006d90:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006d94:	d1f1      	bne.n	8006d7a <__ieee754_powf+0x2a>
 8006d96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8006d9a:	b003      	add	sp, #12
 8006d9c:	ecbd 8b02 	vpop	{d8}
 8006da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006da4:	f1b8 0f00 	cmp.w	r8, #0
 8006da8:	db52      	blt.n	8006e50 <__ieee754_powf+0x100>
 8006daa:	f04f 0900 	mov.w	r9, #0
 8006dae:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8006db2:	d044      	beq.n	8006e3e <__ieee754_powf+0xee>
 8006db4:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006db8:	d05d      	beq.n	8006e76 <__ieee754_powf+0x126>
 8006dba:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006dbe:	d069      	beq.n	8006e94 <__ieee754_powf+0x144>
 8006dc0:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006dc4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006dc8:	d01b      	beq.n	8006e02 <__ieee754_powf+0xb2>
 8006dca:	f000 fbb1 	bl	8007530 <fabsf>
 8006dce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006dd2:	d02a      	beq.n	8006e2a <__ieee754_powf+0xda>
 8006dd4:	b34f      	cbz	r7, 8006e2a <__ieee754_powf+0xda>
 8006dd6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006dda:	d026      	beq.n	8006e2a <__ieee754_powf+0xda>
 8006ddc:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8006de0:	3b01      	subs	r3, #1
 8006de2:	ea59 0203 	orrs.w	r2, r9, r3
 8006de6:	d06f      	beq.n	8006ec8 <__ieee754_powf+0x178>
 8006de8:	f1b6 4f9a 	cmp.w	r6, #1291845632	; 0x4d000000
 8006dec:	dd7c      	ble.n	8006ee8 <__ieee754_powf+0x198>
 8006dee:	4a3b      	ldr	r2, [pc, #236]	; (8006edc <__ieee754_powf+0x18c>)
 8006df0:	4297      	cmp	r7, r2
 8006df2:	f300 81db 	bgt.w	80071ac <__ieee754_powf+0x45c>
 8006df6:	2c00      	cmp	r4, #0
 8006df8:	f2c0 81de 	blt.w	80071b8 <__ieee754_powf+0x468>
 8006dfc:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8006ee0 <__ieee754_powf+0x190>
 8006e00:	e7cb      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e02:	f1b8 0f00 	cmp.w	r8, #0
 8006e06:	da4a      	bge.n	8006e9e <__ieee754_powf+0x14e>
 8006e08:	f000 fb92 	bl	8007530 <fabsf>
 8006e0c:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006e10:	d001      	beq.n	8006e16 <__ieee754_powf+0xc6>
 8006e12:	2f00      	cmp	r7, #0
 8006e14:	d1df      	bne.n	8006dd6 <__ieee754_powf+0x86>
 8006e16:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8006e1a:	ea59 0307 	orrs.w	r3, r9, r7
 8006e1e:	d14c      	bne.n	8006eba <__ieee754_powf+0x16a>
 8006e20:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006e24:	ee80 0a00 	vdiv.f32	s0, s0, s0
 8006e28:	e7b7      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e2a:	2c00      	cmp	r4, #0
 8006e2c:	bfbc      	itt	lt
 8006e2e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x70
 8006e32:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006e36:	f1b8 0f00 	cmp.w	r8, #0
 8006e3a:	daae      	bge.n	8006d9a <__ieee754_powf+0x4a>
 8006e3c:	e7eb      	b.n	8006e16 <__ieee754_powf+0xc6>
 8006e3e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006e42:	d0a8      	beq.n	8006d96 <__ieee754_powf+0x46>
 8006e44:	dd1f      	ble.n	8006e86 <__ieee754_powf+0x136>
 8006e46:	2c00      	cmp	r4, #0
 8006e48:	dbd8      	blt.n	8006dfc <__ieee754_powf+0xac>
 8006e4a:	ee00 5a10 	vmov	s0, r5
 8006e4e:	e7a4      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e50:	f1b6 4f97 	cmp.w	r6, #1266679808	; 0x4b800000
 8006e54:	da14      	bge.n	8006e80 <__ieee754_powf+0x130>
 8006e56:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8006e5a:	db09      	blt.n	8006e70 <__ieee754_powf+0x120>
 8006e5c:	15f3      	asrs	r3, r6, #23
 8006e5e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006e62:	fa46 f203 	asr.w	r2, r6, r3
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	42b3      	cmp	r3, r6
 8006e6c:	f000 8194 	beq.w	8007198 <__ieee754_powf+0x448>
 8006e70:	f04f 0900 	mov.w	r9, #0
 8006e74:	e79e      	b.n	8006db4 <__ieee754_powf+0x64>
 8006e76:	2c00      	cmp	r4, #0
 8006e78:	db18      	blt.n	8006eac <__ieee754_powf+0x15c>
 8006e7a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006e7e:	e78c      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e80:	f04f 0902 	mov.w	r9, #2
 8006e84:	e793      	b.n	8006dae <__ieee754_powf+0x5e>
 8006e86:	2c00      	cmp	r4, #0
 8006e88:	dab8      	bge.n	8006dfc <__ieee754_powf+0xac>
 8006e8a:	ee07 5a90 	vmov	s15, r5
 8006e8e:	eeb1 0a67 	vneg.f32	s0, s15
 8006e92:	e782      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e94:	eddd 7a01 	vldr	s15, [sp, #4]
 8006e98:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8006e9c:	e77d      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006e9e:	b003      	add	sp, #12
 8006ea0:	ecbd 8b02 	vpop	{d8}
 8006ea4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ea8:	f000 ba4a 	b.w	8007340 <__ieee754_sqrtf>
 8006eac:	eddd 7a01 	vldr	s15, [sp, #4]
 8006eb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 8006eb4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8006eb8:	e76f      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006eba:	f1b9 0f01 	cmp.w	r9, #1
 8006ebe:	f47f af6c 	bne.w	8006d9a <__ieee754_powf+0x4a>
 8006ec2:	eeb1 0a40 	vneg.f32	s0, s0
 8006ec6:	e768      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006ec8:	eddd 7a01 	vldr	s15, [sp, #4]
 8006ecc:	ee37 0ae7 	vsub.f32	s0, s15, s15
 8006ed0:	ee80 0a00 	vdiv.f32	s0, s0, s0
 8006ed4:	e761      	b.n	8006d9a <__ieee754_powf+0x4a>
 8006ed6:	bf00      	nop
 8006ed8:	08007804 	.word	0x08007804
 8006edc:	3f7ffff7 	.word	0x3f7ffff7
 8006ee0:	00000000 	.word	0x00000000
 8006ee4:	4b800000 	.word	0x4b800000
 8006ee8:	f5b7 0f00 	cmp.w	r7, #8388608	; 0x800000
 8006eec:	f280 815c 	bge.w	80071a8 <__ieee754_powf+0x458>
 8006ef0:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8006ee4 <__ieee754_powf+0x194>
 8006ef4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006ef8:	f06f 0117 	mvn.w	r1, #23
 8006efc:	ee17 7a90 	vmov	r7, s15
 8006f00:	48f0      	ldr	r0, [pc, #960]	; (80072c4 <__ieee754_powf+0x574>)
 8006f02:	15fa      	asrs	r2, r7, #23
 8006f04:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8006f08:	3a7f      	subs	r2, #127	; 0x7f
 8006f0a:	4287      	cmp	r7, r0
 8006f0c:	4411      	add	r1, r2
 8006f0e:	f047 527e 	orr.w	r2, r7, #1065353216	; 0x3f800000
 8006f12:	f340 8146 	ble.w	80071a2 <__ieee754_powf+0x452>
 8006f16:	48ec      	ldr	r0, [pc, #944]	; (80072c8 <__ieee754_powf+0x578>)
 8006f18:	4287      	cmp	r7, r0
 8006f1a:	f340 819b 	ble.w	8007254 <__ieee754_powf+0x504>
 8006f1e:	2600      	movs	r6, #0
 8006f20:	3101      	adds	r1, #1
 8006f22:	f5a2 0200 	sub.w	r2, r2, #8388608	; 0x800000
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8df c40c 	ldr.w	ip, [pc, #1036]	; 8007338 <__ieee754_powf+0x5e8>
 8006f2c:	ed9f 2ae7 	vldr	s4, [pc, #924]	; 80072cc <__ieee754_powf+0x57c>
 8006f30:	ed9f 8ae7 	vldr	s16, [pc, #924]	; 80072d0 <__ieee754_powf+0x580>
 8006f34:	ed9f 0ae7 	vldr	s0, [pc, #924]	; 80072d4 <__ieee754_powf+0x584>
 8006f38:	eddf 0ae7 	vldr	s1, [pc, #924]	; 80072d8 <__ieee754_powf+0x588>
 8006f3c:	ed9f 1ae7 	vldr	s2, [pc, #924]	; 80072dc <__ieee754_powf+0x58c>
 8006f40:	eddf 1ae7 	vldr	s3, [pc, #924]	; 80072e0 <__ieee754_powf+0x590>
 8006f44:	4fe7      	ldr	r7, [pc, #924]	; (80072e4 <__ieee754_powf+0x594>)
 8006f46:	eddf 7ae8 	vldr	s15, [pc, #928]	; 80072e8 <__ieee754_powf+0x598>
 8006f4a:	eddf 2ae8 	vldr	s5, [pc, #928]	; 80072ec <__ieee754_powf+0x59c>
 8006f4e:	ed9f 4ae8 	vldr	s8, [pc, #928]	; 80072f0 <__ieee754_powf+0x5a0>
 8006f52:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 800733c <__ieee754_powf+0x5ec>
 8006f56:	0080      	lsls	r0, r0, #2
 8006f58:	4484      	add	ip, r0
 8006f5a:	ee07 2a10 	vmov	s14, r2
 8006f5e:	eddc 6a00 	vldr	s13, [ip]
 8006f62:	ee77 5a26 	vadd.f32	s11, s14, s13
 8006f66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x70
 8006f6a:	eec6 5a25 	vdiv.f32	s11, s12, s11
 8006f6e:	1052      	asrs	r2, r2, #1
 8006f70:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006f74:	f502 2280 	add.w	r2, r2, #262144	; 0x40000
 8006f78:	4432      	add	r2, r6
 8006f7a:	ee37 6a66 	vsub.f32	s12, s14, s13
 8006f7e:	ee04 2a90 	vmov	s9, r2
 8006f82:	ee26 3a25 	vmul.f32	s6, s12, s11
 8006f86:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8006f8a:	ee23 5a03 	vmul.f32	s10, s6, s6
 8006f8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006f92:	eef0 6a42 	vmov.f32	s13, s4
 8006f96:	eee5 6a08 	vfma.f32	s13, s10, s16
 8006f9a:	183a      	adds	r2, r7, r0
 8006f9c:	4470      	add	r0, lr
 8006f9e:	ee13 6a10 	vmov	r6, s6
 8006fa2:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
 8006fa6:	eea6 0a85 	vfma.f32	s0, s13, s10
 8006faa:	f026 060f 	bic.w	r6, r6, #15
 8006fae:	ee03 6a90 	vmov	s7, r6
 8006fb2:	eeb1 2a63 	vneg.f32	s4, s7
 8006fb6:	eea2 6a24 	vfma.f32	s12, s4, s9
 8006fba:	eee0 0a05 	vfma.f32	s1, s0, s10
 8006fbe:	eea2 6a07 	vfma.f32	s12, s4, s14
 8006fc2:	eea0 1a85 	vfma.f32	s2, s1, s10
 8006fc6:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006fca:	eee1 1a05 	vfma.f32	s3, s2, s10
 8006fce:	ee33 7a23 	vadd.f32	s14, s6, s7
 8006fd2:	ee25 5a05 	vmul.f32	s10, s10, s10
 8006fd6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006fda:	eef0 4a08 	vmov.f32	s9, #8
 8006fde:	eeb0 6a64 	vmov.f32	s12, s9
 8006fe2:	eea5 7a21 	vfma.f32	s14, s10, s3
 8006fe6:	eea3 6aa3 	vfma.f32	s12, s7, s7
 8006fea:	edd2 1a00 	vldr	s3, [r2]
 8006fee:	ed90 5a00 	vldr	s10, [r0]
 8006ff2:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006ff6:	ee06 1a90 	vmov	s13, r1
 8006ffa:	ee16 2a10 	vmov	r2, s12
 8006ffe:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007002:	f022 020f 	bic.w	r2, r2, #15
 8007006:	ee06 2a10 	vmov	s12, r2
 800700a:	ee76 4a64 	vsub.f32	s9, s12, s9
 800700e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007012:	eee2 4a23 	vfma.f32	s9, s4, s7
 8007016:	ee37 7a64 	vsub.f32	s14, s14, s9
 800701a:	ee27 7a03 	vmul.f32	s14, s14, s6
 800701e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007022:	eef0 5a47 	vmov.f32	s11, s14
 8007026:	eee3 5a86 	vfma.f32	s11, s7, s12
 800702a:	ee15 2a90 	vmov	r2, s11
 800702e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007032:	f022 020f 	bic.w	r2, r2, #15
 8007036:	ee04 2a90 	vmov	s9, r2
 800703a:	eee2 4a06 	vfma.f32	s9, s4, s12
 800703e:	ee05 2a90 	vmov	s11, r2
 8007042:	ee37 7a64 	vsub.f32	s14, s14, s9
 8007046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800704a:	eee5 7aa2 	vfma.f32	s15, s11, s5
 800704e:	ee77 7aa1 	vadd.f32	s15, s15, s3
 8007052:	eeb0 7a67 	vmov.f32	s14, s15
 8007056:	eea5 7a84 	vfma.f32	s14, s11, s8
 800705a:	ee37 7a05 	vadd.f32	s14, s14, s10
 800705e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007062:	ee17 2a10 	vmov	r2, s14
 8007066:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 800706a:	f022 020f 	bic.w	r2, r2, #15
 800706e:	ee07 2a10 	vmov	s14, r2
 8007072:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007076:	ee36 7ac5 	vsub.f32	s14, s13, s10
 800707a:	eea5 7ac4 	vfms.f32	s14, s11, s8
 800707e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007082:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8007086:	f024 040f 	bic.w	r4, r4, #15
 800708a:	ee07 5a10 	vmov	s14, r5
 800708e:	ee06 4a90 	vmov	s13, r4
 8007092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007096:	ee77 6a66 	vsub.f32	s13, s14, s13
 800709a:	ee06 4a10 	vmov	s12, r4
 800709e:	ee07 2a10 	vmov	s14, r2
 80070a2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80070a6:	ee06 2a10 	vmov	s12, r2
 80070aa:	eee6 7a86 	vfma.f32	s15, s13, s12
 80070ae:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80070b2:	ea59 0303 	orrs.w	r3, r9, r3
 80070b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 80070ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 80070be:	eebf 6a00 	vmov.f32	s12, #240	; 0xf0
 80070c2:	ee16 3a90 	vmov	r3, s13
 80070c6:	bf0c      	ite	eq
 80070c8:	eeb0 8a46 	vmoveq.f32	s16, s12
 80070cc:	eeb0 8a40 	vmovne.f32	s16, s0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80070d6:	f340 80aa 	ble.w	800722e <__ieee754_powf+0x4de>
 80070da:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
 80070de:	dc7b      	bgt.n	80071d8 <__ieee754_powf+0x488>
 80070e0:	d06f      	beq.n	80071c2 <__ieee754_powf+0x472>
 80070e2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80070e6:	dc7e      	bgt.n	80071e6 <__ieee754_powf+0x496>
 80070e8:	2200      	movs	r2, #0
 80070ea:	4610      	mov	r0, r2
 80070ec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80070f0:	f023 030f 	bic.w	r3, r3, #15
 80070f4:	ee06 3a10 	vmov	s12, r3
 80070f8:	eddf 6a7e 	vldr	s13, [pc, #504]	; 80072f4 <__ieee754_powf+0x5a4>
 80070fc:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 80072f8 <__ieee754_powf+0x5a8>
 8007100:	eddf 3a7e 	vldr	s7, [pc, #504]	; 80072fc <__ieee754_powf+0x5ac>
 8007104:	eddf 2a7e 	vldr	s5, [pc, #504]	; 8007300 <__ieee754_powf+0x5b0>
 8007108:	ed9f 4a7e 	vldr	s8, [pc, #504]	; 8007304 <__ieee754_powf+0x5b4>
 800710c:	eddf 4a7e 	vldr	s9, [pc, #504]	; 8007308 <__ieee754_powf+0x5b8>
 8007110:	ed9f 5a7e 	vldr	s10, [pc, #504]	; 800730c <__ieee754_powf+0x5bc>
 8007114:	eddf 5a7e 	vldr	s11, [pc, #504]	; 8007310 <__ieee754_powf+0x5c0>
 8007118:	ee36 7a47 	vsub.f32	s14, s12, s14
 800711c:	eeb0 3a00 	vmov.f32	s6, #0
 8007120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007124:	ee26 7a26 	vmul.f32	s14, s12, s13
 8007128:	eeb7 0a00 	vmov.f32	s0, #112	; 0x70
 800712c:	eea7 7a82 	vfma.f32	s14, s15, s4
 8007130:	eef0 6a47 	vmov.f32	s13, s14
 8007134:	eee6 6a23 	vfma.f32	s13, s12, s7
 8007138:	eef0 7a47 	vmov.f32	s15, s14
 800713c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007140:	eeb0 2a66 	vmov.f32	s4, s13
 8007144:	eea7 4a22 	vfma.f32	s8, s14, s5
 8007148:	eea6 2a63 	vfms.f32	s4, s12, s7
 800714c:	eee4 4a07 	vfma.f32	s9, s8, s14
 8007150:	eeb0 6a66 	vmov.f32	s12, s13
 8007154:	eea4 5a87 	vfma.f32	s10, s9, s14
 8007158:	ee77 7ac2 	vsub.f32	s15, s15, s4
 800715c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007160:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8007164:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8007168:	ee26 7a86 	vmul.f32	s14, s13, s12
 800716c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007170:	ee87 7a06 	vdiv.f32	s14, s14, s12
 8007174:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007178:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800717c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007180:	ee10 3a10 	vmov	r3, s0
 8007184:	4413      	add	r3, r2
 8007186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800718a:	f2c0 8098 	blt.w	80072be <__ieee754_powf+0x56e>
 800718e:	ee00 3a10 	vmov	s0, r3
 8007192:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007196:	e600      	b.n	8006d9a <__ieee754_powf+0x4a>
 8007198:	f002 0201 	and.w	r2, r2, #1
 800719c:	f1c2 0902 	rsb	r9, r2, #2
 80071a0:	e608      	b.n	8006db4 <__ieee754_powf+0x64>
 80071a2:	2600      	movs	r6, #0
 80071a4:	4630      	mov	r0, r6
 80071a6:	e6bf      	b.n	8006f28 <__ieee754_powf+0x1d8>
 80071a8:	2100      	movs	r1, #0
 80071aa:	e6a9      	b.n	8006f00 <__ieee754_powf+0x1b0>
 80071ac:	4a59      	ldr	r2, [pc, #356]	; (8007314 <__ieee754_powf+0x5c4>)
 80071ae:	4297      	cmp	r7, r2
 80071b0:	dd54      	ble.n	800725c <__ieee754_powf+0x50c>
 80071b2:	2c00      	cmp	r4, #0
 80071b4:	f77f ae22 	ble.w	8006dfc <__ieee754_powf+0xac>
 80071b8:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8007318 <__ieee754_powf+0x5c8>
 80071bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80071c0:	e5eb      	b.n	8006d9a <__ieee754_powf+0x4a>
 80071c2:	ed9f 6a56 	vldr	s12, [pc, #344]	; 800731c <__ieee754_powf+0x5cc>
 80071c6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80071ca:	ee37 6a86 	vadd.f32	s12, s15, s12
 80071ce:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80071d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d6:	dd06      	ble.n	80071e6 <__ieee754_powf+0x496>
 80071d8:	eddf 7a4f 	vldr	s15, [pc, #316]	; 8007318 <__ieee754_powf+0x5c8>
 80071dc:	ee28 0a27 	vmul.f32	s0, s16, s15
 80071e0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80071e4:	e5d9      	b.n	8006d9a <__ieee754_powf+0x4a>
 80071e6:	15d2      	asrs	r2, r2, #23
 80071e8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 80071ec:	3a7e      	subs	r2, #126	; 0x7e
 80071ee:	fa41 f202 	asr.w	r2, r1, r2
 80071f2:	441a      	add	r2, r3
 80071f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80071f8:	4c49      	ldr	r4, [pc, #292]	; (8007320 <__ieee754_powf+0x5d0>)
 80071fa:	f1a1 057f 	sub.w	r5, r1, #127	; 0x7f
 80071fe:	412c      	asrs	r4, r5
 8007200:	f3c2 0016 	ubfx	r0, r2, #0, #23
 8007204:	ea22 0204 	bic.w	r2, r2, r4
 8007208:	ee06 2a90 	vmov	s13, r2
 800720c:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
 8007210:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8007214:	ee37 7a66 	vsub.f32	s14, s14, s13
 8007218:	4108      	asrs	r0, r1
 800721a:	ea80 70e3 	eor.w	r0, r0, r3, asr #31
 800721e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007222:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007226:	05c2      	lsls	r2, r0, #23
 8007228:	ee16 3a90 	vmov	r3, s13
 800722c:	e75e      	b.n	80070ec <__ieee754_powf+0x39c>
 800722e:	493d      	ldr	r1, [pc, #244]	; (8007324 <__ieee754_powf+0x5d4>)
 8007230:	428a      	cmp	r2, r1
 8007232:	dc08      	bgt.n	8007246 <__ieee754_powf+0x4f6>
 8007234:	f47f af55 	bne.w	80070e2 <__ieee754_powf+0x392>
 8007238:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800723c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007244:	d8cf      	bhi.n	80071e6 <__ieee754_powf+0x496>
 8007246:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007328 <__ieee754_powf+0x5d8>
 800724a:	ee28 0a27 	vmul.f32	s0, s16, s15
 800724e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007252:	e5a2      	b.n	8006d9a <__ieee754_powf+0x4a>
 8007254:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007258:	2001      	movs	r0, #1
 800725a:	e665      	b.n	8006f28 <__ieee754_powf+0x1d8>
 800725c:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 8007260:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007264:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80072d8 <__ieee754_powf+0x588>
 8007268:	eddf 7a30 	vldr	s15, [pc, #192]	; 800732c <__ieee754_powf+0x5dc>
 800726c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8007330 <__ieee754_powf+0x5e0>
 8007270:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007334 <__ieee754_powf+0x5e4>
 8007274:	eef1 5a40 	vneg.f32	s11, s0
 8007278:	eeb5 7a00 	vmov.f32	s14, #80	; 0x50
 800727c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8007280:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8007284:	eea6 7ac0 	vfms.f32	s14, s13, s0
 8007288:	eef0 6a47 	vmov.f32	s13, s14
 800728c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007290:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007294:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007298:	eee0 7a05 	vfma.f32	s15, s0, s10
 800729c:	eeb0 7a67 	vmov.f32	s14, s15
 80072a0:	eea0 7a06 	vfma.f32	s14, s0, s12
 80072a4:	ee17 2a10 	vmov	r2, s14
 80072a8:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80072ac:	f022 020f 	bic.w	r2, r2, #15
 80072b0:	ee07 2a10 	vmov	s14, r2
 80072b4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80072b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80072bc:	e6e1      	b.n	8007082 <__ieee754_powf+0x332>
 80072be:	f000 f977 	bl	80075b0 <scalbnf>
 80072c2:	e766      	b.n	8007192 <__ieee754_powf+0x442>
 80072c4:	001cc471 	.word	0x001cc471
 80072c8:	005db3d6 	.word	0x005db3d6
 80072cc:	3e6c3255 	.word	0x3e6c3255
 80072d0:	3e53f142 	.word	0x3e53f142
 80072d4:	3e8ba305 	.word	0x3e8ba305
 80072d8:	3eaaaaab 	.word	0x3eaaaaab
 80072dc:	3edb6db7 	.word	0x3edb6db7
 80072e0:	3f19999a 	.word	0x3f19999a
 80072e4:	08007dd0 	.word	0x08007dd0
 80072e8:	3f76384f 	.word	0x3f76384f
 80072ec:	369dc3a0 	.word	0x369dc3a0
 80072f0:	3f763800 	.word	0x3f763800
 80072f4:	35bfbe8c 	.word	0x35bfbe8c
 80072f8:	3f317218 	.word	0x3f317218
 80072fc:	3f317200 	.word	0x3f317200
 8007300:	3331bb4c 	.word	0x3331bb4c
 8007304:	b5ddea0e 	.word	0xb5ddea0e
 8007308:	388ab355 	.word	0x388ab355
 800730c:	bb360b61 	.word	0xbb360b61
 8007310:	3e2aaaab 	.word	0x3e2aaaab
 8007314:	3f800007 	.word	0x3f800007
 8007318:	7149f2ca 	.word	0x7149f2ca
 800731c:	3338aa3c 	.word	0x3338aa3c
 8007320:	007fffff 	.word	0x007fffff
 8007324:	43160000 	.word	0x43160000
 8007328:	0da24260 	.word	0x0da24260
 800732c:	3fb8aa3b 	.word	0x3fb8aa3b
 8007330:	36eca570 	.word	0x36eca570
 8007334:	3fb8aa00 	.word	0x3fb8aa00
 8007338:	08007de0 	.word	0x08007de0
 800733c:	08007dc0 	.word	0x08007dc0

08007340 <__ieee754_sqrtf>:
 8007340:	ee10 3a10 	vmov	r3, s0
 8007344:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007348:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800734c:	b470      	push	{r4, r5, r6}
 800734e:	d230      	bcs.n	80073b2 <__ieee754_sqrtf+0x72>
 8007350:	b36a      	cbz	r2, 80073ae <__ieee754_sqrtf+0x6e>
 8007352:	2b00      	cmp	r3, #0
 8007354:	db3d      	blt.n	80073d2 <__ieee754_sqrtf+0x92>
 8007356:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800735a:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800735e:	d32c      	bcc.n	80073ba <__ieee754_sqrtf+0x7a>
 8007360:	f1a1 027f 	sub.w	r2, r1, #127	; 0x7f
 8007364:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007368:	07d1      	lsls	r1, r2, #31
 800736a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800736e:	bf48      	it	mi
 8007370:	005b      	lslmi	r3, r3, #1
 8007372:	2400      	movs	r4, #0
 8007374:	1056      	asrs	r6, r2, #1
 8007376:	005b      	lsls	r3, r3, #1
 8007378:	4625      	mov	r5, r4
 800737a:	2119      	movs	r1, #25
 800737c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007380:	18a8      	adds	r0, r5, r2
 8007382:	4298      	cmp	r0, r3
 8007384:	dc02      	bgt.n	800738c <__ieee754_sqrtf+0x4c>
 8007386:	1a1b      	subs	r3, r3, r0
 8007388:	1885      	adds	r5, r0, r2
 800738a:	4414      	add	r4, r2
 800738c:	3901      	subs	r1, #1
 800738e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007392:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8007396:	d1f3      	bne.n	8007380 <__ieee754_sqrtf+0x40>
 8007398:	b113      	cbz	r3, 80073a0 <__ieee754_sqrtf+0x60>
 800739a:	f004 0301 	and.w	r3, r4, #1
 800739e:	441c      	add	r4, r3
 80073a0:	1064      	asrs	r4, r4, #1
 80073a2:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 80073a6:	eb04 53c6 	add.w	r3, r4, r6, lsl #23
 80073aa:	ee00 3a10 	vmov	s0, r3
 80073ae:	bc70      	pop	{r4, r5, r6}
 80073b0:	4770      	bx	lr
 80073b2:	eea0 0a00 	vfma.f32	s0, s0, s0
 80073b6:	bc70      	pop	{r4, r5, r6}
 80073b8:	4770      	bx	lr
 80073ba:	f413 0200 	ands.w	r2, r3, #8388608	; 0x800000
 80073be:	d10d      	bne.n	80073dc <__ieee754_sqrtf+0x9c>
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	0218      	lsls	r0, r3, #8
 80073c4:	f102 0201 	add.w	r2, r2, #1
 80073c8:	d5fa      	bpl.n	80073c0 <__ieee754_sqrtf+0x80>
 80073ca:	f1c2 0201 	rsb	r2, r2, #1
 80073ce:	4411      	add	r1, r2
 80073d0:	e7c6      	b.n	8007360 <__ieee754_sqrtf+0x20>
 80073d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80073d6:	ee80 0a00 	vdiv.f32	s0, s0, s0
 80073da:	e7e8      	b.n	80073ae <__ieee754_sqrtf+0x6e>
 80073dc:	2201      	movs	r2, #1
 80073de:	4411      	add	r1, r2
 80073e0:	e7be      	b.n	8007360 <__ieee754_sqrtf+0x20>
 80073e2:	bf00      	nop
	...

080073f0 <matherr>:
 80073f0:	2000      	movs	r0, #0
 80073f2:	4770      	bx	lr
	...

08007400 <rint>:
 8007400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007402:	ec51 0b10 	vmov	r0, r1, d0
 8007406:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800740a:	f2a6 32ff 	subw	r2, r6, #1023	; 0x3ff
 800740e:	2a13      	cmp	r2, #19
 8007410:	b083      	sub	sp, #12
 8007412:	460b      	mov	r3, r1
 8007414:	ee10 7a10 	vmov	r7, s0
 8007418:	ea4f 74d1 	mov.w	r4, r1, lsr #31
 800741c:	4605      	mov	r5, r0
 800741e:	dc2f      	bgt.n	8007480 <rint+0x80>
 8007420:	2a00      	cmp	r2, #0
 8007422:	db48      	blt.n	80074b6 <rint+0xb6>
 8007424:	4e3d      	ldr	r6, [pc, #244]	; (800751c <rint+0x11c>)
 8007426:	4116      	asrs	r6, r2
 8007428:	ea06 0701 	and.w	r7, r6, r1
 800742c:	4307      	orrs	r7, r0
 800742e:	d02c      	beq.n	800748a <rint+0x8a>
 8007430:	0876      	lsrs	r6, r6, #1
 8007432:	4031      	ands	r1, r6
 8007434:	430d      	orrs	r5, r1
 8007436:	d00c      	beq.n	8007452 <rint+0x52>
 8007438:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800743c:	2a13      	cmp	r2, #19
 800743e:	ea23 0606 	bic.w	r6, r3, r6
 8007442:	fa41 f302 	asr.w	r3, r1, r2
 8007446:	ea43 0306 	orr.w	r3, r3, r6
 800744a:	bf0c      	ite	eq
 800744c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8007450:	2500      	movne	r5, #0
 8007452:	4a33      	ldr	r2, [pc, #204]	; (8007520 <rint+0x120>)
 8007454:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8007458:	4628      	mov	r0, r5
 800745a:	e9d4 4500 	ldrd	r4, r5, [r4]
 800745e:	4602      	mov	r2, r0
 8007460:	4629      	mov	r1, r5
 8007462:	4620      	mov	r0, r4
 8007464:	f7f8 ff52 	bl	800030c <__adddf3>
 8007468:	e9cd 0100 	strd	r0, r1, [sp]
 800746c:	4622      	mov	r2, r4
 800746e:	462b      	mov	r3, r5
 8007470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007474:	f7f8 ff48 	bl	8000308 <__aeabi_dsub>
 8007478:	ec41 0b10 	vmov	d0, r0, r1
 800747c:	b003      	add	sp, #12
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007480:	2a33      	cmp	r2, #51	; 0x33
 8007482:	dd06      	ble.n	8007492 <rint+0x92>
 8007484:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007488:	d03f      	beq.n	800750a <rint+0x10a>
 800748a:	ec41 0b10 	vmov	d0, r0, r1
 800748e:	b003      	add	sp, #12
 8007490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007492:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8007496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800749a:	40f2      	lsrs	r2, r6
 800749c:	4202      	tst	r2, r0
 800749e:	d0f4      	beq.n	800748a <rint+0x8a>
 80074a0:	0852      	lsrs	r2, r2, #1
 80074a2:	4202      	tst	r2, r0
 80074a4:	d0d5      	beq.n	8007452 <rint+0x52>
 80074a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80074aa:	ea27 0202 	bic.w	r2, r7, r2
 80074ae:	fa41 f506 	asr.w	r5, r1, r6
 80074b2:	4315      	orrs	r5, r2
 80074b4:	e7cd      	b.n	8007452 <rint+0x52>
 80074b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80074ba:	4302      	orrs	r2, r0
 80074bc:	d0e5      	beq.n	800748a <rint+0x8a>
 80074be:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80074c2:	4317      	orrs	r7, r2
 80074c4:	427a      	negs	r2, r7
 80074c6:	4317      	orrs	r7, r2
 80074c8:	4a15      	ldr	r2, [pc, #84]	; (8007520 <rint+0x120>)
 80074ca:	0c4b      	lsrs	r3, r1, #17
 80074cc:	0b3f      	lsrs	r7, r7, #12
 80074ce:	045b      	lsls	r3, r3, #17
 80074d0:	f407 2700 	and.w	r7, r7, #524288	; 0x80000
 80074d4:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80074d8:	ea47 0103 	orr.w	r1, r7, r3
 80074dc:	e9d2 6700 	ldrd	r6, r7, [r2]
 80074e0:	460b      	mov	r3, r1
 80074e2:	4602      	mov	r2, r0
 80074e4:	4639      	mov	r1, r7
 80074e6:	4630      	mov	r0, r6
 80074e8:	f7f8 ff10 	bl	800030c <__adddf3>
 80074ec:	e9cd 0100 	strd	r0, r1, [sp]
 80074f0:	463b      	mov	r3, r7
 80074f2:	4632      	mov	r2, r6
 80074f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f8:	f7f8 ff06 	bl	8000308 <__aeabi_dsub>
 80074fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007500:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8007504:	ec41 0b10 	vmov	d0, r0, r1
 8007508:	e7c1      	b.n	800748e <rint+0x8e>
 800750a:	ee10 2a10 	vmov	r2, s0
 800750e:	460b      	mov	r3, r1
 8007510:	f7f8 fefc 	bl	800030c <__adddf3>
 8007514:	ec41 0b10 	vmov	d0, r0, r1
 8007518:	e7b9      	b.n	800748e <rint+0x8e>
 800751a:	bf00      	nop
 800751c:	000fffff 	.word	0x000fffff
 8007520:	08007df0 	.word	0x08007df0
	...

08007530 <fabsf>:
 8007530:	ee10 3a10 	vmov	r3, s0
 8007534:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007538:	ee00 3a10 	vmov	s0, r3
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop

08007540 <finitef>:
 8007540:	ee10 3a10 	vmov	r3, s0
 8007544:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8007548:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800754c:	bfac      	ite	ge
 800754e:	2000      	movge	r0, #0
 8007550:	2001      	movlt	r0, #1
 8007552:	4770      	bx	lr
	...

08007560 <__fpclassifyf>:
 8007560:	ee10 3a10 	vmov	r3, s0
 8007564:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8007568:	d101      	bne.n	800756e <__fpclassifyf+0xe>
 800756a:	2002      	movs	r0, #2
 800756c:	4770      	bx	lr
 800756e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8007572:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8007576:	d201      	bcs.n	800757c <__fpclassifyf+0x1c>
 8007578:	2004      	movs	r0, #4
 800757a:	4770      	bx	lr
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <__fpclassifyf+0x34>)
 800757e:	1e42      	subs	r2, r0, #1
 8007580:	429a      	cmp	r2, r3
 8007582:	d801      	bhi.n	8007588 <__fpclassifyf+0x28>
 8007584:	2003      	movs	r0, #3
 8007586:	4770      	bx	lr
 8007588:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 800758c:	fab0 f080 	clz	r0, r0
 8007590:	0940      	lsrs	r0, r0, #5
 8007592:	4770      	bx	lr
 8007594:	007ffffe 	.word	0x007ffffe
	...

080075a0 <nanf>:
 80075a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80075a8 <nanf+0x8>
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	7fc00000 	.word	0x7fc00000
 80075ac:	00000000 	.word	0x00000000

080075b0 <scalbnf>:
 80075b0:	b508      	push	{r3, lr}
 80075b2:	ee10 3a10 	vmov	r3, s0
 80075b6:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80075ba:	ed2d 8b02 	vpush	{d8}
 80075be:	d011      	beq.n	80075e4 <scalbnf+0x34>
 80075c0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80075c4:	d211      	bcs.n	80075ea <scalbnf+0x3a>
 80075c6:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80075ca:	d313      	bcc.n	80075f4 <scalbnf+0x44>
 80075cc:	0dd2      	lsrs	r2, r2, #23
 80075ce:	4402      	add	r2, r0
 80075d0:	2afe      	cmp	r2, #254	; 0xfe
 80075d2:	dc2e      	bgt.n	8007632 <scalbnf+0x82>
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	dd1a      	ble.n	800760e <scalbnf+0x5e>
 80075d8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80075dc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80075e0:	ee00 3a10 	vmov	s0, r3
 80075e4:	ecbd 8b02 	vpop	{d8}
 80075e8:	bd08      	pop	{r3, pc}
 80075ea:	ecbd 8b02 	vpop	{d8}
 80075ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80075f2:	bd08      	pop	{r3, pc}
 80075f4:	4b1d      	ldr	r3, [pc, #116]	; (800766c <scalbnf+0xbc>)
 80075f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007670 <scalbnf+0xc0>
 80075fa:	4298      	cmp	r0, r3
 80075fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007600:	db22      	blt.n	8007648 <scalbnf+0x98>
 8007602:	ee10 3a10 	vmov	r3, s0
 8007606:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800760a:	3a19      	subs	r2, #25
 800760c:	e7df      	b.n	80075ce <scalbnf+0x1e>
 800760e:	f112 0f16 	cmn.w	r2, #22
 8007612:	da1e      	bge.n	8007652 <scalbnf+0xa2>
 8007614:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007618:	4298      	cmp	r0, r3
 800761a:	dc0a      	bgt.n	8007632 <scalbnf+0x82>
 800761c:	ed9f 8a15 	vldr	s16, [pc, #84]	; 8007674 <scalbnf+0xc4>
 8007620:	eef0 0a40 	vmov.f32	s1, s0
 8007624:	eeb0 0a48 	vmov.f32	s0, s16
 8007628:	f000 f82a 	bl	8007680 <copysignf>
 800762c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007630:	e7d8      	b.n	80075e4 <scalbnf+0x34>
 8007632:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8007678 <scalbnf+0xc8>
 8007636:	eef0 0a40 	vmov.f32	s1, s0
 800763a:	eeb0 0a48 	vmov.f32	s0, s16
 800763e:	f000 f81f 	bl	8007680 <copysignf>
 8007642:	ee20 0a08 	vmul.f32	s0, s0, s16
 8007646:	e7cd      	b.n	80075e4 <scalbnf+0x34>
 8007648:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8007674 <scalbnf+0xc4>
 800764c:	ee20 0a20 	vmul.f32	s0, s0, s1
 8007650:	e7c8      	b.n	80075e4 <scalbnf+0x34>
 8007652:	3219      	adds	r2, #25
 8007654:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007658:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800765c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800767c <scalbnf+0xcc>
 8007660:	ee00 3a10 	vmov	s0, r3
 8007664:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007668:	e7bc      	b.n	80075e4 <scalbnf+0x34>
 800766a:	bf00      	nop
 800766c:	ffff3cb0 	.word	0xffff3cb0
 8007670:	4c000000 	.word	0x4c000000
 8007674:	0da24260 	.word	0x0da24260
 8007678:	7149f2ca 	.word	0x7149f2ca
 800767c:	33000000 	.word	0x33000000

08007680 <copysignf>:
 8007680:	ee10 3a10 	vmov	r3, s0
 8007684:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007688:	ee10 3a90 	vmov	r3, s1
 800768c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007690:	4313      	orrs	r3, r2
 8007692:	ee00 3a10 	vmov	s0, r3
 8007696:	4770      	bx	lr
	...

080076a0 <__errno>:
 80076a0:	4b01      	ldr	r3, [pc, #4]	; (80076a8 <__errno+0x8>)
 80076a2:	6818      	ldr	r0, [r3, #0]
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	20000c68 	.word	0x20000c68
 80076ac:	00000000 	.word	0x00000000

080076b0 <memset>:
 80076b0:	b470      	push	{r4, r5, r6}
 80076b2:	0784      	lsls	r4, r0, #30
 80076b4:	d046      	beq.n	8007744 <memset+0x94>
 80076b6:	1e54      	subs	r4, r2, #1
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d041      	beq.n	8007740 <memset+0x90>
 80076bc:	b2cd      	uxtb	r5, r1
 80076be:	4603      	mov	r3, r0
 80076c0:	e002      	b.n	80076c8 <memset+0x18>
 80076c2:	1e62      	subs	r2, r4, #1
 80076c4:	b3e4      	cbz	r4, 8007740 <memset+0x90>
 80076c6:	4614      	mov	r4, r2
 80076c8:	f803 5b01 	strb.w	r5, [r3], #1
 80076cc:	079a      	lsls	r2, r3, #30
 80076ce:	d1f8      	bne.n	80076c2 <memset+0x12>
 80076d0:	2c03      	cmp	r4, #3
 80076d2:	d92e      	bls.n	8007732 <memset+0x82>
 80076d4:	b2cd      	uxtb	r5, r1
 80076d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80076da:	2c0f      	cmp	r4, #15
 80076dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80076e0:	d919      	bls.n	8007716 <memset+0x66>
 80076e2:	f103 0210 	add.w	r2, r3, #16
 80076e6:	4626      	mov	r6, r4
 80076e8:	3e10      	subs	r6, #16
 80076ea:	2e0f      	cmp	r6, #15
 80076ec:	f842 5c10 	str.w	r5, [r2, #-16]
 80076f0:	f842 5c0c 	str.w	r5, [r2, #-12]
 80076f4:	f842 5c08 	str.w	r5, [r2, #-8]
 80076f8:	f842 5c04 	str.w	r5, [r2, #-4]
 80076fc:	f102 0210 	add.w	r2, r2, #16
 8007700:	d8f2      	bhi.n	80076e8 <memset+0x38>
 8007702:	f1a4 0210 	sub.w	r2, r4, #16
 8007706:	f022 020f 	bic.w	r2, r2, #15
 800770a:	f004 040f 	and.w	r4, r4, #15
 800770e:	3210      	adds	r2, #16
 8007710:	2c03      	cmp	r4, #3
 8007712:	4413      	add	r3, r2
 8007714:	d90d      	bls.n	8007732 <memset+0x82>
 8007716:	461e      	mov	r6, r3
 8007718:	4622      	mov	r2, r4
 800771a:	3a04      	subs	r2, #4
 800771c:	2a03      	cmp	r2, #3
 800771e:	f846 5b04 	str.w	r5, [r6], #4
 8007722:	d8fa      	bhi.n	800771a <memset+0x6a>
 8007724:	1f22      	subs	r2, r4, #4
 8007726:	f022 0203 	bic.w	r2, r2, #3
 800772a:	3204      	adds	r2, #4
 800772c:	4413      	add	r3, r2
 800772e:	f004 0403 	and.w	r4, r4, #3
 8007732:	b12c      	cbz	r4, 8007740 <memset+0x90>
 8007734:	b2c9      	uxtb	r1, r1
 8007736:	441c      	add	r4, r3
 8007738:	f803 1b01 	strb.w	r1, [r3], #1
 800773c:	42a3      	cmp	r3, r4
 800773e:	d1fb      	bne.n	8007738 <memset+0x88>
 8007740:	bc70      	pop	{r4, r5, r6}
 8007742:	4770      	bx	lr
 8007744:	4614      	mov	r4, r2
 8007746:	4603      	mov	r3, r0
 8007748:	e7c2      	b.n	80076d0 <memset+0x20>
 800774a:	bf00      	nop
 800774c:	0000      	movs	r0, r0
 800774e:	0000      	movs	r0, r0
 8007750:	6c6c6548 	.word	0x6c6c6548
 8007754:	6f77206f 	.word	0x6f77206f
 8007758:	00646c72 	.word	0x00646c72
	...
 8007770:	00007350 	.word	0x00007350
	...

08007780 <ram_areas>:
 8007780:	08008274 20001b84 20001b84 20001b84     t...... ... ... 
 8007790:	08008274 20000000 20000000 20000000     t...... ... ... 
 80077a0:	08008274 2001c000 2001c000 2001c000     t...... ... ... 
 80077b0:	08008274 00000000 00000000 00000000     t...............
 80077c0:	08008274 00000000 00000000 00000000     t...............
 80077d0:	08008274 00000000 00000000 00000000     t...............
 80077e0:	08008274 00000000 00000000 00000000     t...............
 80077f0:	08008274 00000000 00000000 00000000     t...............
 8007800:	656c6469 00000000 00000000 00000000     idle............

08007810 <ch_debug>:
 8007810:	6e69616d 18431600 08480404 1814100c     main..C...H.....
 8007820:	1e1d1c00 0000201f 00000000 00000000     ..... ..........

08007830 <vmt>:
 8007830:	08002271 08002251 08002231 080021f1     q"..Q"..1"...!..
 8007840:	08002211 080021d1 080021b1 08002191     ."...!...!...!..

08007850 <zero_status>:
	...

08007860 <active_status>:
	...

08007870 <halted_status>:
 8007870:	00000001 00000000 00000000 00000000     ................

08007880 <_stm32_dma_streams>:
 8007880:	40026010 40026008 000b0000 40026028     .`.@.`.@....(`.@
 8007890:	40026008 000c0106 40026040 40026008     .`.@....@`.@.`.@
 80078a0:	000d0210 40026058 40026008 000e0316     ....X`.@.`.@....
 80078b0:	40026070 4002600c 000f0400 40026088     p`.@.`.@.....`.@
 80078c0:	4002600c 00100506 400260a0 4002600c     .`.@.....`.@.`.@
 80078d0:	00110610 400260b8 4002600c 002f0716     .....`.@.`.@../.
 80078e0:	40026410 40026408 00380800 40026428     .d.@.d.@..8.(d.@
 80078f0:	40026408 00390906 40026440 40026408     .d.@..9.@d.@.d.@
 8007900:	003a0a10 40026458 40026408 003b0b16     ..:.Xd.@.d.@..;.
 8007910:	40026470 4002640c 003c0c00 40026488     pd.@.d.@..<..d.@
 8007920:	4002640c 00440d06 400264a0 4002640c     .d.@..D..d.@.d.@
 8007930:	00450e10 400264b8 4002640c 00460f16     ..E..d.@.d.@..F.
 8007940:	20414d44 6c696166 00657275 00000000     DMA failure.....

08007950 <fsparams>:
 8007950:	00000080 00000140 00000003 00000000     ....@...........
 8007960:	5f627375 5f646c6c 706d7570 00000000     usb_lld_pump....

08007970 <ep0config>:
 8007970:	00000000 080027a1 08002ab1 08002b61     .....'...*..a+..
 8007980:	00400040 200012d0 200012d0 00000001     @.@.... ... ....
 8007990:	200012e0 00000000 00000000 00000000     ... ............

080079a0 <pal_default_config>:
 80079a0:	2aa0aa00 00000000 ffffabff 40010054     ...*........T..@
 80079b0:	0000ffff 55560000 000aaa00 00082080     ......VU..... ..
 80079c0:	00000240 ffffffff 55514515 0000ffff     @........EQU....
 80079d0:	04000000 00000040 02208001 00000000     ....@..... .....
 80079e0:	ffffffff 54451554 0000ffff 60000000     ....T.ET.......`
 80079f0:	00060600 55000100 00000000 ffffffff     .......U........
 8007a00:	00555055 00000fff 00000000 00000000     UPU.............
 8007a10:	00000040 00000000 ffffffff 00000000     @...............
 8007a20:	0000ffff 00000000 00000000 00000000     ................
 8007a30:	00000000 ffffffff 00000000 0000ffff     ................
	...
 8007a50:	ffffffff 00000000 0000ffff 00000000     ................
	...
 8007a6c:	ffffffff 00000000 0000ffff 00000000     ................
 8007a7c:	00000000 6c756e28 0000296c 00000000     ....(null)......
 8007a8c:	00000000                                ....

08007a90 <pow10>:
 8007a90:	0000000a 00000064 000003e8 00002710     ....d........'..
 8007aa0:	000186a0 000f4240 00989680 05f5e100     ....@B..........
 8007ab0:	3b9aca00 00000000 00000000 00000000     ...;............
 8007ac0:	000a7325 00000000 00000000 00000000     %s..............

08007ad0 <ep1config>:
 8007ad0:	00000002 00000000 08002431 080024c1     ........1$...$..
 8007ae0:	00400040 200017d4 200017e4 00000002     @.@.... ... ....
	...

08007b00 <vcom_configuration_descriptor>:
 8007b00:	00000043 08007b50 00000000 00000000     C...P{..........

08007b10 <ep2config>:
 8007b10:	00000003 00000000 08002521 00000000     ........!%......
 8007b20:	00000010 2000133c 00000000 00000001     ....<.. ........
	...

08007b40 <usbcfg>:
 8007b40:	08005531 080054e1 080023a1 08005511     1U...T...#...U..

08007b50 <vcom_configuration_descriptor_data>:
 8007b50:	00430209 c0000102 00040932 02020100     ..C.....2.......
 8007b60:	24050001 05011000 01000124 02022404     ...$....$....$..
 8007b70:	00062405 82050701 ff000803 00010409     .$..............
 8007b80:	00000a02 01050700 00004002 02810507     .........@......
 8007b90:	00000040 00000000 00000000 00000000     @...............

08007ba0 <vcom_device_descriptor_data>:
 8007ba0:	01100112 40000002 57400483 02010200     .......@..@W....
 8007bb0:	00000103 00000000 00000000 00000000     ................

08007bc0 <vcom_string0>:
 8007bc0:	04090304 00000000 00000000 00000000     ................

08007bd0 <vcom_string1>:
 8007bd0:	00530326 004d0054 00630069 006f0072     &.S.T.M.i.c.r.o.
 8007be0:	006c0065 00630065 00720074 006e006f     e.l.e.c.t.r.o.n.
 8007bf0:	00630069 00000073 00000000 00000000     i.c.s...........

08007c00 <vcom_string2>:
 8007c00:	00430338 00690068 00690062 0053004f     8.C.h.i.b.i.O.S.
 8007c10:	0052002f 00200054 00690056 00740072     /.R.T. .V.i.r.t.
 8007c20:	00610075 0020006c 004f0043 0020004d     u.a.l. .C.O.M. .
 8007c30:	006f0050 00740072 00000000 00000000     P.o.r.t.........

08007c40 <vcom_string3>:
 8007c40:	00330308 00330031 00000000 00000000     ..3.1.3.........

08007c50 <vcom_strings>:
 8007c50:	00000004 08007bc0 00000026 08007bd0     .....{..&....{..
 8007c60:	00000038 08007c00 00000008 08007c40     8....|......@|..

08007c70 <serusbcfg>:
 8007c70:	20001050 00020101 00000000 00000000     P.. ............

08007c80 <vcom_device_descriptor>:
 8007c80:	00000012 08007ba0 00000000 00000000     .....{..........

08007c90 <i2ccfg>:
 8007c90:	00000001 000186a0 00000001 00000000     ................

08007ca0 <nrf24l01SPI>:
 8007ca0:	00000000 40020000 00080004 00000000     .......@........

08007cb0 <nrf24l01Config>:
 8007cb0:	200012ec 40020400 00000001 00000000     ... ...@........

08007cc0 <extcfg>:
	...
 8007d38:	00000026 08005b71 00000000 00000000     &...q[..........
	...

08007d80 <addr>:
 8007d80:	44415551 00000000 00000000 00000000     QUAD............

08007d90 <vmt>:
 8007d90:	080064d1 08006331 080064a1 08006321     .d..1c...d..!c..
 8007da0:	08006481 080062c1 08006381 08006091     .d...b...c...`..
 8007db0:	66776f70 00000000 00000000 00000000     powf............

08007dc0 <dp_h>:
 8007dc0:	00000000 3f15c000 00000000 00000000     .......?........

08007dd0 <dp_l>:
 8007dd0:	00000000 35d1cfdc 00000000 00000000     .......5........

08007de0 <bp>:
 8007de0:	3f800000 3fc00000 00000000 00000000     ...?...?........

08007df0 <TWO52>:
 8007df0:	00000000 43300000 00000000 c3300000     ......0C......0.
 8007e00:	00000043                                C...
